
NTI_4MONTHS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004592  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  00004592  00004626  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  008000a0  008000a0  00004666  2**0
                  ALLOC
  3 .stab         000047dc  00000000  00000000  00004668  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001cc7  00000000  00000000  00008e44  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000ab0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000ac4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000adbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000ca04  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000d8ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000e69c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000e7fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ea89  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f257  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 85 08 	jmp	0x110a	; 0x110a <__vector_1>
       8:	0c 94 bb 08 	jmp	0x1176	; 0x1176 <__vector_2>
       c:	0c 94 f1 08 	jmp	0x11e2	; 0x11e2 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 4c 0e 	jmp	0x1c98	; 0x1c98 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e9       	ldi	r30, 0x92	; 146
      68:	f5 e4       	ldi	r31, 0x45	; 69
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3a       	cpi	r26, 0xA0	; 160
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 ea       	ldi	r26, 0xA0	; 160
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 3a       	cpi	r26, 0xAB	; 171
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 33 22 	call	0x4466	; 0x4466 <main>
      8a:	0c 94 c7 22 	jmp	0x458e	; 0x458e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 90 22 	jmp	0x4520	; 0x4520 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 e7       	ldi	r26, 0x78	; 120
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ac 22 	jmp	0x4558	; 0x4558 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 9c 22 	jmp	0x4538	; 0x4538 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b8 22 	jmp	0x4570	; 0x4570 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 9c 22 	jmp	0x4538	; 0x4538 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b8 22 	jmp	0x4570	; 0x4570 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 90 22 	jmp	0x4520	; 0x4520 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	88 e7       	ldi	r24, 0x78	; 120
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ac 22 	jmp	0x4558	; 0x4558 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 9c 22 	jmp	0x4538	; 0x4538 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 b8 22 	jmp	0x4570	; 0x4570 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 9c 22 	jmp	0x4538	; 0x4538 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 b8 22 	jmp	0x4570	; 0x4570 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 9c 22 	jmp	0x4538	; 0x4538 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 b8 22 	jmp	0x4570	; 0x4570 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 a0 22 	jmp	0x4540	; 0x4540 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 bc 22 	jmp	0x4578	; 0x4578 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <TIMER0_voidInit>:

static void (*TIMER0_pvCallBackFunc)(void)=NULL;


void TIMER0_voidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR0_REG,TCCR0_WGM01);
	/*Normal mode interrupt enable*/
	SET_BIT(TIMSK_REG,TIMSK_TOV0);
	/*CTC Mode*/
	#elif SELECT_MODE == CTC_MODE
	CLR_BIT(TCCR0_REG,TCCR0_WGM00);
     b4e:	a3 e5       	ldi	r26, 0x53	; 83
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e3 e5       	ldi	r30, 0x53	; 83
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	8f 7b       	andi	r24, 0xBF	; 191
     b5a:	8c 93       	st	X, r24
	SET_BIT(TCCR0_REG,TCCR0_WGM01);
     b5c:	a3 e5       	ldi	r26, 0x53	; 83
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e3 e5       	ldi	r30, 0x53	; 83
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	88 60       	ori	r24, 0x08	; 8
     b68:	8c 93       	st	X, r24
	/*Normal mode interrupt enable*/
	SET_BIT(TIMSK_REG,TIMSK_OCIE0);
     b6a:	a9 e5       	ldi	r26, 0x59	; 89
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e9 e5       	ldi	r30, 0x59	; 89
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	82 60       	ori	r24, 0x02	; 2
     b76:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,TCCR0_WGM01);
#endif

/*pre-scaler 1024 */
#if PRE_SCALE_1024
	SET_BIT(TCCR0_REG,TCCR0_CS00);
     b78:	a3 e5       	ldi	r26, 0x53	; 83
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e3 e5       	ldi	r30, 0x53	; 83
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	81 60       	ori	r24, 0x01	; 1
     b84:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,TCCR0_CS01);
     b86:	a3 e5       	ldi	r26, 0x53	; 83
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e3 e5       	ldi	r30, 0x53	; 83
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	8d 7f       	andi	r24, 0xFD	; 253
     b92:	8c 93       	st	X, r24
	SET_BIT(TCCR0_REG,TCCR0_CS02);
     b94:	a3 e5       	ldi	r26, 0x53	; 83
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e3 e5       	ldi	r30, 0x53	; 83
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	84 60       	ori	r24, 0x04	; 4
     ba0:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,TCCR0_CS02);
#endif


#endif
}
     ba2:	cf 91       	pop	r28
     ba4:	df 91       	pop	r29
     ba6:	08 95       	ret

00000ba8 <TIMER0_voidPreLoad>:

void TIMER0_voidPreLoad(u8_CopyPreLoad)
{
     ba8:	df 93       	push	r29
     baa:	cf 93       	push	r28
     bac:	00 d0       	rcall	.+0      	; 0xbae <TIMER0_voidPreLoad+0x6>
     bae:	cd b7       	in	r28, 0x3d	; 61
     bb0:	de b7       	in	r29, 0x3e	; 62
     bb2:	9a 83       	std	Y+2, r25	; 0x02
     bb4:	89 83       	std	Y+1, r24	; 0x01
	/*Pre-load*/
	TCNT0_REG = u8_CopyPreLoad; //247 for 1024 pre scaler
     bb6:	e2 e5       	ldi	r30, 0x52	; 82
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	89 81       	ldd	r24, Y+1	; 0x01
     bbc:	80 83       	st	Z, r24
}
     bbe:	0f 90       	pop	r0
     bc0:	0f 90       	pop	r0
     bc2:	cf 91       	pop	r28
     bc4:	df 91       	pop	r29
     bc6:	08 95       	ret

00000bc8 <TIMER0_u8SetCallBack>:
void TIMER0_u8SetCallBack (void(*Copy_pvCallBackFunc)(void))
{
     bc8:	df 93       	push	r29
     bca:	cf 93       	push	r28
     bcc:	00 d0       	rcall	.+0      	; 0xbce <TIMER0_u8SetCallBack+0x6>
     bce:	cd b7       	in	r28, 0x3d	; 61
     bd0:	de b7       	in	r29, 0x3e	; 62
     bd2:	9a 83       	std	Y+2, r25	; 0x02
     bd4:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pvCallBackFunc!=NULL)
     bd6:	89 81       	ldd	r24, Y+1	; 0x01
     bd8:	9a 81       	ldd	r25, Y+2	; 0x02
     bda:	00 97       	sbiw	r24, 0x00	; 0
     bdc:	31 f0       	breq	.+12     	; 0xbea <TIMER0_u8SetCallBack+0x22>
	{
		TIMER0_pvCallBackFunc= Copy_pvCallBackFunc;
     bde:	89 81       	ldd	r24, Y+1	; 0x01
     be0:	9a 81       	ldd	r25, Y+2	; 0x02
     be2:	90 93 a1 00 	sts	0x00A1, r25
     be6:	80 93 a0 00 	sts	0x00A0, r24
	}
}
     bea:	0f 90       	pop	r0
     bec:	0f 90       	pop	r0
     bee:	cf 91       	pop	r28
     bf0:	df 91       	pop	r29
     bf2:	08 95       	ret

00000bf4 <__vector_11>:

void __vector_11(void)__attribute__((signal,used));
void __vector_11(void)
{
     bf4:	1f 92       	push	r1
     bf6:	0f 92       	push	r0
     bf8:	0f b6       	in	r0, 0x3f	; 63
     bfa:	0f 92       	push	r0
     bfc:	11 24       	eor	r1, r1
     bfe:	2f 93       	push	r18
     c00:	3f 93       	push	r19
     c02:	4f 93       	push	r20
     c04:	5f 93       	push	r21
     c06:	6f 93       	push	r22
     c08:	7f 93       	push	r23
     c0a:	8f 93       	push	r24
     c0c:	9f 93       	push	r25
     c0e:	af 93       	push	r26
     c10:	bf 93       	push	r27
     c12:	ef 93       	push	r30
     c14:	ff 93       	push	r31
     c16:	df 93       	push	r29
     c18:	cf 93       	push	r28
     c1a:	cd b7       	in	r28, 0x3d	; 61
     c1c:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_pvCallBackFunc!=NULL)
     c1e:	80 91 a0 00 	lds	r24, 0x00A0
     c22:	90 91 a1 00 	lds	r25, 0x00A1
     c26:	00 97       	sbiw	r24, 0x00	; 0
     c28:	29 f0       	breq	.+10     	; 0xc34 <__vector_11+0x40>
	{
		TIMER0_pvCallBackFunc();
     c2a:	e0 91 a0 00 	lds	r30, 0x00A0
     c2e:	f0 91 a1 00 	lds	r31, 0x00A1
     c32:	09 95       	icall
	}
}
     c34:	cf 91       	pop	r28
     c36:	df 91       	pop	r29
     c38:	ff 91       	pop	r31
     c3a:	ef 91       	pop	r30
     c3c:	bf 91       	pop	r27
     c3e:	af 91       	pop	r26
     c40:	9f 91       	pop	r25
     c42:	8f 91       	pop	r24
     c44:	7f 91       	pop	r23
     c46:	6f 91       	pop	r22
     c48:	5f 91       	pop	r21
     c4a:	4f 91       	pop	r20
     c4c:	3f 91       	pop	r19
     c4e:	2f 91       	pop	r18
     c50:	0f 90       	pop	r0
     c52:	0f be       	out	0x3f, r0	; 63
     c54:	0f 90       	pop	r0
     c56:	1f 90       	pop	r1
     c58:	18 95       	reti

00000c5a <EXTI_voidInit>:
/*
 * Pre-Build Configuration
 **/

void EXTI_voidInit(void)
{
     c5a:	df 93       	push	r29
     c5c:	cf 93       	push	r28
     c5e:	cd b7       	in	r28, 0x3d	; 61
     c60:	de b7       	in	r29, 0x3e	; 62
		#if EXTI_SENSE_MODE == EXTI_LOW_LEVEL
			CLR_BIT (MCCUR_REG,0) ; CLR_BIT (MCCUR_REG,1);
		#elif EXTI_SENSE_MODE == EXTI_ON_CHANGE
			SET_BIT (MCCUR_REG,0) ; CLR_BIT (MCCUR_REG,1);
		#elif EXTI_SENSE_MODE == EXTI_FALLING_EDGE
			CLR_BIT (MCCUR_REG,0) ; SET_BIT (MCCUR_REG,1);
     c62:	a5 e5       	ldi	r26, 0x55	; 85
     c64:	b0 e0       	ldi	r27, 0x00	; 0
     c66:	e5 e5       	ldi	r30, 0x55	; 85
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	80 81       	ld	r24, Z
     c6c:	8e 7f       	andi	r24, 0xFE	; 254
     c6e:	8c 93       	st	X, r24
     c70:	a5 e5       	ldi	r26, 0x55	; 85
     c72:	b0 e0       	ldi	r27, 0x00	; 0
     c74:	e5 e5       	ldi	r30, 0x55	; 85
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	80 81       	ld	r24, Z
     c7a:	82 60       	ori	r24, 0x02	; 2
     c7c:	8c 93       	st	X, r24
		#elif EXTI_SENSE_MODE == EXTI_RISING_EDGE
			SET_BIT (MCUCSR_REG,6) ;
		#endif
	#endif
#endif
}
     c7e:	cf 91       	pop	r28
     c80:	df 91       	pop	r29
     c82:	08 95       	ret

00000c84 <GIE_voidEnable>:
void GIE_voidEnable(void)
{
     c84:	df 93       	push	r29
     c86:	cf 93       	push	r28
     c88:	cd b7       	in	r28, 0x3d	; 61
     c8a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG_REG,7);
     c8c:	af e5       	ldi	r26, 0x5F	; 95
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	ef e5       	ldi	r30, 0x5F	; 95
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	80 68       	ori	r24, 0x80	; 128
     c98:	8c 93       	st	X, r24
}
     c9a:	cf 91       	pop	r28
     c9c:	df 91       	pop	r29
     c9e:	08 95       	ret

00000ca0 <GIE_voidDisable>:

void GIE_voidDisable(void)
{
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG_REG,7);
     ca8:	af e5       	ldi	r26, 0x5F	; 95
     caa:	b0 e0       	ldi	r27, 0x00	; 0
     cac:	ef e5       	ldi	r30, 0x5F	; 95
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	80 81       	ld	r24, Z
     cb2:	8f 77       	andi	r24, 0x7F	; 127
     cb4:	8c 93       	st	X, r24
}
     cb6:	cf 91       	pop	r28
     cb8:	df 91       	pop	r29
     cba:	08 95       	ret

00000cbc <EXTI_voidSetSignalLatch>:
 * Post-Build Configuration
 **/


void EXTI_voidSetSignalLatch (u8 Copy_u8SenseMode,u8 Copy_u8Line)
{
     cbc:	df 93       	push	r29
     cbe:	cf 93       	push	r28
     cc0:	00 d0       	rcall	.+0      	; 0xcc2 <EXTI_voidSetSignalLatch+0x6>
     cc2:	00 d0       	rcall	.+0      	; 0xcc4 <EXTI_voidSetSignalLatch+0x8>
     cc4:	00 d0       	rcall	.+0      	; 0xcc6 <EXTI_voidSetSignalLatch+0xa>
     cc6:	cd b7       	in	r28, 0x3d	; 61
     cc8:	de b7       	in	r29, 0x3e	; 62
     cca:	89 83       	std	Y+1, r24	; 0x01
     ccc:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_u8Line>=EXTI_LINE0) && (Copy_u8Line<=EXTI_LINE1))
     cce:	8a 81       	ldd	r24, Y+2	; 0x02
     cd0:	83 30       	cpi	r24, 0x03	; 3
     cd2:	08 f0       	brcs	.+2      	; 0xcd6 <EXTI_voidSetSignalLatch+0x1a>
     cd4:	d0 c0       	rjmp	.+416    	; 0xe76 <EXTI_voidSetSignalLatch+0x1ba>
	{
		Copy_u8Line = (6 - Copy_u8Line)* -2;
     cd6:	8a 81       	ldd	r24, Y+2	; 0x02
     cd8:	88 2f       	mov	r24, r24
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	06 97       	sbiw	r24, 0x06	; 6
     cde:	88 0f       	add	r24, r24
     ce0:	99 1f       	adc	r25, r25
     ce2:	8a 83       	std	Y+2, r24	; 0x02

	switch (Copy_u8SenseMode)
     ce4:	89 81       	ldd	r24, Y+1	; 0x01
     ce6:	28 2f       	mov	r18, r24
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	3e 83       	std	Y+6, r19	; 0x06
     cec:	2d 83       	std	Y+5, r18	; 0x05
     cee:	8d 81       	ldd	r24, Y+5	; 0x05
     cf0:	9e 81       	ldd	r25, Y+6	; 0x06
     cf2:	81 30       	cpi	r24, 0x01	; 1
     cf4:	91 05       	cpc	r25, r1
     cf6:	09 f4       	brne	.+2      	; 0xcfa <EXTI_voidSetSignalLatch+0x3e>
     cf8:	95 c0       	rjmp	.+298    	; 0xe24 <EXTI_voidSetSignalLatch+0x168>
     cfa:	2d 81       	ldd	r18, Y+5	; 0x05
     cfc:	3e 81       	ldd	r19, Y+6	; 0x06
     cfe:	22 30       	cpi	r18, 0x02	; 2
     d00:	31 05       	cpc	r19, r1
     d02:	34 f4       	brge	.+12     	; 0xd10 <EXTI_voidSetSignalLatch+0x54>
     d04:	8d 81       	ldd	r24, Y+5	; 0x05
     d06:	9e 81       	ldd	r25, Y+6	; 0x06
     d08:	00 97       	sbiw	r24, 0x00	; 0
     d0a:	09 f4       	brne	.+2      	; 0xd0e <EXTI_voidSetSignalLatch+0x52>
     d0c:	61 c0       	rjmp	.+194    	; 0xdd0 <EXTI_voidSetSignalLatch+0x114>
     d0e:	d1 c0       	rjmp	.+418    	; 0xeb2 <EXTI_voidSetSignalLatch+0x1f6>
     d10:	2d 81       	ldd	r18, Y+5	; 0x05
     d12:	3e 81       	ldd	r19, Y+6	; 0x06
     d14:	22 30       	cpi	r18, 0x02	; 2
     d16:	31 05       	cpc	r19, r1
     d18:	31 f0       	breq	.+12     	; 0xd26 <EXTI_voidSetSignalLatch+0x6a>
     d1a:	8d 81       	ldd	r24, Y+5	; 0x05
     d1c:	9e 81       	ldd	r25, Y+6	; 0x06
     d1e:	83 30       	cpi	r24, 0x03	; 3
     d20:	91 05       	cpc	r25, r1
     d22:	61 f1       	breq	.+88     	; 0xd7c <EXTI_voidSetSignalLatch+0xc0>
     d24:	c6 c0       	rjmp	.+396    	; 0xeb2 <EXTI_voidSetSignalLatch+0x1f6>
	{
	case EXTI_LOW_LEVEL : CLR_BIT(MCCUR_REG,Copy_u8Line); CLR_BIT(MCCUR_REG,Copy_u8Line + 1); break;
     d26:	a5 e5       	ldi	r26, 0x55	; 85
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	e5 e5       	ldi	r30, 0x55	; 85
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	48 2f       	mov	r20, r24
     d32:	8a 81       	ldd	r24, Y+2	; 0x02
     d34:	28 2f       	mov	r18, r24
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	02 c0       	rjmp	.+4      	; 0xd42 <EXTI_voidSetSignalLatch+0x86>
     d3e:	88 0f       	add	r24, r24
     d40:	99 1f       	adc	r25, r25
     d42:	2a 95       	dec	r18
     d44:	e2 f7       	brpl	.-8      	; 0xd3e <EXTI_voidSetSignalLatch+0x82>
     d46:	80 95       	com	r24
     d48:	84 23       	and	r24, r20
     d4a:	8c 93       	st	X, r24
     d4c:	a5 e5       	ldi	r26, 0x55	; 85
     d4e:	b0 e0       	ldi	r27, 0x00	; 0
     d50:	e5 e5       	ldi	r30, 0x55	; 85
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	80 81       	ld	r24, Z
     d56:	48 2f       	mov	r20, r24
     d58:	8a 81       	ldd	r24, Y+2	; 0x02
     d5a:	88 2f       	mov	r24, r24
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	9c 01       	movw	r18, r24
     d60:	2f 5f       	subi	r18, 0xFF	; 255
     d62:	3f 4f       	sbci	r19, 0xFF	; 255
     d64:	81 e0       	ldi	r24, 0x01	; 1
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	02 2e       	mov	r0, r18
     d6a:	02 c0       	rjmp	.+4      	; 0xd70 <EXTI_voidSetSignalLatch+0xb4>
     d6c:	88 0f       	add	r24, r24
     d6e:	99 1f       	adc	r25, r25
     d70:	0a 94       	dec	r0
     d72:	e2 f7       	brpl	.-8      	; 0xd6c <EXTI_voidSetSignalLatch+0xb0>
     d74:	80 95       	com	r24
     d76:	84 23       	and	r24, r20
     d78:	8c 93       	st	X, r24
     d7a:	9b c0       	rjmp	.+310    	; 0xeb2 <EXTI_voidSetSignalLatch+0x1f6>
	case EXTI_ON_CHANGE : SET_BIT(MCCUR_REG,Copy_u8Line); CLR_BIT(MCCUR_REG,Copy_u8Line + 1); break;
     d7c:	a5 e5       	ldi	r26, 0x55	; 85
     d7e:	b0 e0       	ldi	r27, 0x00	; 0
     d80:	e5 e5       	ldi	r30, 0x55	; 85
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	80 81       	ld	r24, Z
     d86:	48 2f       	mov	r20, r24
     d88:	8a 81       	ldd	r24, Y+2	; 0x02
     d8a:	28 2f       	mov	r18, r24
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	02 c0       	rjmp	.+4      	; 0xd98 <EXTI_voidSetSignalLatch+0xdc>
     d94:	88 0f       	add	r24, r24
     d96:	99 1f       	adc	r25, r25
     d98:	2a 95       	dec	r18
     d9a:	e2 f7       	brpl	.-8      	; 0xd94 <EXTI_voidSetSignalLatch+0xd8>
     d9c:	84 2b       	or	r24, r20
     d9e:	8c 93       	st	X, r24
     da0:	a5 e5       	ldi	r26, 0x55	; 85
     da2:	b0 e0       	ldi	r27, 0x00	; 0
     da4:	e5 e5       	ldi	r30, 0x55	; 85
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	80 81       	ld	r24, Z
     daa:	48 2f       	mov	r20, r24
     dac:	8a 81       	ldd	r24, Y+2	; 0x02
     dae:	88 2f       	mov	r24, r24
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	9c 01       	movw	r18, r24
     db4:	2f 5f       	subi	r18, 0xFF	; 255
     db6:	3f 4f       	sbci	r19, 0xFF	; 255
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	02 2e       	mov	r0, r18
     dbe:	02 c0       	rjmp	.+4      	; 0xdc4 <EXTI_voidSetSignalLatch+0x108>
     dc0:	88 0f       	add	r24, r24
     dc2:	99 1f       	adc	r25, r25
     dc4:	0a 94       	dec	r0
     dc6:	e2 f7       	brpl	.-8      	; 0xdc0 <EXTI_voidSetSignalLatch+0x104>
     dc8:	80 95       	com	r24
     dca:	84 23       	and	r24, r20
     dcc:	8c 93       	st	X, r24
     dce:	71 c0       	rjmp	.+226    	; 0xeb2 <EXTI_voidSetSignalLatch+0x1f6>
	case EXTI_FALLING_EDGE : CLR_BIT(MCCUR_REG,Copy_u8Line); SET_BIT(MCCUR_REG,Copy_u8Line + 1); break;
     dd0:	a5 e5       	ldi	r26, 0x55	; 85
     dd2:	b0 e0       	ldi	r27, 0x00	; 0
     dd4:	e5 e5       	ldi	r30, 0x55	; 85
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	80 81       	ld	r24, Z
     dda:	48 2f       	mov	r20, r24
     ddc:	8a 81       	ldd	r24, Y+2	; 0x02
     dde:	28 2f       	mov	r18, r24
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	81 e0       	ldi	r24, 0x01	; 1
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	02 c0       	rjmp	.+4      	; 0xdec <EXTI_voidSetSignalLatch+0x130>
     de8:	88 0f       	add	r24, r24
     dea:	99 1f       	adc	r25, r25
     dec:	2a 95       	dec	r18
     dee:	e2 f7       	brpl	.-8      	; 0xde8 <EXTI_voidSetSignalLatch+0x12c>
     df0:	80 95       	com	r24
     df2:	84 23       	and	r24, r20
     df4:	8c 93       	st	X, r24
     df6:	a5 e5       	ldi	r26, 0x55	; 85
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	e5 e5       	ldi	r30, 0x55	; 85
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	48 2f       	mov	r20, r24
     e02:	8a 81       	ldd	r24, Y+2	; 0x02
     e04:	88 2f       	mov	r24, r24
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	9c 01       	movw	r18, r24
     e0a:	2f 5f       	subi	r18, 0xFF	; 255
     e0c:	3f 4f       	sbci	r19, 0xFF	; 255
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	02 2e       	mov	r0, r18
     e14:	02 c0       	rjmp	.+4      	; 0xe1a <EXTI_voidSetSignalLatch+0x15e>
     e16:	88 0f       	add	r24, r24
     e18:	99 1f       	adc	r25, r25
     e1a:	0a 94       	dec	r0
     e1c:	e2 f7       	brpl	.-8      	; 0xe16 <EXTI_voidSetSignalLatch+0x15a>
     e1e:	84 2b       	or	r24, r20
     e20:	8c 93       	st	X, r24
     e22:	47 c0       	rjmp	.+142    	; 0xeb2 <EXTI_voidSetSignalLatch+0x1f6>
	case EXTI_RISING_EDGE : SET_BIT(MCCUR_REG,Copy_u8Line); SET_BIT(MCCUR_REG,Copy_u8Line + 1); break;
     e24:	a5 e5       	ldi	r26, 0x55	; 85
     e26:	b0 e0       	ldi	r27, 0x00	; 0
     e28:	e5 e5       	ldi	r30, 0x55	; 85
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	80 81       	ld	r24, Z
     e2e:	48 2f       	mov	r20, r24
     e30:	8a 81       	ldd	r24, Y+2	; 0x02
     e32:	28 2f       	mov	r18, r24
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	02 c0       	rjmp	.+4      	; 0xe40 <EXTI_voidSetSignalLatch+0x184>
     e3c:	88 0f       	add	r24, r24
     e3e:	99 1f       	adc	r25, r25
     e40:	2a 95       	dec	r18
     e42:	e2 f7       	brpl	.-8      	; 0xe3c <EXTI_voidSetSignalLatch+0x180>
     e44:	84 2b       	or	r24, r20
     e46:	8c 93       	st	X, r24
     e48:	a5 e5       	ldi	r26, 0x55	; 85
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	e5 e5       	ldi	r30, 0x55	; 85
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	48 2f       	mov	r20, r24
     e54:	8a 81       	ldd	r24, Y+2	; 0x02
     e56:	88 2f       	mov	r24, r24
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	9c 01       	movw	r18, r24
     e5c:	2f 5f       	subi	r18, 0xFF	; 255
     e5e:	3f 4f       	sbci	r19, 0xFF	; 255
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	02 2e       	mov	r0, r18
     e66:	02 c0       	rjmp	.+4      	; 0xe6c <EXTI_voidSetSignalLatch+0x1b0>
     e68:	88 0f       	add	r24, r24
     e6a:	99 1f       	adc	r25, r25
     e6c:	0a 94       	dec	r0
     e6e:	e2 f7       	brpl	.-8      	; 0xe68 <EXTI_voidSetSignalLatch+0x1ac>
     e70:	84 2b       	or	r24, r20
     e72:	8c 93       	st	X, r24
     e74:	1e c0       	rjmp	.+60     	; 0xeb2 <EXTI_voidSetSignalLatch+0x1f6>
	}
	}
	else
	{
	switch (Copy_u8SenseMode)
     e76:	89 81       	ldd	r24, Y+1	; 0x01
     e78:	28 2f       	mov	r18, r24
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	3c 83       	std	Y+4, r19	; 0x04
     e7e:	2b 83       	std	Y+3, r18	; 0x03
     e80:	8b 81       	ldd	r24, Y+3	; 0x03
     e82:	9c 81       	ldd	r25, Y+4	; 0x04
     e84:	00 97       	sbiw	r24, 0x00	; 0
     e86:	31 f0       	breq	.+12     	; 0xe94 <EXTI_voidSetSignalLatch+0x1d8>
     e88:	2b 81       	ldd	r18, Y+3	; 0x03
     e8a:	3c 81       	ldd	r19, Y+4	; 0x04
     e8c:	21 30       	cpi	r18, 0x01	; 1
     e8e:	31 05       	cpc	r19, r1
     e90:	49 f0       	breq	.+18     	; 0xea4 <EXTI_voidSetSignalLatch+0x1e8>
     e92:	0f c0       	rjmp	.+30     	; 0xeb2 <EXTI_voidSetSignalLatch+0x1f6>
	{
	case EXTI_FALLING_EDGE : CLR_BIT(MCUCSR_REG,6); break;
     e94:	a4 e5       	ldi	r26, 0x54	; 84
     e96:	b0 e0       	ldi	r27, 0x00	; 0
     e98:	e4 e5       	ldi	r30, 0x54	; 84
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	8f 7b       	andi	r24, 0xBF	; 191
     ea0:	8c 93       	st	X, r24
     ea2:	07 c0       	rjmp	.+14     	; 0xeb2 <EXTI_voidSetSignalLatch+0x1f6>
	case EXTI_RISING_EDGE  : SET_BIT(MCUCSR_REG,6); break;
     ea4:	a4 e5       	ldi	r26, 0x54	; 84
     ea6:	b0 e0       	ldi	r27, 0x00	; 0
     ea8:	e4 e5       	ldi	r30, 0x54	; 84
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	80 64       	ori	r24, 0x40	; 64
     eb0:	8c 93       	st	X, r24
	}
	}


}
     eb2:	26 96       	adiw	r28, 0x06	; 6
     eb4:	0f b6       	in	r0, 0x3f	; 63
     eb6:	f8 94       	cli
     eb8:	de bf       	out	0x3e, r29	; 62
     eba:	0f be       	out	0x3f, r0	; 63
     ebc:	cd bf       	out	0x3d, r28	; 61
     ebe:	cf 91       	pop	r28
     ec0:	df 91       	pop	r29
     ec2:	08 95       	ret

00000ec4 <MEXTI_voidDsiableInterrupt>:


ErrorState_t MEXTI_voidDsiableInterrupt (u8 Copy_u8Line)
{
     ec4:	df 93       	push	r29
     ec6:	cf 93       	push	r28
     ec8:	00 d0       	rcall	.+0      	; 0xeca <MEXTI_voidDsiableInterrupt+0x6>
     eca:	00 d0       	rcall	.+0      	; 0xecc <MEXTI_voidDsiableInterrupt+0x8>
     ecc:	cd b7       	in	r28, 0x3d	; 61
     ece:	de b7       	in	r29, 0x3e	; 62
     ed0:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_State = SUCCESS;
     ed2:	82 e0       	ldi	r24, 0x02	; 2
     ed4:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8Line)
     ed6:	8a 81       	ldd	r24, Y+2	; 0x02
     ed8:	28 2f       	mov	r18, r24
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	3c 83       	std	Y+4, r19	; 0x04
     ede:	2b 83       	std	Y+3, r18	; 0x03
     ee0:	8b 81       	ldd	r24, Y+3	; 0x03
     ee2:	9c 81       	ldd	r25, Y+4	; 0x04
     ee4:	81 30       	cpi	r24, 0x01	; 1
     ee6:	91 05       	cpc	r25, r1
     ee8:	d1 f1       	breq	.+116    	; 0xf5e <MEXTI_voidDsiableInterrupt+0x9a>
     eea:	2b 81       	ldd	r18, Y+3	; 0x03
     eec:	3c 81       	ldd	r19, Y+4	; 0x04
     eee:	22 30       	cpi	r18, 0x02	; 2
     ef0:	31 05       	cpc	r19, r1
     ef2:	e9 f0       	breq	.+58     	; 0xf2e <MEXTI_voidDsiableInterrupt+0x6a>
     ef4:	8b 81       	ldd	r24, Y+3	; 0x03
     ef6:	9c 81       	ldd	r25, Y+4	; 0x04
     ef8:	00 97       	sbiw	r24, 0x00	; 0
     efa:	09 f0       	breq	.+2      	; 0xefe <MEXTI_voidDsiableInterrupt+0x3a>
     efc:	48 c0       	rjmp	.+144    	; 0xf8e <MEXTI_voidDsiableInterrupt+0xca>
	{
	case EXTI_LINE0:
		CLR_BIT( GCIR_REG , (Copy_u8Line+6));		//bit 6
     efe:	ab e5       	ldi	r26, 0x5B	; 91
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	eb e5       	ldi	r30, 0x5B	; 91
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	48 2f       	mov	r20, r24
     f0a:	8a 81       	ldd	r24, Y+2	; 0x02
     f0c:	88 2f       	mov	r24, r24
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	9c 01       	movw	r18, r24
     f12:	2a 5f       	subi	r18, 0xFA	; 250
     f14:	3f 4f       	sbci	r19, 0xFF	; 255
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	02 2e       	mov	r0, r18
     f1c:	02 c0       	rjmp	.+4      	; 0xf22 <MEXTI_voidDsiableInterrupt+0x5e>
     f1e:	88 0f       	add	r24, r24
     f20:	99 1f       	adc	r25, r25
     f22:	0a 94       	dec	r0
     f24:	e2 f7       	brpl	.-8      	; 0xf1e <MEXTI_voidDsiableInterrupt+0x5a>
     f26:	80 95       	com	r24
     f28:	84 23       	and	r24, r20
     f2a:	8c 93       	st	X, r24
     f2c:	31 c0       	rjmp	.+98     	; 0xf90 <MEXTI_voidDsiableInterrupt+0xcc>
	break;
	case EXTI_LINE1:
		CLR_BIT( GCIR_REG , (Copy_u8Line+5));		//bit 7
     f2e:	ab e5       	ldi	r26, 0x5B	; 91
     f30:	b0 e0       	ldi	r27, 0x00	; 0
     f32:	eb e5       	ldi	r30, 0x5B	; 91
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	48 2f       	mov	r20, r24
     f3a:	8a 81       	ldd	r24, Y+2	; 0x02
     f3c:	88 2f       	mov	r24, r24
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	9c 01       	movw	r18, r24
     f42:	2b 5f       	subi	r18, 0xFB	; 251
     f44:	3f 4f       	sbci	r19, 0xFF	; 255
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	02 2e       	mov	r0, r18
     f4c:	02 c0       	rjmp	.+4      	; 0xf52 <MEXTI_voidDsiableInterrupt+0x8e>
     f4e:	88 0f       	add	r24, r24
     f50:	99 1f       	adc	r25, r25
     f52:	0a 94       	dec	r0
     f54:	e2 f7       	brpl	.-8      	; 0xf4e <MEXTI_voidDsiableInterrupt+0x8a>
     f56:	80 95       	com	r24
     f58:	84 23       	and	r24, r20
     f5a:	8c 93       	st	X, r24
     f5c:	19 c0       	rjmp	.+50     	; 0xf90 <MEXTI_voidDsiableInterrupt+0xcc>
	break;
	case EXTI_LINE2:
		CLR_BIT( GCIR_REG , (Copy_u8Line+4));		//bit 5
     f5e:	ab e5       	ldi	r26, 0x5B	; 91
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	eb e5       	ldi	r30, 0x5B	; 91
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	48 2f       	mov	r20, r24
     f6a:	8a 81       	ldd	r24, Y+2	; 0x02
     f6c:	88 2f       	mov	r24, r24
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	9c 01       	movw	r18, r24
     f72:	2c 5f       	subi	r18, 0xFC	; 252
     f74:	3f 4f       	sbci	r19, 0xFF	; 255
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	02 2e       	mov	r0, r18
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <MEXTI_voidDsiableInterrupt+0xbe>
     f7e:	88 0f       	add	r24, r24
     f80:	99 1f       	adc	r25, r25
     f82:	0a 94       	dec	r0
     f84:	e2 f7       	brpl	.-8      	; 0xf7e <MEXTI_voidDsiableInterrupt+0xba>
     f86:	80 95       	com	r24
     f88:	84 23       	and	r24, r20
     f8a:	8c 93       	st	X, r24
     f8c:	01 c0       	rjmp	.+2      	; 0xf90 <MEXTI_voidDsiableInterrupt+0xcc>
	break;
	default:
		Local_State = OUT_OF_RANGE_ERR;
     f8e:	19 82       	std	Y+1, r1	; 0x01
		break;

	}

	return Local_State;
     f90:	89 81       	ldd	r24, Y+1	; 0x01
}
     f92:	0f 90       	pop	r0
     f94:	0f 90       	pop	r0
     f96:	0f 90       	pop	r0
     f98:	0f 90       	pop	r0
     f9a:	cf 91       	pop	r28
     f9c:	df 91       	pop	r29
     f9e:	08 95       	ret

00000fa0 <MEXTI_voidEnableInterrupt>:

ErrorState_t MEXTI_voidEnableInterrupt (u8 Copy_u8Line)
{
     fa0:	df 93       	push	r29
     fa2:	cf 93       	push	r28
     fa4:	00 d0       	rcall	.+0      	; 0xfa6 <MEXTI_voidEnableInterrupt+0x6>
     fa6:	00 d0       	rcall	.+0      	; 0xfa8 <MEXTI_voidEnableInterrupt+0x8>
     fa8:	cd b7       	in	r28, 0x3d	; 61
     faa:	de b7       	in	r29, 0x3e	; 62
     fac:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_State = SUCCESS;
     fae:	82 e0       	ldi	r24, 0x02	; 2
     fb0:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8Line)
     fb2:	8a 81       	ldd	r24, Y+2	; 0x02
     fb4:	28 2f       	mov	r18, r24
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	3c 83       	std	Y+4, r19	; 0x04
     fba:	2b 83       	std	Y+3, r18	; 0x03
     fbc:	8b 81       	ldd	r24, Y+3	; 0x03
     fbe:	9c 81       	ldd	r25, Y+4	; 0x04
     fc0:	81 30       	cpi	r24, 0x01	; 1
     fc2:	91 05       	cpc	r25, r1
     fc4:	c1 f1       	breq	.+112    	; 0x1036 <MEXTI_voidEnableInterrupt+0x96>
     fc6:	2b 81       	ldd	r18, Y+3	; 0x03
     fc8:	3c 81       	ldd	r19, Y+4	; 0x04
     fca:	22 30       	cpi	r18, 0x02	; 2
     fcc:	31 05       	cpc	r19, r1
     fce:	e1 f0       	breq	.+56     	; 0x1008 <MEXTI_voidEnableInterrupt+0x68>
     fd0:	8b 81       	ldd	r24, Y+3	; 0x03
     fd2:	9c 81       	ldd	r25, Y+4	; 0x04
     fd4:	00 97       	sbiw	r24, 0x00	; 0
     fd6:	09 f0       	breq	.+2      	; 0xfda <MEXTI_voidEnableInterrupt+0x3a>
     fd8:	45 c0       	rjmp	.+138    	; 0x1064 <MEXTI_voidEnableInterrupt+0xc4>
	{
	case EXTI_LINE0:
		SET_BIT( GCIR_REG , (Copy_u8Line+6));		//bit 6
     fda:	ab e5       	ldi	r26, 0x5B	; 91
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	eb e5       	ldi	r30, 0x5B	; 91
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	48 2f       	mov	r20, r24
     fe6:	8a 81       	ldd	r24, Y+2	; 0x02
     fe8:	88 2f       	mov	r24, r24
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	9c 01       	movw	r18, r24
     fee:	2a 5f       	subi	r18, 0xFA	; 250
     ff0:	3f 4f       	sbci	r19, 0xFF	; 255
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	02 2e       	mov	r0, r18
     ff8:	02 c0       	rjmp	.+4      	; 0xffe <MEXTI_voidEnableInterrupt+0x5e>
     ffa:	88 0f       	add	r24, r24
     ffc:	99 1f       	adc	r25, r25
     ffe:	0a 94       	dec	r0
    1000:	e2 f7       	brpl	.-8      	; 0xffa <MEXTI_voidEnableInterrupt+0x5a>
    1002:	84 2b       	or	r24, r20
    1004:	8c 93       	st	X, r24
    1006:	2f c0       	rjmp	.+94     	; 0x1066 <MEXTI_voidEnableInterrupt+0xc6>
	break;
	case EXTI_LINE1:
		SET_BIT( GCIR_REG , (Copy_u8Line+5));		//bit 7
    1008:	ab e5       	ldi	r26, 0x5B	; 91
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	eb e5       	ldi	r30, 0x5B	; 91
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	48 2f       	mov	r20, r24
    1014:	8a 81       	ldd	r24, Y+2	; 0x02
    1016:	88 2f       	mov	r24, r24
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	9c 01       	movw	r18, r24
    101c:	2b 5f       	subi	r18, 0xFB	; 251
    101e:	3f 4f       	sbci	r19, 0xFF	; 255
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	02 2e       	mov	r0, r18
    1026:	02 c0       	rjmp	.+4      	; 0x102c <MEXTI_voidEnableInterrupt+0x8c>
    1028:	88 0f       	add	r24, r24
    102a:	99 1f       	adc	r25, r25
    102c:	0a 94       	dec	r0
    102e:	e2 f7       	brpl	.-8      	; 0x1028 <MEXTI_voidEnableInterrupt+0x88>
    1030:	84 2b       	or	r24, r20
    1032:	8c 93       	st	X, r24
    1034:	18 c0       	rjmp	.+48     	; 0x1066 <MEXTI_voidEnableInterrupt+0xc6>
	break;
	case EXTI_LINE2:
		SET_BIT( GCIR_REG , (Copy_u8Line+4));		//bit 5
    1036:	ab e5       	ldi	r26, 0x5B	; 91
    1038:	b0 e0       	ldi	r27, 0x00	; 0
    103a:	eb e5       	ldi	r30, 0x5B	; 91
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	48 2f       	mov	r20, r24
    1042:	8a 81       	ldd	r24, Y+2	; 0x02
    1044:	88 2f       	mov	r24, r24
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	9c 01       	movw	r18, r24
    104a:	2c 5f       	subi	r18, 0xFC	; 252
    104c:	3f 4f       	sbci	r19, 0xFF	; 255
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	02 2e       	mov	r0, r18
    1054:	02 c0       	rjmp	.+4      	; 0x105a <MEXTI_voidEnableInterrupt+0xba>
    1056:	88 0f       	add	r24, r24
    1058:	99 1f       	adc	r25, r25
    105a:	0a 94       	dec	r0
    105c:	e2 f7       	brpl	.-8      	; 0x1056 <MEXTI_voidEnableInterrupt+0xb6>
    105e:	84 2b       	or	r24, r20
    1060:	8c 93       	st	X, r24
    1062:	01 c0       	rjmp	.+2      	; 0x1066 <MEXTI_voidEnableInterrupt+0xc6>
	break;
	default:
		Local_State = OUT_OF_RANGE_ERR;
    1064:	19 82       	std	Y+1, r1	; 0x01
		break;
	}

	return Local_State;
    1066:	89 81       	ldd	r24, Y+1	; 0x01
}
    1068:	0f 90       	pop	r0
    106a:	0f 90       	pop	r0
    106c:	0f 90       	pop	r0
    106e:	0f 90       	pop	r0
    1070:	cf 91       	pop	r28
    1072:	df 91       	pop	r29
    1074:	08 95       	ret

00001076 <EXTI_voidClearFlag>:

void EXTI_voidClearFlag (u8 Copy_u8Line)
{
    1076:	df 93       	push	r29
    1078:	cf 93       	push	r28
    107a:	0f 92       	push	r0
    107c:	cd b7       	in	r28, 0x3d	; 61
    107e:	de b7       	in	r29, 0x3e	; 62
    1080:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(GIFR_REG,Copy_u8Line);
    1082:	aa e5       	ldi	r26, 0x5A	; 90
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	ea e5       	ldi	r30, 0x5A	; 90
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	48 2f       	mov	r20, r24
    108e:	89 81       	ldd	r24, Y+1	; 0x01
    1090:	28 2f       	mov	r18, r24
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	02 2e       	mov	r0, r18
    109a:	02 c0       	rjmp	.+4      	; 0x10a0 <EXTI_voidClearFlag+0x2a>
    109c:	88 0f       	add	r24, r24
    109e:	99 1f       	adc	r25, r25
    10a0:	0a 94       	dec	r0
    10a2:	e2 f7       	brpl	.-8      	; 0x109c <EXTI_voidClearFlag+0x26>
    10a4:	84 2b       	or	r24, r20
    10a6:	8c 93       	st	X, r24
}
    10a8:	0f 90       	pop	r0
    10aa:	cf 91       	pop	r28
    10ac:	df 91       	pop	r29
    10ae:	08 95       	ret

000010b0 <EXTI_voidGetFlag>:

void EXTI_voidGetFlag (u8 Copy_u8Line)
{
    10b0:	df 93       	push	r29
    10b2:	cf 93       	push	r28
    10b4:	00 d0       	rcall	.+0      	; 0x10b6 <EXTI_voidGetFlag+0x6>
    10b6:	cd b7       	in	r28, 0x3d	; 61
    10b8:	de b7       	in	r29, 0x3e	; 62
    10ba:	89 83       	std	Y+1, r24	; 0x01
	GET_BIT(GIFR_REG,Copy_u8Line);
    10bc:	ea e5       	ldi	r30, 0x5A	; 90
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
}
    10c2:	0f 90       	pop	r0
    10c4:	0f 90       	pop	r0
    10c6:	cf 91       	pop	r28
    10c8:	df 91       	pop	r29
    10ca:	08 95       	ret

000010cc <EXTI_voidSetCallBack>:
/*
 * Set Call Back Function
 **/

void EXTI_voidSetCallBack (void (*Copy_pvoidCallBack) (void),u8 Copy_u8EXTILine)
		{
    10cc:	df 93       	push	r29
    10ce:	cf 93       	push	r28
    10d0:	00 d0       	rcall	.+0      	; 0x10d2 <EXTI_voidSetCallBack+0x6>
    10d2:	0f 92       	push	r0
    10d4:	cd b7       	in	r28, 0x3d	; 61
    10d6:	de b7       	in	r29, 0x3e	; 62
    10d8:	9a 83       	std	Y+2, r25	; 0x02
    10da:	89 83       	std	Y+1, r24	; 0x01
    10dc:	6b 83       	std	Y+3, r22	; 0x03
			if(Copy_pvoidCallBack!= NULL)
    10de:	89 81       	ldd	r24, Y+1	; 0x01
    10e0:	9a 81       	ldd	r25, Y+2	; 0x02
    10e2:	00 97       	sbiw	r24, 0x00	; 0
    10e4:	61 f0       	breq	.+24     	; 0x10fe <EXTI_voidSetCallBack+0x32>
			{
				EXTI_CallBack[Copy_u8EXTILine]=Copy_pvoidCallBack;
    10e6:	8b 81       	ldd	r24, Y+3	; 0x03
    10e8:	88 2f       	mov	r24, r24
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	88 0f       	add	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	fc 01       	movw	r30, r24
    10f2:	ee 55       	subi	r30, 0x5E	; 94
    10f4:	ff 4f       	sbci	r31, 0xFF	; 255
    10f6:	89 81       	ldd	r24, Y+1	; 0x01
    10f8:	9a 81       	ldd	r25, Y+2	; 0x02
    10fa:	91 83       	std	Z+1, r25	; 0x01
    10fc:	80 83       	st	Z, r24
			}
		}
    10fe:	0f 90       	pop	r0
    1100:	0f 90       	pop	r0
    1102:	0f 90       	pop	r0
    1104:	cf 91       	pop	r28
    1106:	df 91       	pop	r29
    1108:	08 95       	ret

0000110a <__vector_1>:
 **/


void __vector_1(void)__attribute__((signal,used)); //attribute so the linker doesn't make optimization on the function
void __vector_1(void)
{
    110a:	1f 92       	push	r1
    110c:	0f 92       	push	r0
    110e:	0f b6       	in	r0, 0x3f	; 63
    1110:	0f 92       	push	r0
    1112:	11 24       	eor	r1, r1
    1114:	2f 93       	push	r18
    1116:	3f 93       	push	r19
    1118:	4f 93       	push	r20
    111a:	5f 93       	push	r21
    111c:	6f 93       	push	r22
    111e:	7f 93       	push	r23
    1120:	8f 93       	push	r24
    1122:	9f 93       	push	r25
    1124:	af 93       	push	r26
    1126:	bf 93       	push	r27
    1128:	ef 93       	push	r30
    112a:	ff 93       	push	r31
    112c:	df 93       	push	r29
    112e:	cf 93       	push	r28
    1130:	cd b7       	in	r28, 0x3d	; 61
    1132:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_CallBack[0] != NULL)
    1134:	80 91 a2 00 	lds	r24, 0x00A2
    1138:	90 91 a3 00 	lds	r25, 0x00A3
    113c:	00 97       	sbiw	r24, 0x00	; 0
    113e:	41 f0       	breq	.+16     	; 0x1150 <__vector_1+0x46>
	{
		EXTI_CallBack[0] ();  // call the global pointer to function
    1140:	e0 91 a2 00 	lds	r30, 0x00A2
    1144:	f0 91 a3 00 	lds	r31, 0x00A3
    1148:	09 95       	icall
		EXTI_voidClearFlag(EXTI_LINE0+6);
    114a:	86 e0       	ldi	r24, 0x06	; 6
    114c:	0e 94 3b 08 	call	0x1076	; 0x1076 <EXTI_voidClearFlag>
	}
}
    1150:	cf 91       	pop	r28
    1152:	df 91       	pop	r29
    1154:	ff 91       	pop	r31
    1156:	ef 91       	pop	r30
    1158:	bf 91       	pop	r27
    115a:	af 91       	pop	r26
    115c:	9f 91       	pop	r25
    115e:	8f 91       	pop	r24
    1160:	7f 91       	pop	r23
    1162:	6f 91       	pop	r22
    1164:	5f 91       	pop	r21
    1166:	4f 91       	pop	r20
    1168:	3f 91       	pop	r19
    116a:	2f 91       	pop	r18
    116c:	0f 90       	pop	r0
    116e:	0f be       	out	0x3f, r0	; 63
    1170:	0f 90       	pop	r0
    1172:	1f 90       	pop	r1
    1174:	18 95       	reti

00001176 <__vector_2>:

void __vector_2(void)__attribute__((signal,used));
void __vector_2(void)
{
    1176:	1f 92       	push	r1
    1178:	0f 92       	push	r0
    117a:	0f b6       	in	r0, 0x3f	; 63
    117c:	0f 92       	push	r0
    117e:	11 24       	eor	r1, r1
    1180:	2f 93       	push	r18
    1182:	3f 93       	push	r19
    1184:	4f 93       	push	r20
    1186:	5f 93       	push	r21
    1188:	6f 93       	push	r22
    118a:	7f 93       	push	r23
    118c:	8f 93       	push	r24
    118e:	9f 93       	push	r25
    1190:	af 93       	push	r26
    1192:	bf 93       	push	r27
    1194:	ef 93       	push	r30
    1196:	ff 93       	push	r31
    1198:	df 93       	push	r29
    119a:	cf 93       	push	r28
    119c:	cd b7       	in	r28, 0x3d	; 61
    119e:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_CallBack[1] != NULL)
    11a0:	80 91 a4 00 	lds	r24, 0x00A4
    11a4:	90 91 a5 00 	lds	r25, 0x00A5
    11a8:	00 97       	sbiw	r24, 0x00	; 0
    11aa:	41 f0       	breq	.+16     	; 0x11bc <__vector_2+0x46>
	{
		EXTI_CallBack[1] ();  // call the global pointer to function
    11ac:	e0 91 a4 00 	lds	r30, 0x00A4
    11b0:	f0 91 a5 00 	lds	r31, 0x00A5
    11b4:	09 95       	icall
		EXTI_voidClearFlag(EXTI_LINE1+5);
    11b6:	87 e0       	ldi	r24, 0x07	; 7
    11b8:	0e 94 3b 08 	call	0x1076	; 0x1076 <EXTI_voidClearFlag>
	}
}
    11bc:	cf 91       	pop	r28
    11be:	df 91       	pop	r29
    11c0:	ff 91       	pop	r31
    11c2:	ef 91       	pop	r30
    11c4:	bf 91       	pop	r27
    11c6:	af 91       	pop	r26
    11c8:	9f 91       	pop	r25
    11ca:	8f 91       	pop	r24
    11cc:	7f 91       	pop	r23
    11ce:	6f 91       	pop	r22
    11d0:	5f 91       	pop	r21
    11d2:	4f 91       	pop	r20
    11d4:	3f 91       	pop	r19
    11d6:	2f 91       	pop	r18
    11d8:	0f 90       	pop	r0
    11da:	0f be       	out	0x3f, r0	; 63
    11dc:	0f 90       	pop	r0
    11de:	1f 90       	pop	r1
    11e0:	18 95       	reti

000011e2 <__vector_3>:

void __vector_3(void)__attribute__((signal,used));
void __vector_3(void)
{
    11e2:	1f 92       	push	r1
    11e4:	0f 92       	push	r0
    11e6:	0f b6       	in	r0, 0x3f	; 63
    11e8:	0f 92       	push	r0
    11ea:	11 24       	eor	r1, r1
    11ec:	2f 93       	push	r18
    11ee:	3f 93       	push	r19
    11f0:	4f 93       	push	r20
    11f2:	5f 93       	push	r21
    11f4:	6f 93       	push	r22
    11f6:	7f 93       	push	r23
    11f8:	8f 93       	push	r24
    11fa:	9f 93       	push	r25
    11fc:	af 93       	push	r26
    11fe:	bf 93       	push	r27
    1200:	ef 93       	push	r30
    1202:	ff 93       	push	r31
    1204:	df 93       	push	r29
    1206:	cf 93       	push	r28
    1208:	cd b7       	in	r28, 0x3d	; 61
    120a:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_CallBack[2] != NULL)
    120c:	80 91 a6 00 	lds	r24, 0x00A6
    1210:	90 91 a7 00 	lds	r25, 0x00A7
    1214:	00 97       	sbiw	r24, 0x00	; 0
    1216:	41 f0       	breq	.+16     	; 0x1228 <__vector_3+0x46>
	{
		EXTI_CallBack[2] ();  // call the global pointer to function
    1218:	e0 91 a6 00 	lds	r30, 0x00A6
    121c:	f0 91 a7 00 	lds	r31, 0x00A7
    1220:	09 95       	icall
		EXTI_voidClearFlag(EXTI_LINE2+4);
    1222:	85 e0       	ldi	r24, 0x05	; 5
    1224:	0e 94 3b 08 	call	0x1076	; 0x1076 <EXTI_voidClearFlag>
	}
}
    1228:	cf 91       	pop	r28
    122a:	df 91       	pop	r29
    122c:	ff 91       	pop	r31
    122e:	ef 91       	pop	r30
    1230:	bf 91       	pop	r27
    1232:	af 91       	pop	r26
    1234:	9f 91       	pop	r25
    1236:	8f 91       	pop	r24
    1238:	7f 91       	pop	r23
    123a:	6f 91       	pop	r22
    123c:	5f 91       	pop	r21
    123e:	4f 91       	pop	r20
    1240:	3f 91       	pop	r19
    1242:	2f 91       	pop	r18
    1244:	0f 90       	pop	r0
    1246:	0f be       	out	0x3f, r0	; 63
    1248:	0f 90       	pop	r0
    124a:	1f 90       	pop	r1
    124c:	18 95       	reti

0000124e <MDIO_voidsetPinDirection>:
#include "MDIO_priv.h"
#include "MDIO_config.h"
#include "MDIO_int.h"

void MDIO_voidsetPinDirection(Pin_t copy_enPin, Direction_t copy_enDirection)
{
    124e:	df 93       	push	r29
    1250:	cf 93       	push	r28
    1252:	cd b7       	in	r28, 0x3d	; 61
    1254:	de b7       	in	r29, 0x3e	; 62
    1256:	2e 97       	sbiw	r28, 0x0e	; 14
    1258:	0f b6       	in	r0, 0x3f	; 63
    125a:	f8 94       	cli
    125c:	de bf       	out	0x3e, r29	; 62
    125e:	0f be       	out	0x3f, r0	; 63
    1260:	cd bf       	out	0x3d, r28	; 61
    1262:	8b 83       	std	Y+3, r24	; 0x03
    1264:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8port=copy_enPin/10;  // 1-4
    1266:	8b 81       	ldd	r24, Y+3	; 0x03
    1268:	9a e0       	ldi	r25, 0x0A	; 10
    126a:	69 2f       	mov	r22, r25
    126c:	0e 94 62 22 	call	0x44c4	; 0x44c4 <__udivmodqi4>
    1270:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8pin=copy_enPin%10;   //  0-7
    1272:	8b 81       	ldd	r24, Y+3	; 0x03
    1274:	9a e0       	ldi	r25, 0x0A	; 10
    1276:	69 2f       	mov	r22, r25
    1278:	0e 94 62 22 	call	0x44c4	; 0x44c4 <__udivmodqi4>
    127c:	89 2f       	mov	r24, r25
    127e:	89 83       	std	Y+1, r24	; 0x01

	switch(Local_u8port)
    1280:	8a 81       	ldd	r24, Y+2	; 0x02
    1282:	28 2f       	mov	r18, r24
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	3e 87       	std	Y+14, r19	; 0x0e
    1288:	2d 87       	std	Y+13, r18	; 0x0d
    128a:	8d 85       	ldd	r24, Y+13	; 0x0d
    128c:	9e 85       	ldd	r25, Y+14	; 0x0e
    128e:	82 30       	cpi	r24, 0x02	; 2
    1290:	91 05       	cpc	r25, r1
    1292:	09 f4       	brne	.+2      	; 0x1296 <MDIO_voidsetPinDirection+0x48>
    1294:	50 c0       	rjmp	.+160    	; 0x1336 <MDIO_voidsetPinDirection+0xe8>
    1296:	2d 85       	ldd	r18, Y+13	; 0x0d
    1298:	3e 85       	ldd	r19, Y+14	; 0x0e
    129a:	23 30       	cpi	r18, 0x03	; 3
    129c:	31 05       	cpc	r19, r1
    129e:	34 f4       	brge	.+12     	; 0x12ac <MDIO_voidsetPinDirection+0x5e>
    12a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    12a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    12a4:	81 30       	cpi	r24, 0x01	; 1
    12a6:	91 05       	cpc	r25, r1
    12a8:	71 f0       	breq	.+28     	; 0x12c6 <MDIO_voidsetPinDirection+0x78>
    12aa:	ec c0       	rjmp	.+472    	; 0x1484 <MDIO_voidsetPinDirection+0x236>
    12ac:	2d 85       	ldd	r18, Y+13	; 0x0d
    12ae:	3e 85       	ldd	r19, Y+14	; 0x0e
    12b0:	23 30       	cpi	r18, 0x03	; 3
    12b2:	31 05       	cpc	r19, r1
    12b4:	09 f4       	brne	.+2      	; 0x12b8 <MDIO_voidsetPinDirection+0x6a>
    12b6:	77 c0       	rjmp	.+238    	; 0x13a6 <MDIO_voidsetPinDirection+0x158>
    12b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    12ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    12bc:	84 30       	cpi	r24, 0x04	; 4
    12be:	91 05       	cpc	r25, r1
    12c0:	09 f4       	brne	.+2      	; 0x12c4 <MDIO_voidsetPinDirection+0x76>
    12c2:	a9 c0       	rjmp	.+338    	; 0x1416 <MDIO_voidsetPinDirection+0x1c8>
    12c4:	df c0       	rjmp	.+446    	; 0x1484 <MDIO_voidsetPinDirection+0x236>
	{
	case PORTA:
		switch(copy_enDirection)
    12c6:	8c 81       	ldd	r24, Y+4	; 0x04
    12c8:	28 2f       	mov	r18, r24
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	3c 87       	std	Y+12, r19	; 0x0c
    12ce:	2b 87       	std	Y+11, r18	; 0x0b
    12d0:	8b 85       	ldd	r24, Y+11	; 0x0b
    12d2:	9c 85       	ldd	r25, Y+12	; 0x0c
    12d4:	00 97       	sbiw	r24, 0x00	; 0
    12d6:	31 f0       	breq	.+12     	; 0x12e4 <MDIO_voidsetPinDirection+0x96>
    12d8:	2b 85       	ldd	r18, Y+11	; 0x0b
    12da:	3c 85       	ldd	r19, Y+12	; 0x0c
    12dc:	21 30       	cpi	r18, 0x01	; 1
    12de:	31 05       	cpc	r19, r1
    12e0:	b1 f0       	breq	.+44     	; 0x130e <MDIO_voidsetPinDirection+0xc0>
    12e2:	d0 c0       	rjmp	.+416    	; 0x1484 <MDIO_voidsetPinDirection+0x236>
		{
		case INPUT:
		CLR_BIT(DDRA_REG,Local_u8pin);
    12e4:	aa e3       	ldi	r26, 0x3A	; 58
    12e6:	b0 e0       	ldi	r27, 0x00	; 0
    12e8:	ea e3       	ldi	r30, 0x3A	; 58
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	80 81       	ld	r24, Z
    12ee:	48 2f       	mov	r20, r24
    12f0:	89 81       	ldd	r24, Y+1	; 0x01
    12f2:	28 2f       	mov	r18, r24
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	02 2e       	mov	r0, r18
    12fc:	02 c0       	rjmp	.+4      	; 0x1302 <MDIO_voidsetPinDirection+0xb4>
    12fe:	88 0f       	add	r24, r24
    1300:	99 1f       	adc	r25, r25
    1302:	0a 94       	dec	r0
    1304:	e2 f7       	brpl	.-8      	; 0x12fe <MDIO_voidsetPinDirection+0xb0>
    1306:	80 95       	com	r24
    1308:	84 23       	and	r24, r20
    130a:	8c 93       	st	X, r24
    130c:	bb c0       	rjmp	.+374    	; 0x1484 <MDIO_voidsetPinDirection+0x236>
		break;
		case OUTPUT:
		SET_BIT(DDRA_REG,Local_u8pin);
    130e:	aa e3       	ldi	r26, 0x3A	; 58
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	ea e3       	ldi	r30, 0x3A	; 58
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	48 2f       	mov	r20, r24
    131a:	89 81       	ldd	r24, Y+1	; 0x01
    131c:	28 2f       	mov	r18, r24
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	02 2e       	mov	r0, r18
    1326:	02 c0       	rjmp	.+4      	; 0x132c <MDIO_voidsetPinDirection+0xde>
    1328:	88 0f       	add	r24, r24
    132a:	99 1f       	adc	r25, r25
    132c:	0a 94       	dec	r0
    132e:	e2 f7       	brpl	.-8      	; 0x1328 <MDIO_voidsetPinDirection+0xda>
    1330:	84 2b       	or	r24, r20
    1332:	8c 93       	st	X, r24
    1334:	a7 c0       	rjmp	.+334    	; 0x1484 <MDIO_voidsetPinDirection+0x236>
			//Report Error
			break;
		}
		break;
	case PORTB:
			switch(copy_enDirection)
    1336:	8c 81       	ldd	r24, Y+4	; 0x04
    1338:	28 2f       	mov	r18, r24
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	3a 87       	std	Y+10, r19	; 0x0a
    133e:	29 87       	std	Y+9, r18	; 0x09
    1340:	89 85       	ldd	r24, Y+9	; 0x09
    1342:	9a 85       	ldd	r25, Y+10	; 0x0a
    1344:	00 97       	sbiw	r24, 0x00	; 0
    1346:	31 f0       	breq	.+12     	; 0x1354 <MDIO_voidsetPinDirection+0x106>
    1348:	29 85       	ldd	r18, Y+9	; 0x09
    134a:	3a 85       	ldd	r19, Y+10	; 0x0a
    134c:	21 30       	cpi	r18, 0x01	; 1
    134e:	31 05       	cpc	r19, r1
    1350:	b1 f0       	breq	.+44     	; 0x137e <MDIO_voidsetPinDirection+0x130>
    1352:	98 c0       	rjmp	.+304    	; 0x1484 <MDIO_voidsetPinDirection+0x236>
			{
			case INPUT:
			CLR_BIT(DDRB_REG,Local_u8pin);
    1354:	a7 e3       	ldi	r26, 0x37	; 55
    1356:	b0 e0       	ldi	r27, 0x00	; 0
    1358:	e7 e3       	ldi	r30, 0x37	; 55
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	80 81       	ld	r24, Z
    135e:	48 2f       	mov	r20, r24
    1360:	89 81       	ldd	r24, Y+1	; 0x01
    1362:	28 2f       	mov	r18, r24
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	02 2e       	mov	r0, r18
    136c:	02 c0       	rjmp	.+4      	; 0x1372 <MDIO_voidsetPinDirection+0x124>
    136e:	88 0f       	add	r24, r24
    1370:	99 1f       	adc	r25, r25
    1372:	0a 94       	dec	r0
    1374:	e2 f7       	brpl	.-8      	; 0x136e <MDIO_voidsetPinDirection+0x120>
    1376:	80 95       	com	r24
    1378:	84 23       	and	r24, r20
    137a:	8c 93       	st	X, r24
    137c:	83 c0       	rjmp	.+262    	; 0x1484 <MDIO_voidsetPinDirection+0x236>
			break;
			case OUTPUT:
			SET_BIT(DDRB_REG,Local_u8pin);
    137e:	a7 e3       	ldi	r26, 0x37	; 55
    1380:	b0 e0       	ldi	r27, 0x00	; 0
    1382:	e7 e3       	ldi	r30, 0x37	; 55
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	80 81       	ld	r24, Z
    1388:	48 2f       	mov	r20, r24
    138a:	89 81       	ldd	r24, Y+1	; 0x01
    138c:	28 2f       	mov	r18, r24
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	02 2e       	mov	r0, r18
    1396:	02 c0       	rjmp	.+4      	; 0x139c <MDIO_voidsetPinDirection+0x14e>
    1398:	88 0f       	add	r24, r24
    139a:	99 1f       	adc	r25, r25
    139c:	0a 94       	dec	r0
    139e:	e2 f7       	brpl	.-8      	; 0x1398 <MDIO_voidsetPinDirection+0x14a>
    13a0:	84 2b       	or	r24, r20
    13a2:	8c 93       	st	X, r24
    13a4:	6f c0       	rjmp	.+222    	; 0x1484 <MDIO_voidsetPinDirection+0x236>
				//Report Error
				break;
			}
		break;
	case PORTC:
			switch(copy_enDirection)
    13a6:	8c 81       	ldd	r24, Y+4	; 0x04
    13a8:	28 2f       	mov	r18, r24
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	38 87       	std	Y+8, r19	; 0x08
    13ae:	2f 83       	std	Y+7, r18	; 0x07
    13b0:	8f 81       	ldd	r24, Y+7	; 0x07
    13b2:	98 85       	ldd	r25, Y+8	; 0x08
    13b4:	00 97       	sbiw	r24, 0x00	; 0
    13b6:	31 f0       	breq	.+12     	; 0x13c4 <MDIO_voidsetPinDirection+0x176>
    13b8:	2f 81       	ldd	r18, Y+7	; 0x07
    13ba:	38 85       	ldd	r19, Y+8	; 0x08
    13bc:	21 30       	cpi	r18, 0x01	; 1
    13be:	31 05       	cpc	r19, r1
    13c0:	b1 f0       	breq	.+44     	; 0x13ee <MDIO_voidsetPinDirection+0x1a0>
    13c2:	60 c0       	rjmp	.+192    	; 0x1484 <MDIO_voidsetPinDirection+0x236>
			{
			case INPUT:
			CLR_BIT(DDRC_REG,Local_u8pin);
    13c4:	a4 e3       	ldi	r26, 0x34	; 52
    13c6:	b0 e0       	ldi	r27, 0x00	; 0
    13c8:	e4 e3       	ldi	r30, 0x34	; 52
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	80 81       	ld	r24, Z
    13ce:	48 2f       	mov	r20, r24
    13d0:	89 81       	ldd	r24, Y+1	; 0x01
    13d2:	28 2f       	mov	r18, r24
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	02 2e       	mov	r0, r18
    13dc:	02 c0       	rjmp	.+4      	; 0x13e2 <MDIO_voidsetPinDirection+0x194>
    13de:	88 0f       	add	r24, r24
    13e0:	99 1f       	adc	r25, r25
    13e2:	0a 94       	dec	r0
    13e4:	e2 f7       	brpl	.-8      	; 0x13de <MDIO_voidsetPinDirection+0x190>
    13e6:	80 95       	com	r24
    13e8:	84 23       	and	r24, r20
    13ea:	8c 93       	st	X, r24
    13ec:	4b c0       	rjmp	.+150    	; 0x1484 <MDIO_voidsetPinDirection+0x236>
			break;
			case OUTPUT:
			SET_BIT(DDRC_REG,Local_u8pin);
    13ee:	a4 e3       	ldi	r26, 0x34	; 52
    13f0:	b0 e0       	ldi	r27, 0x00	; 0
    13f2:	e4 e3       	ldi	r30, 0x34	; 52
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	80 81       	ld	r24, Z
    13f8:	48 2f       	mov	r20, r24
    13fa:	89 81       	ldd	r24, Y+1	; 0x01
    13fc:	28 2f       	mov	r18, r24
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	02 2e       	mov	r0, r18
    1406:	02 c0       	rjmp	.+4      	; 0x140c <MDIO_voidsetPinDirection+0x1be>
    1408:	88 0f       	add	r24, r24
    140a:	99 1f       	adc	r25, r25
    140c:	0a 94       	dec	r0
    140e:	e2 f7       	brpl	.-8      	; 0x1408 <MDIO_voidsetPinDirection+0x1ba>
    1410:	84 2b       	or	r24, r20
    1412:	8c 93       	st	X, r24
    1414:	37 c0       	rjmp	.+110    	; 0x1484 <MDIO_voidsetPinDirection+0x236>
				//Report Error
				break;
			}
		break;
	case PORTD:
			switch(copy_enDirection)
    1416:	8c 81       	ldd	r24, Y+4	; 0x04
    1418:	28 2f       	mov	r18, r24
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	3e 83       	std	Y+6, r19	; 0x06
    141e:	2d 83       	std	Y+5, r18	; 0x05
    1420:	8d 81       	ldd	r24, Y+5	; 0x05
    1422:	9e 81       	ldd	r25, Y+6	; 0x06
    1424:	00 97       	sbiw	r24, 0x00	; 0
    1426:	31 f0       	breq	.+12     	; 0x1434 <MDIO_voidsetPinDirection+0x1e6>
    1428:	2d 81       	ldd	r18, Y+5	; 0x05
    142a:	3e 81       	ldd	r19, Y+6	; 0x06
    142c:	21 30       	cpi	r18, 0x01	; 1
    142e:	31 05       	cpc	r19, r1
    1430:	b1 f0       	breq	.+44     	; 0x145e <MDIO_voidsetPinDirection+0x210>
    1432:	28 c0       	rjmp	.+80     	; 0x1484 <MDIO_voidsetPinDirection+0x236>
			{
			case INPUT:
			CLR_BIT(DDRD_REG,Local_u8pin);
    1434:	a1 e3       	ldi	r26, 0x31	; 49
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	e1 e3       	ldi	r30, 0x31	; 49
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	48 2f       	mov	r20, r24
    1440:	89 81       	ldd	r24, Y+1	; 0x01
    1442:	28 2f       	mov	r18, r24
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	02 2e       	mov	r0, r18
    144c:	02 c0       	rjmp	.+4      	; 0x1452 <MDIO_voidsetPinDirection+0x204>
    144e:	88 0f       	add	r24, r24
    1450:	99 1f       	adc	r25, r25
    1452:	0a 94       	dec	r0
    1454:	e2 f7       	brpl	.-8      	; 0x144e <MDIO_voidsetPinDirection+0x200>
    1456:	80 95       	com	r24
    1458:	84 23       	and	r24, r20
    145a:	8c 93       	st	X, r24
    145c:	13 c0       	rjmp	.+38     	; 0x1484 <MDIO_voidsetPinDirection+0x236>
			break;
			case OUTPUT:
			SET_BIT(DDRD_REG,Local_u8pin);
    145e:	a1 e3       	ldi	r26, 0x31	; 49
    1460:	b0 e0       	ldi	r27, 0x00	; 0
    1462:	e1 e3       	ldi	r30, 0x31	; 49
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	80 81       	ld	r24, Z
    1468:	48 2f       	mov	r20, r24
    146a:	89 81       	ldd	r24, Y+1	; 0x01
    146c:	28 2f       	mov	r18, r24
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	02 2e       	mov	r0, r18
    1476:	02 c0       	rjmp	.+4      	; 0x147c <MDIO_voidsetPinDirection+0x22e>
    1478:	88 0f       	add	r24, r24
    147a:	99 1f       	adc	r25, r25
    147c:	0a 94       	dec	r0
    147e:	e2 f7       	brpl	.-8      	; 0x1478 <MDIO_voidsetPinDirection+0x22a>
    1480:	84 2b       	or	r24, r20
    1482:	8c 93       	st	X, r24
		break;
	default :
			//Report Error
		break;
	}
}
    1484:	2e 96       	adiw	r28, 0x0e	; 14
    1486:	0f b6       	in	r0, 0x3f	; 63
    1488:	f8 94       	cli
    148a:	de bf       	out	0x3e, r29	; 62
    148c:	0f be       	out	0x3f, r0	; 63
    148e:	cd bf       	out	0x3d, r28	; 61
    1490:	cf 91       	pop	r28
    1492:	df 91       	pop	r29
    1494:	08 95       	ret

00001496 <MDIO_voidsetPinValue>:
void MDIO_voidsetPinValue(Pin_t copy_enPin,Value_t copy_enValue)
{
    1496:	df 93       	push	r29
    1498:	cf 93       	push	r28
    149a:	cd b7       	in	r28, 0x3d	; 61
    149c:	de b7       	in	r29, 0x3e	; 62
    149e:	2e 97       	sbiw	r28, 0x0e	; 14
    14a0:	0f b6       	in	r0, 0x3f	; 63
    14a2:	f8 94       	cli
    14a4:	de bf       	out	0x3e, r29	; 62
    14a6:	0f be       	out	0x3f, r0	; 63
    14a8:	cd bf       	out	0x3d, r28	; 61
    14aa:	8b 83       	std	Y+3, r24	; 0x03
    14ac:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8port=copy_enPin/10;  // 1-4
    14ae:	8b 81       	ldd	r24, Y+3	; 0x03
    14b0:	9a e0       	ldi	r25, 0x0A	; 10
    14b2:	69 2f       	mov	r22, r25
    14b4:	0e 94 62 22 	call	0x44c4	; 0x44c4 <__udivmodqi4>
    14b8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8pin=copy_enPin%10;   //  0-7
    14ba:	8b 81       	ldd	r24, Y+3	; 0x03
    14bc:	9a e0       	ldi	r25, 0x0A	; 10
    14be:	69 2f       	mov	r22, r25
    14c0:	0e 94 62 22 	call	0x44c4	; 0x44c4 <__udivmodqi4>
    14c4:	89 2f       	mov	r24, r25
    14c6:	89 83       	std	Y+1, r24	; 0x01

	switch(Local_u8port)
    14c8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ca:	28 2f       	mov	r18, r24
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	3e 87       	std	Y+14, r19	; 0x0e
    14d0:	2d 87       	std	Y+13, r18	; 0x0d
    14d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    14d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    14d6:	82 30       	cpi	r24, 0x02	; 2
    14d8:	91 05       	cpc	r25, r1
    14da:	09 f4       	brne	.+2      	; 0x14de <MDIO_voidsetPinValue+0x48>
    14dc:	50 c0       	rjmp	.+160    	; 0x157e <MDIO_voidsetPinValue+0xe8>
    14de:	2d 85       	ldd	r18, Y+13	; 0x0d
    14e0:	3e 85       	ldd	r19, Y+14	; 0x0e
    14e2:	23 30       	cpi	r18, 0x03	; 3
    14e4:	31 05       	cpc	r19, r1
    14e6:	34 f4       	brge	.+12     	; 0x14f4 <MDIO_voidsetPinValue+0x5e>
    14e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    14ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    14ec:	81 30       	cpi	r24, 0x01	; 1
    14ee:	91 05       	cpc	r25, r1
    14f0:	71 f0       	breq	.+28     	; 0x150e <MDIO_voidsetPinValue+0x78>
    14f2:	ec c0       	rjmp	.+472    	; 0x16cc <MDIO_voidsetPinValue+0x236>
    14f4:	2d 85       	ldd	r18, Y+13	; 0x0d
    14f6:	3e 85       	ldd	r19, Y+14	; 0x0e
    14f8:	23 30       	cpi	r18, 0x03	; 3
    14fa:	31 05       	cpc	r19, r1
    14fc:	09 f4       	brne	.+2      	; 0x1500 <MDIO_voidsetPinValue+0x6a>
    14fe:	77 c0       	rjmp	.+238    	; 0x15ee <MDIO_voidsetPinValue+0x158>
    1500:	8d 85       	ldd	r24, Y+13	; 0x0d
    1502:	9e 85       	ldd	r25, Y+14	; 0x0e
    1504:	84 30       	cpi	r24, 0x04	; 4
    1506:	91 05       	cpc	r25, r1
    1508:	09 f4       	brne	.+2      	; 0x150c <MDIO_voidsetPinValue+0x76>
    150a:	a9 c0       	rjmp	.+338    	; 0x165e <MDIO_voidsetPinValue+0x1c8>
    150c:	df c0       	rjmp	.+446    	; 0x16cc <MDIO_voidsetPinValue+0x236>
		{
		case PORTA:
			switch(copy_enValue)
    150e:	8c 81       	ldd	r24, Y+4	; 0x04
    1510:	28 2f       	mov	r18, r24
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	3c 87       	std	Y+12, r19	; 0x0c
    1516:	2b 87       	std	Y+11, r18	; 0x0b
    1518:	8b 85       	ldd	r24, Y+11	; 0x0b
    151a:	9c 85       	ldd	r25, Y+12	; 0x0c
    151c:	00 97       	sbiw	r24, 0x00	; 0
    151e:	31 f0       	breq	.+12     	; 0x152c <MDIO_voidsetPinValue+0x96>
    1520:	2b 85       	ldd	r18, Y+11	; 0x0b
    1522:	3c 85       	ldd	r19, Y+12	; 0x0c
    1524:	21 30       	cpi	r18, 0x01	; 1
    1526:	31 05       	cpc	r19, r1
    1528:	b1 f0       	breq	.+44     	; 0x1556 <MDIO_voidsetPinValue+0xc0>
    152a:	d0 c0       	rjmp	.+416    	; 0x16cc <MDIO_voidsetPinValue+0x236>
			{
			case LOW :
			CLR_BIT(PORTA_REG,Local_u8pin);
    152c:	ab e3       	ldi	r26, 0x3B	; 59
    152e:	b0 e0       	ldi	r27, 0x00	; 0
    1530:	eb e3       	ldi	r30, 0x3B	; 59
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	48 2f       	mov	r20, r24
    1538:	89 81       	ldd	r24, Y+1	; 0x01
    153a:	28 2f       	mov	r18, r24
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	02 2e       	mov	r0, r18
    1544:	02 c0       	rjmp	.+4      	; 0x154a <MDIO_voidsetPinValue+0xb4>
    1546:	88 0f       	add	r24, r24
    1548:	99 1f       	adc	r25, r25
    154a:	0a 94       	dec	r0
    154c:	e2 f7       	brpl	.-8      	; 0x1546 <MDIO_voidsetPinValue+0xb0>
    154e:	80 95       	com	r24
    1550:	84 23       	and	r24, r20
    1552:	8c 93       	st	X, r24
    1554:	bb c0       	rjmp	.+374    	; 0x16cc <MDIO_voidsetPinValue+0x236>
			break;
			case HIGH :
			SET_BIT(PORTA_REG,Local_u8pin);
    1556:	ab e3       	ldi	r26, 0x3B	; 59
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	eb e3       	ldi	r30, 0x3B	; 59
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	48 2f       	mov	r20, r24
    1562:	89 81       	ldd	r24, Y+1	; 0x01
    1564:	28 2f       	mov	r18, r24
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	02 2e       	mov	r0, r18
    156e:	02 c0       	rjmp	.+4      	; 0x1574 <MDIO_voidsetPinValue+0xde>
    1570:	88 0f       	add	r24, r24
    1572:	99 1f       	adc	r25, r25
    1574:	0a 94       	dec	r0
    1576:	e2 f7       	brpl	.-8      	; 0x1570 <MDIO_voidsetPinValue+0xda>
    1578:	84 2b       	or	r24, r20
    157a:	8c 93       	st	X, r24
    157c:	a7 c0       	rjmp	.+334    	; 0x16cc <MDIO_voidsetPinValue+0x236>
				//Report Error
				break;
			}
			break;
		case PORTB:
				switch(copy_enValue)
    157e:	8c 81       	ldd	r24, Y+4	; 0x04
    1580:	28 2f       	mov	r18, r24
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	3a 87       	std	Y+10, r19	; 0x0a
    1586:	29 87       	std	Y+9, r18	; 0x09
    1588:	89 85       	ldd	r24, Y+9	; 0x09
    158a:	9a 85       	ldd	r25, Y+10	; 0x0a
    158c:	00 97       	sbiw	r24, 0x00	; 0
    158e:	31 f0       	breq	.+12     	; 0x159c <MDIO_voidsetPinValue+0x106>
    1590:	29 85       	ldd	r18, Y+9	; 0x09
    1592:	3a 85       	ldd	r19, Y+10	; 0x0a
    1594:	21 30       	cpi	r18, 0x01	; 1
    1596:	31 05       	cpc	r19, r1
    1598:	b1 f0       	breq	.+44     	; 0x15c6 <MDIO_voidsetPinValue+0x130>
    159a:	98 c0       	rjmp	.+304    	; 0x16cc <MDIO_voidsetPinValue+0x236>
				{
				case LOW:
				CLR_BIT(PORTB_REG,Local_u8pin);
    159c:	a8 e3       	ldi	r26, 0x38	; 56
    159e:	b0 e0       	ldi	r27, 0x00	; 0
    15a0:	e8 e3       	ldi	r30, 0x38	; 56
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	80 81       	ld	r24, Z
    15a6:	48 2f       	mov	r20, r24
    15a8:	89 81       	ldd	r24, Y+1	; 0x01
    15aa:	28 2f       	mov	r18, r24
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	02 2e       	mov	r0, r18
    15b4:	02 c0       	rjmp	.+4      	; 0x15ba <MDIO_voidsetPinValue+0x124>
    15b6:	88 0f       	add	r24, r24
    15b8:	99 1f       	adc	r25, r25
    15ba:	0a 94       	dec	r0
    15bc:	e2 f7       	brpl	.-8      	; 0x15b6 <MDIO_voidsetPinValue+0x120>
    15be:	80 95       	com	r24
    15c0:	84 23       	and	r24, r20
    15c2:	8c 93       	st	X, r24
    15c4:	83 c0       	rjmp	.+262    	; 0x16cc <MDIO_voidsetPinValue+0x236>
				break;
				case HIGH:
				SET_BIT(PORTB_REG,Local_u8pin);
    15c6:	a8 e3       	ldi	r26, 0x38	; 56
    15c8:	b0 e0       	ldi	r27, 0x00	; 0
    15ca:	e8 e3       	ldi	r30, 0x38	; 56
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	80 81       	ld	r24, Z
    15d0:	48 2f       	mov	r20, r24
    15d2:	89 81       	ldd	r24, Y+1	; 0x01
    15d4:	28 2f       	mov	r18, r24
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	02 2e       	mov	r0, r18
    15de:	02 c0       	rjmp	.+4      	; 0x15e4 <MDIO_voidsetPinValue+0x14e>
    15e0:	88 0f       	add	r24, r24
    15e2:	99 1f       	adc	r25, r25
    15e4:	0a 94       	dec	r0
    15e6:	e2 f7       	brpl	.-8      	; 0x15e0 <MDIO_voidsetPinValue+0x14a>
    15e8:	84 2b       	or	r24, r20
    15ea:	8c 93       	st	X, r24
    15ec:	6f c0       	rjmp	.+222    	; 0x16cc <MDIO_voidsetPinValue+0x236>
					//Report Error
					break;
				}
			break;
		case PORTC:
				switch(copy_enValue)
    15ee:	8c 81       	ldd	r24, Y+4	; 0x04
    15f0:	28 2f       	mov	r18, r24
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	38 87       	std	Y+8, r19	; 0x08
    15f6:	2f 83       	std	Y+7, r18	; 0x07
    15f8:	8f 81       	ldd	r24, Y+7	; 0x07
    15fa:	98 85       	ldd	r25, Y+8	; 0x08
    15fc:	00 97       	sbiw	r24, 0x00	; 0
    15fe:	31 f0       	breq	.+12     	; 0x160c <MDIO_voidsetPinValue+0x176>
    1600:	2f 81       	ldd	r18, Y+7	; 0x07
    1602:	38 85       	ldd	r19, Y+8	; 0x08
    1604:	21 30       	cpi	r18, 0x01	; 1
    1606:	31 05       	cpc	r19, r1
    1608:	b1 f0       	breq	.+44     	; 0x1636 <MDIO_voidsetPinValue+0x1a0>
    160a:	60 c0       	rjmp	.+192    	; 0x16cc <MDIO_voidsetPinValue+0x236>
				{
				case LOW:
				CLR_BIT(PORTC_REG,Local_u8pin);
    160c:	a5 e3       	ldi	r26, 0x35	; 53
    160e:	b0 e0       	ldi	r27, 0x00	; 0
    1610:	e5 e3       	ldi	r30, 0x35	; 53
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	80 81       	ld	r24, Z
    1616:	48 2f       	mov	r20, r24
    1618:	89 81       	ldd	r24, Y+1	; 0x01
    161a:	28 2f       	mov	r18, r24
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	02 2e       	mov	r0, r18
    1624:	02 c0       	rjmp	.+4      	; 0x162a <MDIO_voidsetPinValue+0x194>
    1626:	88 0f       	add	r24, r24
    1628:	99 1f       	adc	r25, r25
    162a:	0a 94       	dec	r0
    162c:	e2 f7       	brpl	.-8      	; 0x1626 <MDIO_voidsetPinValue+0x190>
    162e:	80 95       	com	r24
    1630:	84 23       	and	r24, r20
    1632:	8c 93       	st	X, r24
    1634:	4b c0       	rjmp	.+150    	; 0x16cc <MDIO_voidsetPinValue+0x236>
				break;
				case HIGH:
				SET_BIT(PORTC_REG,Local_u8pin);
    1636:	a5 e3       	ldi	r26, 0x35	; 53
    1638:	b0 e0       	ldi	r27, 0x00	; 0
    163a:	e5 e3       	ldi	r30, 0x35	; 53
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	80 81       	ld	r24, Z
    1640:	48 2f       	mov	r20, r24
    1642:	89 81       	ldd	r24, Y+1	; 0x01
    1644:	28 2f       	mov	r18, r24
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	02 2e       	mov	r0, r18
    164e:	02 c0       	rjmp	.+4      	; 0x1654 <MDIO_voidsetPinValue+0x1be>
    1650:	88 0f       	add	r24, r24
    1652:	99 1f       	adc	r25, r25
    1654:	0a 94       	dec	r0
    1656:	e2 f7       	brpl	.-8      	; 0x1650 <MDIO_voidsetPinValue+0x1ba>
    1658:	84 2b       	or	r24, r20
    165a:	8c 93       	st	X, r24
    165c:	37 c0       	rjmp	.+110    	; 0x16cc <MDIO_voidsetPinValue+0x236>
					//Report Error
					break;
				}
			break;
		case PORTD:
				switch(copy_enValue)
    165e:	8c 81       	ldd	r24, Y+4	; 0x04
    1660:	28 2f       	mov	r18, r24
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	3e 83       	std	Y+6, r19	; 0x06
    1666:	2d 83       	std	Y+5, r18	; 0x05
    1668:	8d 81       	ldd	r24, Y+5	; 0x05
    166a:	9e 81       	ldd	r25, Y+6	; 0x06
    166c:	00 97       	sbiw	r24, 0x00	; 0
    166e:	31 f0       	breq	.+12     	; 0x167c <MDIO_voidsetPinValue+0x1e6>
    1670:	2d 81       	ldd	r18, Y+5	; 0x05
    1672:	3e 81       	ldd	r19, Y+6	; 0x06
    1674:	21 30       	cpi	r18, 0x01	; 1
    1676:	31 05       	cpc	r19, r1
    1678:	b1 f0       	breq	.+44     	; 0x16a6 <MDIO_voidsetPinValue+0x210>
    167a:	28 c0       	rjmp	.+80     	; 0x16cc <MDIO_voidsetPinValue+0x236>
				{
				case LOW:
				CLR_BIT(PORTD_REG,Local_u8pin);
    167c:	a2 e3       	ldi	r26, 0x32	; 50
    167e:	b0 e0       	ldi	r27, 0x00	; 0
    1680:	e2 e3       	ldi	r30, 0x32	; 50
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	48 2f       	mov	r20, r24
    1688:	89 81       	ldd	r24, Y+1	; 0x01
    168a:	28 2f       	mov	r18, r24
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	02 2e       	mov	r0, r18
    1694:	02 c0       	rjmp	.+4      	; 0x169a <MDIO_voidsetPinValue+0x204>
    1696:	88 0f       	add	r24, r24
    1698:	99 1f       	adc	r25, r25
    169a:	0a 94       	dec	r0
    169c:	e2 f7       	brpl	.-8      	; 0x1696 <MDIO_voidsetPinValue+0x200>
    169e:	80 95       	com	r24
    16a0:	84 23       	and	r24, r20
    16a2:	8c 93       	st	X, r24
    16a4:	13 c0       	rjmp	.+38     	; 0x16cc <MDIO_voidsetPinValue+0x236>
				break;
				case HIGH:
				SET_BIT(PORTD_REG,Local_u8pin);
    16a6:	a2 e3       	ldi	r26, 0x32	; 50
    16a8:	b0 e0       	ldi	r27, 0x00	; 0
    16aa:	e2 e3       	ldi	r30, 0x32	; 50
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	80 81       	ld	r24, Z
    16b0:	48 2f       	mov	r20, r24
    16b2:	89 81       	ldd	r24, Y+1	; 0x01
    16b4:	28 2f       	mov	r18, r24
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	81 e0       	ldi	r24, 0x01	; 1
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	02 2e       	mov	r0, r18
    16be:	02 c0       	rjmp	.+4      	; 0x16c4 <MDIO_voidsetPinValue+0x22e>
    16c0:	88 0f       	add	r24, r24
    16c2:	99 1f       	adc	r25, r25
    16c4:	0a 94       	dec	r0
    16c6:	e2 f7       	brpl	.-8      	; 0x16c0 <MDIO_voidsetPinValue+0x22a>
    16c8:	84 2b       	or	r24, r20
    16ca:	8c 93       	st	X, r24
			break;
		default :
				//Report Error
			break;
		}
}
    16cc:	2e 96       	adiw	r28, 0x0e	; 14
    16ce:	0f b6       	in	r0, 0x3f	; 63
    16d0:	f8 94       	cli
    16d2:	de bf       	out	0x3e, r29	; 62
    16d4:	0f be       	out	0x3f, r0	; 63
    16d6:	cd bf       	out	0x3d, r28	; 61
    16d8:	cf 91       	pop	r28
    16da:	df 91       	pop	r29
    16dc:	08 95       	ret

000016de <MDIO_voidsetPortValue>:
void MDIO_voidsetPortValue(Port_t copy_enPort, u8 copy_u8Value)
{
    16de:	df 93       	push	r29
    16e0:	cf 93       	push	r28
    16e2:	00 d0       	rcall	.+0      	; 0x16e4 <MDIO_voidsetPortValue+0x6>
    16e4:	00 d0       	rcall	.+0      	; 0x16e6 <MDIO_voidsetPortValue+0x8>
    16e6:	cd b7       	in	r28, 0x3d	; 61
    16e8:	de b7       	in	r29, 0x3e	; 62
    16ea:	89 83       	std	Y+1, r24	; 0x01
    16ec:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_enPort)
    16ee:	89 81       	ldd	r24, Y+1	; 0x01
    16f0:	28 2f       	mov	r18, r24
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	3c 83       	std	Y+4, r19	; 0x04
    16f6:	2b 83       	std	Y+3, r18	; 0x03
    16f8:	8b 81       	ldd	r24, Y+3	; 0x03
    16fa:	9c 81       	ldd	r25, Y+4	; 0x04
    16fc:	82 30       	cpi	r24, 0x02	; 2
    16fe:	91 05       	cpc	r25, r1
    1700:	d9 f0       	breq	.+54     	; 0x1738 <MDIO_voidsetPortValue+0x5a>
    1702:	2b 81       	ldd	r18, Y+3	; 0x03
    1704:	3c 81       	ldd	r19, Y+4	; 0x04
    1706:	23 30       	cpi	r18, 0x03	; 3
    1708:	31 05       	cpc	r19, r1
    170a:	34 f4       	brge	.+12     	; 0x1718 <MDIO_voidsetPortValue+0x3a>
    170c:	8b 81       	ldd	r24, Y+3	; 0x03
    170e:	9c 81       	ldd	r25, Y+4	; 0x04
    1710:	81 30       	cpi	r24, 0x01	; 1
    1712:	91 05       	cpc	r25, r1
    1714:	61 f0       	breq	.+24     	; 0x172e <MDIO_voidsetPortValue+0x50>
    1716:	1e c0       	rjmp	.+60     	; 0x1754 <MDIO_voidsetPortValue+0x76>
    1718:	2b 81       	ldd	r18, Y+3	; 0x03
    171a:	3c 81       	ldd	r19, Y+4	; 0x04
    171c:	23 30       	cpi	r18, 0x03	; 3
    171e:	31 05       	cpc	r19, r1
    1720:	81 f0       	breq	.+32     	; 0x1742 <MDIO_voidsetPortValue+0x64>
    1722:	8b 81       	ldd	r24, Y+3	; 0x03
    1724:	9c 81       	ldd	r25, Y+4	; 0x04
    1726:	84 30       	cpi	r24, 0x04	; 4
    1728:	91 05       	cpc	r25, r1
    172a:	81 f0       	breq	.+32     	; 0x174c <MDIO_voidsetPortValue+0x6e>
    172c:	13 c0       	rjmp	.+38     	; 0x1754 <MDIO_voidsetPortValue+0x76>
			{
			case PORTA:
				PORTA_REG=copy_u8Value;
    172e:	eb e3       	ldi	r30, 0x3B	; 59
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	8a 81       	ldd	r24, Y+2	; 0x02
    1734:	80 83       	st	Z, r24
    1736:	0e c0       	rjmp	.+28     	; 0x1754 <MDIO_voidsetPortValue+0x76>
			break;


			case PORTB:
				PORTB_REG=copy_u8Value;
    1738:	e8 e3       	ldi	r30, 0x38	; 56
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	8a 81       	ldd	r24, Y+2	; 0x02
    173e:	80 83       	st	Z, r24
    1740:	09 c0       	rjmp	.+18     	; 0x1754 <MDIO_voidsetPortValue+0x76>
			break;


			case PORTC:
				PORTC_REG=copy_u8Value;
    1742:	e5 e3       	ldi	r30, 0x35	; 53
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	8a 81       	ldd	r24, Y+2	; 0x02
    1748:	80 83       	st	Z, r24
    174a:	04 c0       	rjmp	.+8      	; 0x1754 <MDIO_voidsetPortValue+0x76>
			break;


			case PORTD:
				PORTD_REG=copy_u8Value;
    174c:	e2 e3       	ldi	r30, 0x32	; 50
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	8a 81       	ldd	r24, Y+2	; 0x02
    1752:	80 83       	st	Z, r24
			default :
					//Report Error
			break;
			}

}
    1754:	0f 90       	pop	r0
    1756:	0f 90       	pop	r0
    1758:	0f 90       	pop	r0
    175a:	0f 90       	pop	r0
    175c:	cf 91       	pop	r28
    175e:	df 91       	pop	r29
    1760:	08 95       	ret

00001762 <MDIO_voidsetPortDirection>:

void MDIO_voidsetPortDirection(Port_t copy_enPort, u8 copy_u8Direction)
{
    1762:	df 93       	push	r29
    1764:	cf 93       	push	r28
    1766:	00 d0       	rcall	.+0      	; 0x1768 <MDIO_voidsetPortDirection+0x6>
    1768:	00 d0       	rcall	.+0      	; 0x176a <MDIO_voidsetPortDirection+0x8>
    176a:	cd b7       	in	r28, 0x3d	; 61
    176c:	de b7       	in	r29, 0x3e	; 62
    176e:	89 83       	std	Y+1, r24	; 0x01
    1770:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_enPort)
    1772:	89 81       	ldd	r24, Y+1	; 0x01
    1774:	28 2f       	mov	r18, r24
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	3c 83       	std	Y+4, r19	; 0x04
    177a:	2b 83       	std	Y+3, r18	; 0x03
    177c:	8b 81       	ldd	r24, Y+3	; 0x03
    177e:	9c 81       	ldd	r25, Y+4	; 0x04
    1780:	82 30       	cpi	r24, 0x02	; 2
    1782:	91 05       	cpc	r25, r1
    1784:	d9 f0       	breq	.+54     	; 0x17bc <MDIO_voidsetPortDirection+0x5a>
    1786:	2b 81       	ldd	r18, Y+3	; 0x03
    1788:	3c 81       	ldd	r19, Y+4	; 0x04
    178a:	23 30       	cpi	r18, 0x03	; 3
    178c:	31 05       	cpc	r19, r1
    178e:	34 f4       	brge	.+12     	; 0x179c <MDIO_voidsetPortDirection+0x3a>
    1790:	8b 81       	ldd	r24, Y+3	; 0x03
    1792:	9c 81       	ldd	r25, Y+4	; 0x04
    1794:	81 30       	cpi	r24, 0x01	; 1
    1796:	91 05       	cpc	r25, r1
    1798:	61 f0       	breq	.+24     	; 0x17b2 <MDIO_voidsetPortDirection+0x50>
    179a:	1e c0       	rjmp	.+60     	; 0x17d8 <MDIO_voidsetPortDirection+0x76>
    179c:	2b 81       	ldd	r18, Y+3	; 0x03
    179e:	3c 81       	ldd	r19, Y+4	; 0x04
    17a0:	23 30       	cpi	r18, 0x03	; 3
    17a2:	31 05       	cpc	r19, r1
    17a4:	81 f0       	breq	.+32     	; 0x17c6 <MDIO_voidsetPortDirection+0x64>
    17a6:	8b 81       	ldd	r24, Y+3	; 0x03
    17a8:	9c 81       	ldd	r25, Y+4	; 0x04
    17aa:	84 30       	cpi	r24, 0x04	; 4
    17ac:	91 05       	cpc	r25, r1
    17ae:	81 f0       	breq	.+32     	; 0x17d0 <MDIO_voidsetPortDirection+0x6e>
    17b0:	13 c0       	rjmp	.+38     	; 0x17d8 <MDIO_voidsetPortDirection+0x76>
			{
			case PORTA:
				DDRA_REG=copy_u8Direction;
    17b2:	ea e3       	ldi	r30, 0x3A	; 58
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	8a 81       	ldd	r24, Y+2	; 0x02
    17b8:	80 83       	st	Z, r24
    17ba:	0e c0       	rjmp	.+28     	; 0x17d8 <MDIO_voidsetPortDirection+0x76>
			break;


			case PORTB:
				DDRB_REG=copy_u8Direction;
    17bc:	e7 e3       	ldi	r30, 0x37	; 55
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	8a 81       	ldd	r24, Y+2	; 0x02
    17c2:	80 83       	st	Z, r24
    17c4:	09 c0       	rjmp	.+18     	; 0x17d8 <MDIO_voidsetPortDirection+0x76>
			break;


			case PORTC:
				DDRC_REG=copy_u8Direction;
    17c6:	e4 e3       	ldi	r30, 0x34	; 52
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	8a 81       	ldd	r24, Y+2	; 0x02
    17cc:	80 83       	st	Z, r24
    17ce:	04 c0       	rjmp	.+8      	; 0x17d8 <MDIO_voidsetPortDirection+0x76>
			break;


			case PORTD:
				DDRD_REG=copy_u8Direction;
    17d0:	e1 e3       	ldi	r30, 0x31	; 49
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	8a 81       	ldd	r24, Y+2	; 0x02
    17d6:	80 83       	st	Z, r24
			default :
					//Report Error
			break;
			}

}
    17d8:	0f 90       	pop	r0
    17da:	0f 90       	pop	r0
    17dc:	0f 90       	pop	r0
    17de:	0f 90       	pop	r0
    17e0:	cf 91       	pop	r28
    17e2:	df 91       	pop	r29
    17e4:	08 95       	ret

000017e6 <MDIO_voidgetPinValue>:

void MDIO_voidgetPinValue(Pin_t copy_enPin,Value_t * ptrValue)
{
    17e6:	df 93       	push	r29
    17e8:	cf 93       	push	r28
    17ea:	cd b7       	in	r28, 0x3d	; 61
    17ec:	de b7       	in	r29, 0x3e	; 62
    17ee:	27 97       	sbiw	r28, 0x07	; 7
    17f0:	0f b6       	in	r0, 0x3f	; 63
    17f2:	f8 94       	cli
    17f4:	de bf       	out	0x3e, r29	; 62
    17f6:	0f be       	out	0x3f, r0	; 63
    17f8:	cd bf       	out	0x3d, r28	; 61
    17fa:	8b 83       	std	Y+3, r24	; 0x03
    17fc:	7d 83       	std	Y+5, r23	; 0x05
    17fe:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8port=copy_enPin/10;  // 1-4
    1800:	8b 81       	ldd	r24, Y+3	; 0x03
    1802:	9a e0       	ldi	r25, 0x0A	; 10
    1804:	69 2f       	mov	r22, r25
    1806:	0e 94 62 22 	call	0x44c4	; 0x44c4 <__udivmodqi4>
    180a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8pin=copy_enPin%10;   //  0-7
    180c:	8b 81       	ldd	r24, Y+3	; 0x03
    180e:	9a e0       	ldi	r25, 0x0A	; 10
    1810:	69 2f       	mov	r22, r25
    1812:	0e 94 62 22 	call	0x44c4	; 0x44c4 <__udivmodqi4>
    1816:	89 2f       	mov	r24, r25
    1818:	89 83       	std	Y+1, r24	; 0x01

		switch(Local_u8port)
    181a:	8a 81       	ldd	r24, Y+2	; 0x02
    181c:	28 2f       	mov	r18, r24
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	3f 83       	std	Y+7, r19	; 0x07
    1822:	2e 83       	std	Y+6, r18	; 0x06
    1824:	4e 81       	ldd	r20, Y+6	; 0x06
    1826:	5f 81       	ldd	r21, Y+7	; 0x07
    1828:	42 30       	cpi	r20, 0x02	; 2
    182a:	51 05       	cpc	r21, r1
    182c:	59 f1       	breq	.+86     	; 0x1884 <MDIO_voidgetPinValue+0x9e>
    182e:	8e 81       	ldd	r24, Y+6	; 0x06
    1830:	9f 81       	ldd	r25, Y+7	; 0x07
    1832:	83 30       	cpi	r24, 0x03	; 3
    1834:	91 05       	cpc	r25, r1
    1836:	34 f4       	brge	.+12     	; 0x1844 <MDIO_voidgetPinValue+0x5e>
    1838:	2e 81       	ldd	r18, Y+6	; 0x06
    183a:	3f 81       	ldd	r19, Y+7	; 0x07
    183c:	21 30       	cpi	r18, 0x01	; 1
    183e:	31 05       	cpc	r19, r1
    1840:	69 f0       	breq	.+26     	; 0x185c <MDIO_voidgetPinValue+0x76>
    1842:	5b c0       	rjmp	.+182    	; 0x18fa <MDIO_voidgetPinValue+0x114>
    1844:	4e 81       	ldd	r20, Y+6	; 0x06
    1846:	5f 81       	ldd	r21, Y+7	; 0x07
    1848:	43 30       	cpi	r20, 0x03	; 3
    184a:	51 05       	cpc	r21, r1
    184c:	79 f1       	breq	.+94     	; 0x18ac <MDIO_voidgetPinValue+0xc6>
    184e:	8e 81       	ldd	r24, Y+6	; 0x06
    1850:	9f 81       	ldd	r25, Y+7	; 0x07
    1852:	84 30       	cpi	r24, 0x04	; 4
    1854:	91 05       	cpc	r25, r1
    1856:	09 f4       	brne	.+2      	; 0x185a <MDIO_voidgetPinValue+0x74>
    1858:	3d c0       	rjmp	.+122    	; 0x18d4 <MDIO_voidgetPinValue+0xee>
    185a:	4f c0       	rjmp	.+158    	; 0x18fa <MDIO_voidgetPinValue+0x114>
			{
			case PORTA:
				*ptrValue = GET_BIT(PINA_REG,Local_u8pin);
    185c:	e9 e3       	ldi	r30, 0x39	; 57
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	80 81       	ld	r24, Z
    1862:	28 2f       	mov	r18, r24
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	89 81       	ldd	r24, Y+1	; 0x01
    1868:	88 2f       	mov	r24, r24
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	a9 01       	movw	r20, r18
    186e:	02 c0       	rjmp	.+4      	; 0x1874 <MDIO_voidgetPinValue+0x8e>
    1870:	55 95       	asr	r21
    1872:	47 95       	ror	r20
    1874:	8a 95       	dec	r24
    1876:	e2 f7       	brpl	.-8      	; 0x1870 <MDIO_voidgetPinValue+0x8a>
    1878:	ca 01       	movw	r24, r20
    187a:	81 70       	andi	r24, 0x01	; 1
    187c:	ec 81       	ldd	r30, Y+4	; 0x04
    187e:	fd 81       	ldd	r31, Y+5	; 0x05
    1880:	80 83       	st	Z, r24
    1882:	3b c0       	rjmp	.+118    	; 0x18fa <MDIO_voidgetPinValue+0x114>
				break;
			case PORTB:
				*ptrValue = GET_BIT(PINB_REG,Local_u8pin);
    1884:	e6 e3       	ldi	r30, 0x36	; 54
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	80 81       	ld	r24, Z
    188a:	28 2f       	mov	r18, r24
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	89 81       	ldd	r24, Y+1	; 0x01
    1890:	88 2f       	mov	r24, r24
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	a9 01       	movw	r20, r18
    1896:	02 c0       	rjmp	.+4      	; 0x189c <MDIO_voidgetPinValue+0xb6>
    1898:	55 95       	asr	r21
    189a:	47 95       	ror	r20
    189c:	8a 95       	dec	r24
    189e:	e2 f7       	brpl	.-8      	; 0x1898 <MDIO_voidgetPinValue+0xb2>
    18a0:	ca 01       	movw	r24, r20
    18a2:	81 70       	andi	r24, 0x01	; 1
    18a4:	ec 81       	ldd	r30, Y+4	; 0x04
    18a6:	fd 81       	ldd	r31, Y+5	; 0x05
    18a8:	80 83       	st	Z, r24
    18aa:	27 c0       	rjmp	.+78     	; 0x18fa <MDIO_voidgetPinValue+0x114>
				break;
			case PORTC:
				*ptrValue = GET_BIT(PINC_REG,Local_u8pin);
    18ac:	e3 e3       	ldi	r30, 0x33	; 51
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	80 81       	ld	r24, Z
    18b2:	28 2f       	mov	r18, r24
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	89 81       	ldd	r24, Y+1	; 0x01
    18b8:	88 2f       	mov	r24, r24
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	a9 01       	movw	r20, r18
    18be:	02 c0       	rjmp	.+4      	; 0x18c4 <MDIO_voidgetPinValue+0xde>
    18c0:	55 95       	asr	r21
    18c2:	47 95       	ror	r20
    18c4:	8a 95       	dec	r24
    18c6:	e2 f7       	brpl	.-8      	; 0x18c0 <MDIO_voidgetPinValue+0xda>
    18c8:	ca 01       	movw	r24, r20
    18ca:	81 70       	andi	r24, 0x01	; 1
    18cc:	ec 81       	ldd	r30, Y+4	; 0x04
    18ce:	fd 81       	ldd	r31, Y+5	; 0x05
    18d0:	80 83       	st	Z, r24
    18d2:	13 c0       	rjmp	.+38     	; 0x18fa <MDIO_voidgetPinValue+0x114>
				break;
			case PORTD:
				*ptrValue = GET_BIT(PIND_REG,Local_u8pin);
    18d4:	e0 e3       	ldi	r30, 0x30	; 48
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	80 81       	ld	r24, Z
    18da:	28 2f       	mov	r18, r24
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	89 81       	ldd	r24, Y+1	; 0x01
    18e0:	88 2f       	mov	r24, r24
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	a9 01       	movw	r20, r18
    18e6:	02 c0       	rjmp	.+4      	; 0x18ec <MDIO_voidgetPinValue+0x106>
    18e8:	55 95       	asr	r21
    18ea:	47 95       	ror	r20
    18ec:	8a 95       	dec	r24
    18ee:	e2 f7       	brpl	.-8      	; 0x18e8 <MDIO_voidgetPinValue+0x102>
    18f0:	ca 01       	movw	r24, r20
    18f2:	81 70       	andi	r24, 0x01	; 1
    18f4:	ec 81       	ldd	r30, Y+4	; 0x04
    18f6:	fd 81       	ldd	r31, Y+5	; 0x05
    18f8:	80 83       	st	Z, r24
				break;
			default :
					//Report Error
				break;
			}
}
    18fa:	27 96       	adiw	r28, 0x07	; 7
    18fc:	0f b6       	in	r0, 0x3f	; 63
    18fe:	f8 94       	cli
    1900:	de bf       	out	0x3e, r29	; 62
    1902:	0f be       	out	0x3f, r0	; 63
    1904:	cd bf       	out	0x3d, r28	; 61
    1906:	cf 91       	pop	r28
    1908:	df 91       	pop	r29
    190a:	08 95       	ret

0000190c <MDIO_voidTogglePinValue>:

void MDIO_voidTogglePinValue(Pin_t copy_enPin)
{
    190c:	df 93       	push	r29
    190e:	cf 93       	push	r28
    1910:	00 d0       	rcall	.+0      	; 0x1912 <MDIO_voidTogglePinValue+0x6>
    1912:	00 d0       	rcall	.+0      	; 0x1914 <MDIO_voidTogglePinValue+0x8>
    1914:	0f 92       	push	r0
    1916:	cd b7       	in	r28, 0x3d	; 61
    1918:	de b7       	in	r29, 0x3e	; 62
    191a:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8port=copy_enPin/10;  // 1-4
    191c:	8b 81       	ldd	r24, Y+3	; 0x03
    191e:	9a e0       	ldi	r25, 0x0A	; 10
    1920:	69 2f       	mov	r22, r25
    1922:	0e 94 62 22 	call	0x44c4	; 0x44c4 <__udivmodqi4>
    1926:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8pin=copy_enPin%10;   //  0-7
    1928:	8b 81       	ldd	r24, Y+3	; 0x03
    192a:	9a e0       	ldi	r25, 0x0A	; 10
    192c:	69 2f       	mov	r22, r25
    192e:	0e 94 62 22 	call	0x44c4	; 0x44c4 <__udivmodqi4>
    1932:	89 2f       	mov	r24, r25
    1934:	89 83       	std	Y+1, r24	; 0x01
	switch (Local_u8port)
    1936:	8a 81       	ldd	r24, Y+2	; 0x02
    1938:	28 2f       	mov	r18, r24
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	3d 83       	std	Y+5, r19	; 0x05
    193e:	2c 83       	std	Y+4, r18	; 0x04
    1940:	8c 81       	ldd	r24, Y+4	; 0x04
    1942:	9d 81       	ldd	r25, Y+5	; 0x05
    1944:	82 30       	cpi	r24, 0x02	; 2
    1946:	91 05       	cpc	r25, r1
    1948:	51 f1       	breq	.+84     	; 0x199e <MDIO_voidTogglePinValue+0x92>
    194a:	2c 81       	ldd	r18, Y+4	; 0x04
    194c:	3d 81       	ldd	r19, Y+5	; 0x05
    194e:	23 30       	cpi	r18, 0x03	; 3
    1950:	31 05       	cpc	r19, r1
    1952:	34 f4       	brge	.+12     	; 0x1960 <MDIO_voidTogglePinValue+0x54>
    1954:	8c 81       	ldd	r24, Y+4	; 0x04
    1956:	9d 81       	ldd	r25, Y+5	; 0x05
    1958:	81 30       	cpi	r24, 0x01	; 1
    195a:	91 05       	cpc	r25, r1
    195c:	61 f0       	breq	.+24     	; 0x1976 <MDIO_voidTogglePinValue+0x6a>
    195e:	5a c0       	rjmp	.+180    	; 0x1a14 <MDIO_voidTogglePinValue+0x108>
    1960:	2c 81       	ldd	r18, Y+4	; 0x04
    1962:	3d 81       	ldd	r19, Y+5	; 0x05
    1964:	23 30       	cpi	r18, 0x03	; 3
    1966:	31 05       	cpc	r19, r1
    1968:	71 f1       	breq	.+92     	; 0x19c6 <MDIO_voidTogglePinValue+0xba>
    196a:	8c 81       	ldd	r24, Y+4	; 0x04
    196c:	9d 81       	ldd	r25, Y+5	; 0x05
    196e:	84 30       	cpi	r24, 0x04	; 4
    1970:	91 05       	cpc	r25, r1
    1972:	e9 f1       	breq	.+122    	; 0x19ee <MDIO_voidTogglePinValue+0xe2>
    1974:	4f c0       	rjmp	.+158    	; 0x1a14 <MDIO_voidTogglePinValue+0x108>
	{
	case PORTA :
		TOG_BIT(PORTA_REG,Local_u8pin);
    1976:	ab e3       	ldi	r26, 0x3B	; 59
    1978:	b0 e0       	ldi	r27, 0x00	; 0
    197a:	eb e3       	ldi	r30, 0x3B	; 59
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	80 81       	ld	r24, Z
    1980:	48 2f       	mov	r20, r24
    1982:	89 81       	ldd	r24, Y+1	; 0x01
    1984:	28 2f       	mov	r18, r24
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	02 2e       	mov	r0, r18
    198e:	02 c0       	rjmp	.+4      	; 0x1994 <MDIO_voidTogglePinValue+0x88>
    1990:	88 0f       	add	r24, r24
    1992:	99 1f       	adc	r25, r25
    1994:	0a 94       	dec	r0
    1996:	e2 f7       	brpl	.-8      	; 0x1990 <MDIO_voidTogglePinValue+0x84>
    1998:	84 27       	eor	r24, r20
    199a:	8c 93       	st	X, r24
    199c:	3b c0       	rjmp	.+118    	; 0x1a14 <MDIO_voidTogglePinValue+0x108>
		break;
	case PORTB :
		TOG_BIT(PORTB_REG,Local_u8pin);
    199e:	a8 e3       	ldi	r26, 0x38	; 56
    19a0:	b0 e0       	ldi	r27, 0x00	; 0
    19a2:	e8 e3       	ldi	r30, 0x38	; 56
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	80 81       	ld	r24, Z
    19a8:	48 2f       	mov	r20, r24
    19aa:	89 81       	ldd	r24, Y+1	; 0x01
    19ac:	28 2f       	mov	r18, r24
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	81 e0       	ldi	r24, 0x01	; 1
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	02 2e       	mov	r0, r18
    19b6:	02 c0       	rjmp	.+4      	; 0x19bc <MDIO_voidTogglePinValue+0xb0>
    19b8:	88 0f       	add	r24, r24
    19ba:	99 1f       	adc	r25, r25
    19bc:	0a 94       	dec	r0
    19be:	e2 f7       	brpl	.-8      	; 0x19b8 <MDIO_voidTogglePinValue+0xac>
    19c0:	84 27       	eor	r24, r20
    19c2:	8c 93       	st	X, r24
    19c4:	27 c0       	rjmp	.+78     	; 0x1a14 <MDIO_voidTogglePinValue+0x108>
		break;
	case PORTC :
		TOG_BIT(PORTC_REG,Local_u8pin);
    19c6:	a5 e3       	ldi	r26, 0x35	; 53
    19c8:	b0 e0       	ldi	r27, 0x00	; 0
    19ca:	e5 e3       	ldi	r30, 0x35	; 53
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	80 81       	ld	r24, Z
    19d0:	48 2f       	mov	r20, r24
    19d2:	89 81       	ldd	r24, Y+1	; 0x01
    19d4:	28 2f       	mov	r18, r24
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	81 e0       	ldi	r24, 0x01	; 1
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	02 2e       	mov	r0, r18
    19de:	02 c0       	rjmp	.+4      	; 0x19e4 <MDIO_voidTogglePinValue+0xd8>
    19e0:	88 0f       	add	r24, r24
    19e2:	99 1f       	adc	r25, r25
    19e4:	0a 94       	dec	r0
    19e6:	e2 f7       	brpl	.-8      	; 0x19e0 <MDIO_voidTogglePinValue+0xd4>
    19e8:	84 27       	eor	r24, r20
    19ea:	8c 93       	st	X, r24
    19ec:	13 c0       	rjmp	.+38     	; 0x1a14 <MDIO_voidTogglePinValue+0x108>
		break;
	case PORTD :
		TOG_BIT(PORTD_REG,Local_u8pin);
    19ee:	a2 e3       	ldi	r26, 0x32	; 50
    19f0:	b0 e0       	ldi	r27, 0x00	; 0
    19f2:	e2 e3       	ldi	r30, 0x32	; 50
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	80 81       	ld	r24, Z
    19f8:	48 2f       	mov	r20, r24
    19fa:	89 81       	ldd	r24, Y+1	; 0x01
    19fc:	28 2f       	mov	r18, r24
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	81 e0       	ldi	r24, 0x01	; 1
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	02 2e       	mov	r0, r18
    1a06:	02 c0       	rjmp	.+4      	; 0x1a0c <MDIO_voidTogglePinValue+0x100>
    1a08:	88 0f       	add	r24, r24
    1a0a:	99 1f       	adc	r25, r25
    1a0c:	0a 94       	dec	r0
    1a0e:	e2 f7       	brpl	.-8      	; 0x1a08 <MDIO_voidTogglePinValue+0xfc>
    1a10:	84 27       	eor	r24, r20
    1a12:	8c 93       	st	X, r24
		break;
	}



}
    1a14:	0f 90       	pop	r0
    1a16:	0f 90       	pop	r0
    1a18:	0f 90       	pop	r0
    1a1a:	0f 90       	pop	r0
    1a1c:	0f 90       	pop	r0
    1a1e:	cf 91       	pop	r28
    1a20:	df 91       	pop	r29
    1a22:	08 95       	ret

00001a24 <MDIO_voidgetPortValue>:
void MDIO_voidgetPortValue(Port_t copy_enPort,u8 *ptrPortValue)
{
    1a24:	df 93       	push	r29
    1a26:	cf 93       	push	r28
    1a28:	00 d0       	rcall	.+0      	; 0x1a2a <MDIO_voidgetPortValue+0x6>
    1a2a:	00 d0       	rcall	.+0      	; 0x1a2c <MDIO_voidgetPortValue+0x8>
    1a2c:	0f 92       	push	r0
    1a2e:	cd b7       	in	r28, 0x3d	; 61
    1a30:	de b7       	in	r29, 0x3e	; 62
    1a32:	89 83       	std	Y+1, r24	; 0x01
    1a34:	7b 83       	std	Y+3, r23	; 0x03
    1a36:	6a 83       	std	Y+2, r22	; 0x02


			switch(copy_enPort)
    1a38:	89 81       	ldd	r24, Y+1	; 0x01
    1a3a:	28 2f       	mov	r18, r24
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	3d 83       	std	Y+5, r19	; 0x05
    1a40:	2c 83       	std	Y+4, r18	; 0x04
    1a42:	8c 81       	ldd	r24, Y+4	; 0x04
    1a44:	9d 81       	ldd	r25, Y+5	; 0x05
    1a46:	82 30       	cpi	r24, 0x02	; 2
    1a48:	91 05       	cpc	r25, r1
    1a4a:	e9 f0       	breq	.+58     	; 0x1a86 <MDIO_voidgetPortValue+0x62>
    1a4c:	2c 81       	ldd	r18, Y+4	; 0x04
    1a4e:	3d 81       	ldd	r19, Y+5	; 0x05
    1a50:	23 30       	cpi	r18, 0x03	; 3
    1a52:	31 05       	cpc	r19, r1
    1a54:	34 f4       	brge	.+12     	; 0x1a62 <MDIO_voidgetPortValue+0x3e>
    1a56:	8c 81       	ldd	r24, Y+4	; 0x04
    1a58:	9d 81       	ldd	r25, Y+5	; 0x05
    1a5a:	81 30       	cpi	r24, 0x01	; 1
    1a5c:	91 05       	cpc	r25, r1
    1a5e:	61 f0       	breq	.+24     	; 0x1a78 <MDIO_voidgetPortValue+0x54>
    1a60:	26 c0       	rjmp	.+76     	; 0x1aae <MDIO_voidgetPortValue+0x8a>
    1a62:	2c 81       	ldd	r18, Y+4	; 0x04
    1a64:	3d 81       	ldd	r19, Y+5	; 0x05
    1a66:	23 30       	cpi	r18, 0x03	; 3
    1a68:	31 05       	cpc	r19, r1
    1a6a:	a1 f0       	breq	.+40     	; 0x1a94 <MDIO_voidgetPortValue+0x70>
    1a6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a6e:	9d 81       	ldd	r25, Y+5	; 0x05
    1a70:	84 30       	cpi	r24, 0x04	; 4
    1a72:	91 05       	cpc	r25, r1
    1a74:	b1 f0       	breq	.+44     	; 0x1aa2 <MDIO_voidgetPortValue+0x7e>
    1a76:	1b c0       	rjmp	.+54     	; 0x1aae <MDIO_voidgetPortValue+0x8a>
				{
				case PORTA:
					*ptrPortValue = PINA_REG;
    1a78:	e9 e3       	ldi	r30, 0x39	; 57
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	80 81       	ld	r24, Z
    1a7e:	ea 81       	ldd	r30, Y+2	; 0x02
    1a80:	fb 81       	ldd	r31, Y+3	; 0x03
    1a82:	80 83       	st	Z, r24
    1a84:	14 c0       	rjmp	.+40     	; 0x1aae <MDIO_voidgetPortValue+0x8a>
					break;
				case PORTB:
					*ptrPortValue = PINB_REG;
    1a86:	e6 e3       	ldi	r30, 0x36	; 54
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	80 81       	ld	r24, Z
    1a8c:	ea 81       	ldd	r30, Y+2	; 0x02
    1a8e:	fb 81       	ldd	r31, Y+3	; 0x03
    1a90:	80 83       	st	Z, r24
    1a92:	0d c0       	rjmp	.+26     	; 0x1aae <MDIO_voidgetPortValue+0x8a>
					break;
				case PORTC:
					*ptrPortValue = PINC_REG;
    1a94:	e3 e3       	ldi	r30, 0x33	; 51
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	80 81       	ld	r24, Z
    1a9a:	ea 81       	ldd	r30, Y+2	; 0x02
    1a9c:	fb 81       	ldd	r31, Y+3	; 0x03
    1a9e:	80 83       	st	Z, r24
    1aa0:	06 c0       	rjmp	.+12     	; 0x1aae <MDIO_voidgetPortValue+0x8a>
					break;
				case PORTD:
					*ptrPortValue = PIND_REG;
    1aa2:	e0 e3       	ldi	r30, 0x30	; 48
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	80 81       	ld	r24, Z
    1aa8:	ea 81       	ldd	r30, Y+2	; 0x02
    1aaa:	fb 81       	ldd	r31, Y+3	; 0x03
    1aac:	80 83       	st	Z, r24
				default :
						//Report Error
					break;
				}

}
    1aae:	0f 90       	pop	r0
    1ab0:	0f 90       	pop	r0
    1ab2:	0f 90       	pop	r0
    1ab4:	0f 90       	pop	r0
    1ab6:	0f 90       	pop	r0
    1ab8:	cf 91       	pop	r28
    1aba:	df 91       	pop	r29
    1abc:	08 95       	ret

00001abe <ADC_Init>:
#endif



void ADC_Init(void)
{
    1abe:	df 93       	push	r29
    1ac0:	cf 93       	push	r28
    1ac2:	cd b7       	in	r28, 0x3d	; 61
    1ac4:	de b7       	in	r29, 0x3e	; 62
	// Reference voltage is AVCC
	SET_BIT(ADMUX,6);
    1ac6:	a7 e2       	ldi	r26, 0x27	; 39
    1ac8:	b0 e0       	ldi	r27, 0x00	; 0
    1aca:	e7 e2       	ldi	r30, 0x27	; 39
    1acc:	f0 e0       	ldi	r31, 0x00	; 0
    1ace:	80 81       	ld	r24, Z
    1ad0:	80 64       	ori	r24, 0x40	; 64
    1ad2:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,7);
    1ad4:	a7 e2       	ldi	r26, 0x27	; 39
    1ad6:	b0 e0       	ldi	r27, 0x00	; 0
    1ad8:	e7 e2       	ldi	r30, 0x27	; 39
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	8f 77       	andi	r24, 0x7F	; 127
    1ae0:	8c 93       	st	X, r24
	// Right adjustment
	CLR_BIT(ADMUX,5);
    1ae2:	a7 e2       	ldi	r26, 0x27	; 39
    1ae4:	b0 e0       	ldi	r27, 0x00	; 0
    1ae6:	e7 e2       	ldi	r30, 0x27	; 39
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	80 81       	ld	r24, Z
    1aec:	8f 7d       	andi	r24, 0xDF	; 223
    1aee:	8c 93       	st	X, r24
	// Prescaler of 128
	SET_BIT(ADCSRA,0);
    1af0:	a6 e2       	ldi	r26, 0x26	; 38
    1af2:	b0 e0       	ldi	r27, 0x00	; 0
    1af4:	e6 e2       	ldi	r30, 0x26	; 38
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	80 81       	ld	r24, Z
    1afa:	81 60       	ori	r24, 0x01	; 1
    1afc:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,1);
    1afe:	a6 e2       	ldi	r26, 0x26	; 38
    1b00:	b0 e0       	ldi	r27, 0x00	; 0
    1b02:	e6 e2       	ldi	r30, 0x26	; 38
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	80 81       	ld	r24, Z
    1b08:	82 60       	ori	r24, 0x02	; 2
    1b0a:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,2);
    1b0c:	a6 e2       	ldi	r26, 0x26	; 38
    1b0e:	b0 e0       	ldi	r27, 0x00	; 0
    1b10:	e6 e2       	ldi	r30, 0x26	; 38
    1b12:	f0 e0       	ldi	r31, 0x00	; 0
    1b14:	80 81       	ld	r24, Z
    1b16:	84 60       	ori	r24, 0x04	; 4
    1b18:	8c 93       	st	X, r24
}
    1b1a:	cf 91       	pop	r28
    1b1c:	df 91       	pop	r29
    1b1e:	08 95       	ret

00001b20 <ADC_Enable>:
void ADC_Enable(void)
{
    1b20:	df 93       	push	r29
    1b22:	cf 93       	push	r28
    1b24:	cd b7       	in	r28, 0x3d	; 61
    1b26:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,7);
    1b28:	a6 e2       	ldi	r26, 0x26	; 38
    1b2a:	b0 e0       	ldi	r27, 0x00	; 0
    1b2c:	e6 e2       	ldi	r30, 0x26	; 38
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	80 81       	ld	r24, Z
    1b32:	80 68       	ori	r24, 0x80	; 128
    1b34:	8c 93       	st	X, r24

}
    1b36:	cf 91       	pop	r28
    1b38:	df 91       	pop	r29
    1b3a:	08 95       	ret

00001b3c <ADC_Disable>:

void ADC_Disable(void)
{
    1b3c:	df 93       	push	r29
    1b3e:	cf 93       	push	r28
    1b40:	cd b7       	in	r28, 0x3d	; 61
    1b42:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA,7);
    1b44:	a6 e2       	ldi	r26, 0x26	; 38
    1b46:	b0 e0       	ldi	r27, 0x00	; 0
    1b48:	e6 e2       	ldi	r30, 0x26	; 38
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	80 81       	ld	r24, Z
    1b4e:	8f 77       	andi	r24, 0x7F	; 127
    1b50:	8c 93       	st	X, r24

}
    1b52:	cf 91       	pop	r28
    1b54:	df 91       	pop	r29
    1b56:	08 95       	ret

00001b58 <ADC_Start>:

void ADC_Start(u8 Channel)
{
    1b58:	df 93       	push	r29
    1b5a:	cf 93       	push	r28
    1b5c:	0f 92       	push	r0
    1b5e:	cd b7       	in	r28, 0x3d	; 61
    1b60:	de b7       	in	r29, 0x3e	; 62
    1b62:	89 83       	std	Y+1, r24	; 0x01
	ADMUX&=0b11100000;
    1b64:	a7 e2       	ldi	r26, 0x27	; 39
    1b66:	b0 e0       	ldi	r27, 0x00	; 0
    1b68:	e7 e2       	ldi	r30, 0x27	; 39
    1b6a:	f0 e0       	ldi	r31, 0x00	; 0
    1b6c:	80 81       	ld	r24, Z
    1b6e:	80 7e       	andi	r24, 0xE0	; 224
    1b70:	8c 93       	st	X, r24
	ADMUX|=Channel;
    1b72:	a7 e2       	ldi	r26, 0x27	; 39
    1b74:	b0 e0       	ldi	r27, 0x00	; 0
    1b76:	e7 e2       	ldi	r30, 0x27	; 39
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	90 81       	ld	r25, Z
    1b7c:	89 81       	ldd	r24, Y+1	; 0x01
    1b7e:	89 2b       	or	r24, r25
    1b80:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,6);	//start conversion
    1b82:	a6 e2       	ldi	r26, 0x26	; 38
    1b84:	b0 e0       	ldi	r27, 0x00	; 0
    1b86:	e6 e2       	ldi	r30, 0x26	; 38
    1b88:	f0 e0       	ldi	r31, 0x00	; 0
    1b8a:	80 81       	ld	r24, Z
    1b8c:	80 64       	ori	r24, 0x40	; 64
    1b8e:	8c 93       	st	X, r24
	while(!GET_BIT(ADCSRA,4)); //bit 4 polling
    1b90:	e6 e2       	ldi	r30, 0x26	; 38
    1b92:	f0 e0       	ldi	r31, 0x00	; 0
    1b94:	80 81       	ld	r24, Z
    1b96:	82 95       	swap	r24
    1b98:	8f 70       	andi	r24, 0x0F	; 15
    1b9a:	88 2f       	mov	r24, r24
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	81 70       	andi	r24, 0x01	; 1
    1ba0:	90 70       	andi	r25, 0x00	; 0
    1ba2:	00 97       	sbiw	r24, 0x00	; 0
    1ba4:	a9 f3       	breq	.-22     	; 0x1b90 <ADC_Start+0x38>
}
    1ba6:	0f 90       	pop	r0
    1ba8:	cf 91       	pop	r28
    1baa:	df 91       	pop	r29
    1bac:	08 95       	ret

00001bae <ADC_Result>:

u16 ADC_Result(void)
{
    1bae:	df 93       	push	r29
    1bb0:	cf 93       	push	r28
    1bb2:	cd b7       	in	r28, 0x3d	; 61
    1bb4:	de b7       	in	r29, 0x3e	; 62
	return ADC_Data;
    1bb6:	e4 e2       	ldi	r30, 0x24	; 36
    1bb8:	f0 e0       	ldi	r31, 0x00	; 0
    1bba:	80 81       	ld	r24, Z
    1bbc:	91 81       	ldd	r25, Z+1	; 0x01
}
    1bbe:	cf 91       	pop	r28
    1bc0:	df 91       	pop	r29
    1bc2:	08 95       	ret

00001bc4 <Analog_Value>:

u16 Analog_Value(u16 Digital_Value)
{
    1bc4:	df 93       	push	r29
    1bc6:	cf 93       	push	r28
    1bc8:	00 d0       	rcall	.+0      	; 0x1bca <Analog_Value+0x6>
    1bca:	00 d0       	rcall	.+0      	; 0x1bcc <Analog_Value+0x8>
    1bcc:	cd b7       	in	r28, 0x3d	; 61
    1bce:	de b7       	in	r29, 0x3e	; 62
    1bd0:	9c 83       	std	Y+4, r25	; 0x04
    1bd2:	8b 83       	std	Y+3, r24	; 0x03
	u16 Analog;
	Analog=Digital_Value*(5000UL)/1024;
    1bd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd8:	cc 01       	movw	r24, r24
    1bda:	a0 e0       	ldi	r26, 0x00	; 0
    1bdc:	b0 e0       	ldi	r27, 0x00	; 0
    1bde:	28 e8       	ldi	r18, 0x88	; 136
    1be0:	33 e1       	ldi	r19, 0x13	; 19
    1be2:	40 e0       	ldi	r20, 0x00	; 0
    1be4:	50 e0       	ldi	r21, 0x00	; 0
    1be6:	bc 01       	movw	r22, r24
    1be8:	cd 01       	movw	r24, r26
    1bea:	0e 94 43 22 	call	0x4486	; 0x4486 <__mulsi3>
    1bee:	dc 01       	movw	r26, r24
    1bf0:	cb 01       	movw	r24, r22
    1bf2:	07 2e       	mov	r0, r23
    1bf4:	7a e0       	ldi	r23, 0x0A	; 10
    1bf6:	b6 95       	lsr	r27
    1bf8:	a7 95       	ror	r26
    1bfa:	97 95       	ror	r25
    1bfc:	87 95       	ror	r24
    1bfe:	7a 95       	dec	r23
    1c00:	d1 f7       	brne	.-12     	; 0x1bf6 <Analog_Value+0x32>
    1c02:	70 2d       	mov	r23, r0
    1c04:	9a 83       	std	Y+2, r25	; 0x02
    1c06:	89 83       	std	Y+1, r24	; 0x01
	return Analog;
    1c08:	89 81       	ldd	r24, Y+1	; 0x01
    1c0a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1c0c:	0f 90       	pop	r0
    1c0e:	0f 90       	pop	r0
    1c10:	0f 90       	pop	r0
    1c12:	0f 90       	pop	r0
    1c14:	cf 91       	pop	r28
    1c16:	df 91       	pop	r29
    1c18:	08 95       	ret

00001c1a <ADC_Start_Interrupt>:

void ADC_Start_Interrupt(u8 Channel)
{
    1c1a:	df 93       	push	r29
    1c1c:	cf 93       	push	r28
    1c1e:	0f 92       	push	r0
    1c20:	cd b7       	in	r28, 0x3d	; 61
    1c22:	de b7       	in	r29, 0x3e	; 62
    1c24:	89 83       	std	Y+1, r24	; 0x01

	ADMUX&=0b11100000;
    1c26:	a7 e2       	ldi	r26, 0x27	; 39
    1c28:	b0 e0       	ldi	r27, 0x00	; 0
    1c2a:	e7 e2       	ldi	r30, 0x27	; 39
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	80 81       	ld	r24, Z
    1c30:	80 7e       	andi	r24, 0xE0	; 224
    1c32:	8c 93       	st	X, r24
	ADMUX|=Channel;
    1c34:	a7 e2       	ldi	r26, 0x27	; 39
    1c36:	b0 e0       	ldi	r27, 0x00	; 0
    1c38:	e7 e2       	ldi	r30, 0x27	; 39
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	90 81       	ld	r25, Z
    1c3e:	89 81       	ldd	r24, Y+1	; 0x01
    1c40:	89 2b       	or	r24, r25
    1c42:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,6);	//Start conversion
    1c44:	a6 e2       	ldi	r26, 0x26	; 38
    1c46:	b0 e0       	ldi	r27, 0x00	; 0
    1c48:	e6 e2       	ldi	r30, 0x26	; 38
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	80 81       	ld	r24, Z
    1c4e:	80 64       	ori	r24, 0x40	; 64
    1c50:	8c 93       	st	X, r24
	GIE_voidEnable(); 	//Activate the global interrupt
    1c52:	0e 94 42 06 	call	0xc84	; 0xc84 <GIE_voidEnable>
	SET_BIT(ADCSRA,3);	//Activate interrupt mode in ADC
    1c56:	a6 e2       	ldi	r26, 0x26	; 38
    1c58:	b0 e0       	ldi	r27, 0x00	; 0
    1c5a:	e6 e2       	ldi	r30, 0x26	; 38
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	80 81       	ld	r24, Z
    1c60:	88 60       	ori	r24, 0x08	; 8
    1c62:	8c 93       	st	X, r24
}
    1c64:	0f 90       	pop	r0
    1c66:	cf 91       	pop	r28
    1c68:	df 91       	pop	r29
    1c6a:	08 95       	ret

00001c6c <set_call_back>:
void set_call_back (void (*fn_ptr)(void))
{
    1c6c:	df 93       	push	r29
    1c6e:	cf 93       	push	r28
    1c70:	00 d0       	rcall	.+0      	; 0x1c72 <set_call_back+0x6>
    1c72:	cd b7       	in	r28, 0x3d	; 61
    1c74:	de b7       	in	r29, 0x3e	; 62
    1c76:	9a 83       	std	Y+2, r25	; 0x02
    1c78:	89 83       	std	Y+1, r24	; 0x01
	if(fn_ptr != NULL)
    1c7a:	89 81       	ldd	r24, Y+1	; 0x01
    1c7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c7e:	00 97       	sbiw	r24, 0x00	; 0
    1c80:	31 f0       	breq	.+12     	; 0x1c8e <set_call_back+0x22>
		{
		ptr = fn_ptr ;
    1c82:	89 81       	ldd	r24, Y+1	; 0x01
    1c84:	9a 81       	ldd	r25, Y+2	; 0x02
    1c86:	90 93 a9 00 	sts	0x00A9, r25
    1c8a:	80 93 a8 00 	sts	0x00A8, r24
		}
}
    1c8e:	0f 90       	pop	r0
    1c90:	0f 90       	pop	r0
    1c92:	cf 91       	pop	r28
    1c94:	df 91       	pop	r29
    1c96:	08 95       	ret

00001c98 <__vector_16>:
void __vector_16(void)__attribute__((signal,used));
void __vector_16(void)
{
    1c98:	1f 92       	push	r1
    1c9a:	0f 92       	push	r0
    1c9c:	0f b6       	in	r0, 0x3f	; 63
    1c9e:	0f 92       	push	r0
    1ca0:	11 24       	eor	r1, r1
    1ca2:	2f 93       	push	r18
    1ca4:	3f 93       	push	r19
    1ca6:	4f 93       	push	r20
    1ca8:	5f 93       	push	r21
    1caa:	6f 93       	push	r22
    1cac:	7f 93       	push	r23
    1cae:	8f 93       	push	r24
    1cb0:	9f 93       	push	r25
    1cb2:	af 93       	push	r26
    1cb4:	bf 93       	push	r27
    1cb6:	ef 93       	push	r30
    1cb8:	ff 93       	push	r31
    1cba:	df 93       	push	r29
    1cbc:	cf 93       	push	r28
    1cbe:	cd b7       	in	r28, 0x3d	; 61
    1cc0:	de b7       	in	r29, 0x3e	; 62
	if(ptr != NULL)
    1cc2:	80 91 a8 00 	lds	r24, 0x00A8
    1cc6:	90 91 a9 00 	lds	r25, 0x00A9
    1cca:	00 97       	sbiw	r24, 0x00	; 0
    1ccc:	29 f0       	breq	.+10     	; 0x1cd8 <__vector_16+0x40>
	{
		ptr();
    1cce:	e0 91 a8 00 	lds	r30, 0x00A8
    1cd2:	f0 91 a9 00 	lds	r31, 0x00A9
    1cd6:	09 95       	icall
	}
}
    1cd8:	cf 91       	pop	r28
    1cda:	df 91       	pop	r29
    1cdc:	ff 91       	pop	r31
    1cde:	ef 91       	pop	r30
    1ce0:	bf 91       	pop	r27
    1ce2:	af 91       	pop	r26
    1ce4:	9f 91       	pop	r25
    1ce6:	8f 91       	pop	r24
    1ce8:	7f 91       	pop	r23
    1cea:	6f 91       	pop	r22
    1cec:	5f 91       	pop	r21
    1cee:	4f 91       	pop	r20
    1cf0:	3f 91       	pop	r19
    1cf2:	2f 91       	pop	r18
    1cf4:	0f 90       	pop	r0
    1cf6:	0f be       	out	0x3f, r0	; 63
    1cf8:	0f 90       	pop	r0
    1cfa:	1f 90       	pop	r1
    1cfc:	18 95       	reti

00001cfe <DIO_voidSetPortDirection>:

/**/

void DIO_voidSetPortDirection(u8 copy_u8portID,u8 copy_u8PortDir )

{
    1cfe:	df 93       	push	r29
    1d00:	cf 93       	push	r28
    1d02:	00 d0       	rcall	.+0      	; 0x1d04 <DIO_voidSetPortDirection+0x6>
    1d04:	00 d0       	rcall	.+0      	; 0x1d06 <DIO_voidSetPortDirection+0x8>
    1d06:	cd b7       	in	r28, 0x3d	; 61
    1d08:	de b7       	in	r29, 0x3e	; 62
    1d0a:	89 83       	std	Y+1, r24	; 0x01
    1d0c:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8portID)
    1d0e:	89 81       	ldd	r24, Y+1	; 0x01
    1d10:	28 2f       	mov	r18, r24
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	3c 83       	std	Y+4, r19	; 0x04
    1d16:	2b 83       	std	Y+3, r18	; 0x03
    1d18:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d1c:	81 30       	cpi	r24, 0x01	; 1
    1d1e:	91 05       	cpc	r25, r1
    1d20:	d1 f0       	breq	.+52     	; 0x1d56 <DIO_voidSetPortDirection+0x58>
    1d22:	2b 81       	ldd	r18, Y+3	; 0x03
    1d24:	3c 81       	ldd	r19, Y+4	; 0x04
    1d26:	22 30       	cpi	r18, 0x02	; 2
    1d28:	31 05       	cpc	r19, r1
    1d2a:	2c f4       	brge	.+10     	; 0x1d36 <DIO_voidSetPortDirection+0x38>
    1d2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d30:	00 97       	sbiw	r24, 0x00	; 0
    1d32:	61 f0       	breq	.+24     	; 0x1d4c <DIO_voidSetPortDirection+0x4e>
    1d34:	1e c0       	rjmp	.+60     	; 0x1d72 <DIO_voidSetPortDirection+0x74>
    1d36:	2b 81       	ldd	r18, Y+3	; 0x03
    1d38:	3c 81       	ldd	r19, Y+4	; 0x04
    1d3a:	22 30       	cpi	r18, 0x02	; 2
    1d3c:	31 05       	cpc	r19, r1
    1d3e:	81 f0       	breq	.+32     	; 0x1d60 <DIO_voidSetPortDirection+0x62>
    1d40:	8b 81       	ldd	r24, Y+3	; 0x03
    1d42:	9c 81       	ldd	r25, Y+4	; 0x04
    1d44:	83 30       	cpi	r24, 0x03	; 3
    1d46:	91 05       	cpc	r25, r1
    1d48:	81 f0       	breq	.+32     	; 0x1d6a <DIO_voidSetPortDirection+0x6c>
    1d4a:	13 c0       	rjmp	.+38     	; 0x1d72 <DIO_voidSetPortDirection+0x74>
	{
	case PORTA_ID :   DDRA_REG= copy_u8PortDir ; break ;
    1d4c:	ea e3       	ldi	r30, 0x3A	; 58
    1d4e:	f0 e0       	ldi	r31, 0x00	; 0
    1d50:	8a 81       	ldd	r24, Y+2	; 0x02
    1d52:	80 83       	st	Z, r24
    1d54:	0e c0       	rjmp	.+28     	; 0x1d72 <DIO_voidSetPortDirection+0x74>
	case PORTB_ID :   DDRB_REG= copy_u8PortDir ; break ;
    1d56:	e7 e3       	ldi	r30, 0x37	; 55
    1d58:	f0 e0       	ldi	r31, 0x00	; 0
    1d5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5c:	80 83       	st	Z, r24
    1d5e:	09 c0       	rjmp	.+18     	; 0x1d72 <DIO_voidSetPortDirection+0x74>
	case PORTC_ID :   DDRC_REG= copy_u8PortDir ; break ;
    1d60:	e4 e3       	ldi	r30, 0x34	; 52
    1d62:	f0 e0       	ldi	r31, 0x00	; 0
    1d64:	8a 81       	ldd	r24, Y+2	; 0x02
    1d66:	80 83       	st	Z, r24
    1d68:	04 c0       	rjmp	.+8      	; 0x1d72 <DIO_voidSetPortDirection+0x74>
	case PORTD_ID :   DDRD_REG= copy_u8PortDir ; break ;
    1d6a:	e1 e3       	ldi	r30, 0x31	; 49
    1d6c:	f0 e0       	ldi	r31, 0x00	; 0
    1d6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d70:	80 83       	st	Z, r24

	}
}
    1d72:	0f 90       	pop	r0
    1d74:	0f 90       	pop	r0
    1d76:	0f 90       	pop	r0
    1d78:	0f 90       	pop	r0
    1d7a:	cf 91       	pop	r28
    1d7c:	df 91       	pop	r29
    1d7e:	08 95       	ret

00001d80 <DIO_voidSetPortValue>:


void DIO_voidSetPortValue(u8 copy_u8PortID,u8 copy_u8PortVal )

{
    1d80:	df 93       	push	r29
    1d82:	cf 93       	push	r28
    1d84:	00 d0       	rcall	.+0      	; 0x1d86 <DIO_voidSetPortValue+0x6>
    1d86:	00 d0       	rcall	.+0      	; 0x1d88 <DIO_voidSetPortValue+0x8>
    1d88:	cd b7       	in	r28, 0x3d	; 61
    1d8a:	de b7       	in	r29, 0x3e	; 62
    1d8c:	89 83       	std	Y+1, r24	; 0x01
    1d8e:	6a 83       	std	Y+2, r22	; 0x02

	switch(copy_u8PortID)
    1d90:	89 81       	ldd	r24, Y+1	; 0x01
    1d92:	28 2f       	mov	r18, r24
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	3c 83       	std	Y+4, r19	; 0x04
    1d98:	2b 83       	std	Y+3, r18	; 0x03
    1d9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d9e:	81 30       	cpi	r24, 0x01	; 1
    1da0:	91 05       	cpc	r25, r1
    1da2:	d1 f0       	breq	.+52     	; 0x1dd8 <DIO_voidSetPortValue+0x58>
    1da4:	2b 81       	ldd	r18, Y+3	; 0x03
    1da6:	3c 81       	ldd	r19, Y+4	; 0x04
    1da8:	22 30       	cpi	r18, 0x02	; 2
    1daa:	31 05       	cpc	r19, r1
    1dac:	2c f4       	brge	.+10     	; 0x1db8 <DIO_voidSetPortValue+0x38>
    1dae:	8b 81       	ldd	r24, Y+3	; 0x03
    1db0:	9c 81       	ldd	r25, Y+4	; 0x04
    1db2:	00 97       	sbiw	r24, 0x00	; 0
    1db4:	61 f0       	breq	.+24     	; 0x1dce <DIO_voidSetPortValue+0x4e>
    1db6:	1e c0       	rjmp	.+60     	; 0x1df4 <DIO_voidSetPortValue+0x74>
    1db8:	2b 81       	ldd	r18, Y+3	; 0x03
    1dba:	3c 81       	ldd	r19, Y+4	; 0x04
    1dbc:	22 30       	cpi	r18, 0x02	; 2
    1dbe:	31 05       	cpc	r19, r1
    1dc0:	81 f0       	breq	.+32     	; 0x1de2 <DIO_voidSetPortValue+0x62>
    1dc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc6:	83 30       	cpi	r24, 0x03	; 3
    1dc8:	91 05       	cpc	r25, r1
    1dca:	81 f0       	breq	.+32     	; 0x1dec <DIO_voidSetPortValue+0x6c>
    1dcc:	13 c0       	rjmp	.+38     	; 0x1df4 <DIO_voidSetPortValue+0x74>
	{

	case PORTA_ID :   PORTA_REG= copy_u8PortVal ; break ;
    1dce:	eb e3       	ldi	r30, 0x3B	; 59
    1dd0:	f0 e0       	ldi	r31, 0x00	; 0
    1dd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd4:	80 83       	st	Z, r24
    1dd6:	0e c0       	rjmp	.+28     	; 0x1df4 <DIO_voidSetPortValue+0x74>
	case PORTB_ID :   PORTD_REG= copy_u8PortVal ; break ;
    1dd8:	e2 e3       	ldi	r30, 0x32	; 50
    1dda:	f0 e0       	ldi	r31, 0x00	; 0
    1ddc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dde:	80 83       	st	Z, r24
    1de0:	09 c0       	rjmp	.+18     	; 0x1df4 <DIO_voidSetPortValue+0x74>
	case PORTC_ID :   PORTC_REG= copy_u8PortVal ; break ;
    1de2:	e5 e3       	ldi	r30, 0x35	; 53
    1de4:	f0 e0       	ldi	r31, 0x00	; 0
    1de6:	8a 81       	ldd	r24, Y+2	; 0x02
    1de8:	80 83       	st	Z, r24
    1dea:	04 c0       	rjmp	.+8      	; 0x1df4 <DIO_voidSetPortValue+0x74>
	case PORTD_ID :   PORTD_REG= copy_u8PortVal ; break ;
    1dec:	e2 e3       	ldi	r30, 0x32	; 50
    1dee:	f0 e0       	ldi	r31, 0x00	; 0
    1df0:	8a 81       	ldd	r24, Y+2	; 0x02
    1df2:	80 83       	st	Z, r24

	}
}
    1df4:	0f 90       	pop	r0
    1df6:	0f 90       	pop	r0
    1df8:	0f 90       	pop	r0
    1dfa:	0f 90       	pop	r0
    1dfc:	cf 91       	pop	r28
    1dfe:	df 91       	pop	r29
    1e00:	08 95       	ret

00001e02 <DIO_voidSetPinDirection>:




void	DIO_voidSetPinDirection(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinDir)
{
    1e02:	df 93       	push	r29
    1e04:	cf 93       	push	r28
    1e06:	cd b7       	in	r28, 0x3d	; 61
    1e08:	de b7       	in	r29, 0x3e	; 62
    1e0a:	27 97       	sbiw	r28, 0x07	; 7
    1e0c:	0f b6       	in	r0, 0x3f	; 63
    1e0e:	f8 94       	cli
    1e10:	de bf       	out	0x3e, r29	; 62
    1e12:	0f be       	out	0x3f, r0	; 63
    1e14:	cd bf       	out	0x3d, r28	; 61
    1e16:	89 83       	std	Y+1, r24	; 0x01
    1e18:	6a 83       	std	Y+2, r22	; 0x02
    1e1a:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8PinID>=PIN0&&Copy_u8PinID<=PIN7)
    1e1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e1e:	88 30       	cpi	r24, 0x08	; 8
    1e20:	08 f0       	brcs	.+2      	; 0x1e24 <DIO_voidSetPinDirection+0x22>
    1e22:	ea c0       	rjmp	.+468    	; 0x1ff8 <DIO_voidSetPinDirection+0x1f6>
	{
		if(Copy_u8PinDir==PIN_OUTPUT)//Output
    1e24:	8b 81       	ldd	r24, Y+3	; 0x03
    1e26:	81 30       	cpi	r24, 0x01	; 1
    1e28:	09 f0       	breq	.+2      	; 0x1e2c <DIO_voidSetPinDirection+0x2a>
    1e2a:	6f c0       	rjmp	.+222    	; 0x1f0a <DIO_voidSetPinDirection+0x108>
		{
			switch(Copy_u8PortID)
    1e2c:	89 81       	ldd	r24, Y+1	; 0x01
    1e2e:	28 2f       	mov	r18, r24
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	3f 83       	std	Y+7, r19	; 0x07
    1e34:	2e 83       	std	Y+6, r18	; 0x06
    1e36:	8e 81       	ldd	r24, Y+6	; 0x06
    1e38:	9f 81       	ldd	r25, Y+7	; 0x07
    1e3a:	81 30       	cpi	r24, 0x01	; 1
    1e3c:	91 05       	cpc	r25, r1
    1e3e:	49 f1       	breq	.+82     	; 0x1e92 <DIO_voidSetPinDirection+0x90>
    1e40:	2e 81       	ldd	r18, Y+6	; 0x06
    1e42:	3f 81       	ldd	r19, Y+7	; 0x07
    1e44:	22 30       	cpi	r18, 0x02	; 2
    1e46:	31 05       	cpc	r19, r1
    1e48:	2c f4       	brge	.+10     	; 0x1e54 <DIO_voidSetPinDirection+0x52>
    1e4a:	8e 81       	ldd	r24, Y+6	; 0x06
    1e4c:	9f 81       	ldd	r25, Y+7	; 0x07
    1e4e:	00 97       	sbiw	r24, 0x00	; 0
    1e50:	61 f0       	breq	.+24     	; 0x1e6a <DIO_voidSetPinDirection+0x68>
    1e52:	d2 c0       	rjmp	.+420    	; 0x1ff8 <DIO_voidSetPinDirection+0x1f6>
    1e54:	2e 81       	ldd	r18, Y+6	; 0x06
    1e56:	3f 81       	ldd	r19, Y+7	; 0x07
    1e58:	22 30       	cpi	r18, 0x02	; 2
    1e5a:	31 05       	cpc	r19, r1
    1e5c:	71 f1       	breq	.+92     	; 0x1eba <DIO_voidSetPinDirection+0xb8>
    1e5e:	8e 81       	ldd	r24, Y+6	; 0x06
    1e60:	9f 81       	ldd	r25, Y+7	; 0x07
    1e62:	83 30       	cpi	r24, 0x03	; 3
    1e64:	91 05       	cpc	r25, r1
    1e66:	e9 f1       	breq	.+122    	; 0x1ee2 <DIO_voidSetPinDirection+0xe0>
    1e68:	c7 c0       	rjmp	.+398    	; 0x1ff8 <DIO_voidSetPinDirection+0x1f6>
			{
			case PORTA_ID:    SET_BIT(DDRA_REG,Copy_u8PinID); break;
    1e6a:	aa e3       	ldi	r26, 0x3A	; 58
    1e6c:	b0 e0       	ldi	r27, 0x00	; 0
    1e6e:	ea e3       	ldi	r30, 0x3A	; 58
    1e70:	f0 e0       	ldi	r31, 0x00	; 0
    1e72:	80 81       	ld	r24, Z
    1e74:	48 2f       	mov	r20, r24
    1e76:	8a 81       	ldd	r24, Y+2	; 0x02
    1e78:	28 2f       	mov	r18, r24
    1e7a:	30 e0       	ldi	r19, 0x00	; 0
    1e7c:	81 e0       	ldi	r24, 0x01	; 1
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	02 2e       	mov	r0, r18
    1e82:	02 c0       	rjmp	.+4      	; 0x1e88 <DIO_voidSetPinDirection+0x86>
    1e84:	88 0f       	add	r24, r24
    1e86:	99 1f       	adc	r25, r25
    1e88:	0a 94       	dec	r0
    1e8a:	e2 f7       	brpl	.-8      	; 0x1e84 <DIO_voidSetPinDirection+0x82>
    1e8c:	84 2b       	or	r24, r20
    1e8e:	8c 93       	st	X, r24
    1e90:	b3 c0       	rjmp	.+358    	; 0x1ff8 <DIO_voidSetPinDirection+0x1f6>
			case PORTB_ID:    SET_BIT(DDRB_REG,Copy_u8PinID); break;
    1e92:	a7 e3       	ldi	r26, 0x37	; 55
    1e94:	b0 e0       	ldi	r27, 0x00	; 0
    1e96:	e7 e3       	ldi	r30, 0x37	; 55
    1e98:	f0 e0       	ldi	r31, 0x00	; 0
    1e9a:	80 81       	ld	r24, Z
    1e9c:	48 2f       	mov	r20, r24
    1e9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea0:	28 2f       	mov	r18, r24
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	81 e0       	ldi	r24, 0x01	; 1
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	02 2e       	mov	r0, r18
    1eaa:	02 c0       	rjmp	.+4      	; 0x1eb0 <DIO_voidSetPinDirection+0xae>
    1eac:	88 0f       	add	r24, r24
    1eae:	99 1f       	adc	r25, r25
    1eb0:	0a 94       	dec	r0
    1eb2:	e2 f7       	brpl	.-8      	; 0x1eac <DIO_voidSetPinDirection+0xaa>
    1eb4:	84 2b       	or	r24, r20
    1eb6:	8c 93       	st	X, r24
    1eb8:	9f c0       	rjmp	.+318    	; 0x1ff8 <DIO_voidSetPinDirection+0x1f6>
			case PORTC_ID:    SET_BIT(DDRC_REG,Copy_u8PinID); break;
    1eba:	a4 e3       	ldi	r26, 0x34	; 52
    1ebc:	b0 e0       	ldi	r27, 0x00	; 0
    1ebe:	e4 e3       	ldi	r30, 0x34	; 52
    1ec0:	f0 e0       	ldi	r31, 0x00	; 0
    1ec2:	80 81       	ld	r24, Z
    1ec4:	48 2f       	mov	r20, r24
    1ec6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec8:	28 2f       	mov	r18, r24
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	81 e0       	ldi	r24, 0x01	; 1
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	02 2e       	mov	r0, r18
    1ed2:	02 c0       	rjmp	.+4      	; 0x1ed8 <DIO_voidSetPinDirection+0xd6>
    1ed4:	88 0f       	add	r24, r24
    1ed6:	99 1f       	adc	r25, r25
    1ed8:	0a 94       	dec	r0
    1eda:	e2 f7       	brpl	.-8      	; 0x1ed4 <DIO_voidSetPinDirection+0xd2>
    1edc:	84 2b       	or	r24, r20
    1ede:	8c 93       	st	X, r24
    1ee0:	8b c0       	rjmp	.+278    	; 0x1ff8 <DIO_voidSetPinDirection+0x1f6>
			case PORTD_ID:    SET_BIT(DDRD_REG,Copy_u8PinID); break;
    1ee2:	a1 e3       	ldi	r26, 0x31	; 49
    1ee4:	b0 e0       	ldi	r27, 0x00	; 0
    1ee6:	e1 e3       	ldi	r30, 0x31	; 49
    1ee8:	f0 e0       	ldi	r31, 0x00	; 0
    1eea:	80 81       	ld	r24, Z
    1eec:	48 2f       	mov	r20, r24
    1eee:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef0:	28 2f       	mov	r18, r24
    1ef2:	30 e0       	ldi	r19, 0x00	; 0
    1ef4:	81 e0       	ldi	r24, 0x01	; 1
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	02 2e       	mov	r0, r18
    1efa:	02 c0       	rjmp	.+4      	; 0x1f00 <DIO_voidSetPinDirection+0xfe>
    1efc:	88 0f       	add	r24, r24
    1efe:	99 1f       	adc	r25, r25
    1f00:	0a 94       	dec	r0
    1f02:	e2 f7       	brpl	.-8      	; 0x1efc <DIO_voidSetPinDirection+0xfa>
    1f04:	84 2b       	or	r24, r20
    1f06:	8c 93       	st	X, r24
    1f08:	77 c0       	rjmp	.+238    	; 0x1ff8 <DIO_voidSetPinDirection+0x1f6>

			default:   break;

			}
		}
		else if(Copy_u8PinDir==PIN_INPUT)//Input
    1f0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0c:	88 23       	and	r24, r24
    1f0e:	09 f0       	breq	.+2      	; 0x1f12 <DIO_voidSetPinDirection+0x110>
    1f10:	73 c0       	rjmp	.+230    	; 0x1ff8 <DIO_voidSetPinDirection+0x1f6>
		{
			switch(Copy_u8PortID)
    1f12:	89 81       	ldd	r24, Y+1	; 0x01
    1f14:	28 2f       	mov	r18, r24
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	3d 83       	std	Y+5, r19	; 0x05
    1f1a:	2c 83       	std	Y+4, r18	; 0x04
    1f1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f1e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f20:	81 30       	cpi	r24, 0x01	; 1
    1f22:	91 05       	cpc	r25, r1
    1f24:	59 f1       	breq	.+86     	; 0x1f7c <DIO_voidSetPinDirection+0x17a>
    1f26:	2c 81       	ldd	r18, Y+4	; 0x04
    1f28:	3d 81       	ldd	r19, Y+5	; 0x05
    1f2a:	22 30       	cpi	r18, 0x02	; 2
    1f2c:	31 05       	cpc	r19, r1
    1f2e:	2c f4       	brge	.+10     	; 0x1f3a <DIO_voidSetPinDirection+0x138>
    1f30:	8c 81       	ldd	r24, Y+4	; 0x04
    1f32:	9d 81       	ldd	r25, Y+5	; 0x05
    1f34:	00 97       	sbiw	r24, 0x00	; 0
    1f36:	69 f0       	breq	.+26     	; 0x1f52 <DIO_voidSetPinDirection+0x150>
    1f38:	5f c0       	rjmp	.+190    	; 0x1ff8 <DIO_voidSetPinDirection+0x1f6>
    1f3a:	2c 81       	ldd	r18, Y+4	; 0x04
    1f3c:	3d 81       	ldd	r19, Y+5	; 0x05
    1f3e:	22 30       	cpi	r18, 0x02	; 2
    1f40:	31 05       	cpc	r19, r1
    1f42:	89 f1       	breq	.+98     	; 0x1fa6 <DIO_voidSetPinDirection+0x1a4>
    1f44:	8c 81       	ldd	r24, Y+4	; 0x04
    1f46:	9d 81       	ldd	r25, Y+5	; 0x05
    1f48:	83 30       	cpi	r24, 0x03	; 3
    1f4a:	91 05       	cpc	r25, r1
    1f4c:	09 f4       	brne	.+2      	; 0x1f50 <DIO_voidSetPinDirection+0x14e>
    1f4e:	40 c0       	rjmp	.+128    	; 0x1fd0 <DIO_voidSetPinDirection+0x1ce>
    1f50:	53 c0       	rjmp	.+166    	; 0x1ff8 <DIO_voidSetPinDirection+0x1f6>
			{
			case PORTA_ID:   CLR_BIT(DDRA_REG,Copy_u8PinID); break;
    1f52:	aa e3       	ldi	r26, 0x3A	; 58
    1f54:	b0 e0       	ldi	r27, 0x00	; 0
    1f56:	ea e3       	ldi	r30, 0x3A	; 58
    1f58:	f0 e0       	ldi	r31, 0x00	; 0
    1f5a:	80 81       	ld	r24, Z
    1f5c:	48 2f       	mov	r20, r24
    1f5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f60:	28 2f       	mov	r18, r24
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	81 e0       	ldi	r24, 0x01	; 1
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	02 2e       	mov	r0, r18
    1f6a:	02 c0       	rjmp	.+4      	; 0x1f70 <DIO_voidSetPinDirection+0x16e>
    1f6c:	88 0f       	add	r24, r24
    1f6e:	99 1f       	adc	r25, r25
    1f70:	0a 94       	dec	r0
    1f72:	e2 f7       	brpl	.-8      	; 0x1f6c <DIO_voidSetPinDirection+0x16a>
    1f74:	80 95       	com	r24
    1f76:	84 23       	and	r24, r20
    1f78:	8c 93       	st	X, r24
    1f7a:	3e c0       	rjmp	.+124    	; 0x1ff8 <DIO_voidSetPinDirection+0x1f6>
			case PORTB_ID:   CLR_BIT(DDRB_REG,Copy_u8PinID); break;
    1f7c:	a7 e3       	ldi	r26, 0x37	; 55
    1f7e:	b0 e0       	ldi	r27, 0x00	; 0
    1f80:	e7 e3       	ldi	r30, 0x37	; 55
    1f82:	f0 e0       	ldi	r31, 0x00	; 0
    1f84:	80 81       	ld	r24, Z
    1f86:	48 2f       	mov	r20, r24
    1f88:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8a:	28 2f       	mov	r18, r24
    1f8c:	30 e0       	ldi	r19, 0x00	; 0
    1f8e:	81 e0       	ldi	r24, 0x01	; 1
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	02 2e       	mov	r0, r18
    1f94:	02 c0       	rjmp	.+4      	; 0x1f9a <DIO_voidSetPinDirection+0x198>
    1f96:	88 0f       	add	r24, r24
    1f98:	99 1f       	adc	r25, r25
    1f9a:	0a 94       	dec	r0
    1f9c:	e2 f7       	brpl	.-8      	; 0x1f96 <DIO_voidSetPinDirection+0x194>
    1f9e:	80 95       	com	r24
    1fa0:	84 23       	and	r24, r20
    1fa2:	8c 93       	st	X, r24
    1fa4:	29 c0       	rjmp	.+82     	; 0x1ff8 <DIO_voidSetPinDirection+0x1f6>
			case PORTC_ID:   CLR_BIT(DDRC_REG,Copy_u8PinID); break;
    1fa6:	a4 e3       	ldi	r26, 0x34	; 52
    1fa8:	b0 e0       	ldi	r27, 0x00	; 0
    1faa:	e4 e3       	ldi	r30, 0x34	; 52
    1fac:	f0 e0       	ldi	r31, 0x00	; 0
    1fae:	80 81       	ld	r24, Z
    1fb0:	48 2f       	mov	r20, r24
    1fb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb4:	28 2f       	mov	r18, r24
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	81 e0       	ldi	r24, 0x01	; 1
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	02 2e       	mov	r0, r18
    1fbe:	02 c0       	rjmp	.+4      	; 0x1fc4 <DIO_voidSetPinDirection+0x1c2>
    1fc0:	88 0f       	add	r24, r24
    1fc2:	99 1f       	adc	r25, r25
    1fc4:	0a 94       	dec	r0
    1fc6:	e2 f7       	brpl	.-8      	; 0x1fc0 <DIO_voidSetPinDirection+0x1be>
    1fc8:	80 95       	com	r24
    1fca:	84 23       	and	r24, r20
    1fcc:	8c 93       	st	X, r24
    1fce:	14 c0       	rjmp	.+40     	; 0x1ff8 <DIO_voidSetPinDirection+0x1f6>
			case PORTD_ID:   CLR_BIT(DDRD_REG,Copy_u8PinID); break;
    1fd0:	a1 e3       	ldi	r26, 0x31	; 49
    1fd2:	b0 e0       	ldi	r27, 0x00	; 0
    1fd4:	e1 e3       	ldi	r30, 0x31	; 49
    1fd6:	f0 e0       	ldi	r31, 0x00	; 0
    1fd8:	80 81       	ld	r24, Z
    1fda:	48 2f       	mov	r20, r24
    1fdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fde:	28 2f       	mov	r18, r24
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	81 e0       	ldi	r24, 0x01	; 1
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	02 2e       	mov	r0, r18
    1fe8:	02 c0       	rjmp	.+4      	; 0x1fee <DIO_voidSetPinDirection+0x1ec>
    1fea:	88 0f       	add	r24, r24
    1fec:	99 1f       	adc	r25, r25
    1fee:	0a 94       	dec	r0
    1ff0:	e2 f7       	brpl	.-8      	; 0x1fea <DIO_voidSetPinDirection+0x1e8>
    1ff2:	80 95       	com	r24
    1ff4:	84 23       	and	r24, r20
    1ff6:	8c 93       	st	X, r24
			default:   break;
			}
		}
	}

}
    1ff8:	27 96       	adiw	r28, 0x07	; 7
    1ffa:	0f b6       	in	r0, 0x3f	; 63
    1ffc:	f8 94       	cli
    1ffe:	de bf       	out	0x3e, r29	; 62
    2000:	0f be       	out	0x3f, r0	; 63
    2002:	cd bf       	out	0x3d, r28	; 61
    2004:	cf 91       	pop	r28
    2006:	df 91       	pop	r29
    2008:	08 95       	ret

0000200a <DIO_voidSetPinValue>:
void    DIO_voidSetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue)
{
    200a:	df 93       	push	r29
    200c:	cf 93       	push	r28
    200e:	cd b7       	in	r28, 0x3d	; 61
    2010:	de b7       	in	r29, 0x3e	; 62
    2012:	27 97       	sbiw	r28, 0x07	; 7
    2014:	0f b6       	in	r0, 0x3f	; 63
    2016:	f8 94       	cli
    2018:	de bf       	out	0x3e, r29	; 62
    201a:	0f be       	out	0x3f, r0	; 63
    201c:	cd bf       	out	0x3d, r28	; 61
    201e:	89 83       	std	Y+1, r24	; 0x01
    2020:	6a 83       	std	Y+2, r22	; 0x02
    2022:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8PinID>=PIN0&&Copy_u8PinID<=PIN7)
    2024:	8a 81       	ldd	r24, Y+2	; 0x02
    2026:	88 30       	cpi	r24, 0x08	; 8
    2028:	08 f0       	brcs	.+2      	; 0x202c <DIO_voidSetPinValue+0x22>
    202a:	ea c0       	rjmp	.+468    	; 0x2200 <DIO_voidSetPinValue+0x1f6>
	{
		if(Copy_u8PinValue==PIN_HIGH)//High
    202c:	8b 81       	ldd	r24, Y+3	; 0x03
    202e:	81 30       	cpi	r24, 0x01	; 1
    2030:	09 f0       	breq	.+2      	; 0x2034 <DIO_voidSetPinValue+0x2a>
    2032:	6f c0       	rjmp	.+222    	; 0x2112 <DIO_voidSetPinValue+0x108>
		{

			switch(Copy_u8PortID)
    2034:	89 81       	ldd	r24, Y+1	; 0x01
    2036:	28 2f       	mov	r18, r24
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	3f 83       	std	Y+7, r19	; 0x07
    203c:	2e 83       	std	Y+6, r18	; 0x06
    203e:	8e 81       	ldd	r24, Y+6	; 0x06
    2040:	9f 81       	ldd	r25, Y+7	; 0x07
    2042:	81 30       	cpi	r24, 0x01	; 1
    2044:	91 05       	cpc	r25, r1
    2046:	49 f1       	breq	.+82     	; 0x209a <DIO_voidSetPinValue+0x90>
    2048:	2e 81       	ldd	r18, Y+6	; 0x06
    204a:	3f 81       	ldd	r19, Y+7	; 0x07
    204c:	22 30       	cpi	r18, 0x02	; 2
    204e:	31 05       	cpc	r19, r1
    2050:	2c f4       	brge	.+10     	; 0x205c <DIO_voidSetPinValue+0x52>
    2052:	8e 81       	ldd	r24, Y+6	; 0x06
    2054:	9f 81       	ldd	r25, Y+7	; 0x07
    2056:	00 97       	sbiw	r24, 0x00	; 0
    2058:	61 f0       	breq	.+24     	; 0x2072 <DIO_voidSetPinValue+0x68>
    205a:	d2 c0       	rjmp	.+420    	; 0x2200 <DIO_voidSetPinValue+0x1f6>
    205c:	2e 81       	ldd	r18, Y+6	; 0x06
    205e:	3f 81       	ldd	r19, Y+7	; 0x07
    2060:	22 30       	cpi	r18, 0x02	; 2
    2062:	31 05       	cpc	r19, r1
    2064:	71 f1       	breq	.+92     	; 0x20c2 <DIO_voidSetPinValue+0xb8>
    2066:	8e 81       	ldd	r24, Y+6	; 0x06
    2068:	9f 81       	ldd	r25, Y+7	; 0x07
    206a:	83 30       	cpi	r24, 0x03	; 3
    206c:	91 05       	cpc	r25, r1
    206e:	e9 f1       	breq	.+122    	; 0x20ea <DIO_voidSetPinValue+0xe0>
    2070:	c7 c0       	rjmp	.+398    	; 0x2200 <DIO_voidSetPinValue+0x1f6>
			{
			case PORTA_ID :    SET_BIT(PORTA_REG,Copy_u8PinID); break;
    2072:	ab e3       	ldi	r26, 0x3B	; 59
    2074:	b0 e0       	ldi	r27, 0x00	; 0
    2076:	eb e3       	ldi	r30, 0x3B	; 59
    2078:	f0 e0       	ldi	r31, 0x00	; 0
    207a:	80 81       	ld	r24, Z
    207c:	48 2f       	mov	r20, r24
    207e:	8a 81       	ldd	r24, Y+2	; 0x02
    2080:	28 2f       	mov	r18, r24
    2082:	30 e0       	ldi	r19, 0x00	; 0
    2084:	81 e0       	ldi	r24, 0x01	; 1
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	02 2e       	mov	r0, r18
    208a:	02 c0       	rjmp	.+4      	; 0x2090 <DIO_voidSetPinValue+0x86>
    208c:	88 0f       	add	r24, r24
    208e:	99 1f       	adc	r25, r25
    2090:	0a 94       	dec	r0
    2092:	e2 f7       	brpl	.-8      	; 0x208c <DIO_voidSetPinValue+0x82>
    2094:	84 2b       	or	r24, r20
    2096:	8c 93       	st	X, r24
    2098:	b3 c0       	rjmp	.+358    	; 0x2200 <DIO_voidSetPinValue+0x1f6>
			case PORTB_ID :    SET_BIT(PORTB_REG,Copy_u8PinID); break;
    209a:	a8 e3       	ldi	r26, 0x38	; 56
    209c:	b0 e0       	ldi	r27, 0x00	; 0
    209e:	e8 e3       	ldi	r30, 0x38	; 56
    20a0:	f0 e0       	ldi	r31, 0x00	; 0
    20a2:	80 81       	ld	r24, Z
    20a4:	48 2f       	mov	r20, r24
    20a6:	8a 81       	ldd	r24, Y+2	; 0x02
    20a8:	28 2f       	mov	r18, r24
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	81 e0       	ldi	r24, 0x01	; 1
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	02 2e       	mov	r0, r18
    20b2:	02 c0       	rjmp	.+4      	; 0x20b8 <DIO_voidSetPinValue+0xae>
    20b4:	88 0f       	add	r24, r24
    20b6:	99 1f       	adc	r25, r25
    20b8:	0a 94       	dec	r0
    20ba:	e2 f7       	brpl	.-8      	; 0x20b4 <DIO_voidSetPinValue+0xaa>
    20bc:	84 2b       	or	r24, r20
    20be:	8c 93       	st	X, r24
    20c0:	9f c0       	rjmp	.+318    	; 0x2200 <DIO_voidSetPinValue+0x1f6>
			case PORTC_ID :    SET_BIT(PORTC_REG,Copy_u8PinID); break;
    20c2:	a5 e3       	ldi	r26, 0x35	; 53
    20c4:	b0 e0       	ldi	r27, 0x00	; 0
    20c6:	e5 e3       	ldi	r30, 0x35	; 53
    20c8:	f0 e0       	ldi	r31, 0x00	; 0
    20ca:	80 81       	ld	r24, Z
    20cc:	48 2f       	mov	r20, r24
    20ce:	8a 81       	ldd	r24, Y+2	; 0x02
    20d0:	28 2f       	mov	r18, r24
    20d2:	30 e0       	ldi	r19, 0x00	; 0
    20d4:	81 e0       	ldi	r24, 0x01	; 1
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	02 2e       	mov	r0, r18
    20da:	02 c0       	rjmp	.+4      	; 0x20e0 <DIO_voidSetPinValue+0xd6>
    20dc:	88 0f       	add	r24, r24
    20de:	99 1f       	adc	r25, r25
    20e0:	0a 94       	dec	r0
    20e2:	e2 f7       	brpl	.-8      	; 0x20dc <DIO_voidSetPinValue+0xd2>
    20e4:	84 2b       	or	r24, r20
    20e6:	8c 93       	st	X, r24
    20e8:	8b c0       	rjmp	.+278    	; 0x2200 <DIO_voidSetPinValue+0x1f6>
			case PORTD_ID :    SET_BIT(PORTD_REG,Copy_u8PinID); break;
    20ea:	a2 e3       	ldi	r26, 0x32	; 50
    20ec:	b0 e0       	ldi	r27, 0x00	; 0
    20ee:	e2 e3       	ldi	r30, 0x32	; 50
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	80 81       	ld	r24, Z
    20f4:	48 2f       	mov	r20, r24
    20f6:	8a 81       	ldd	r24, Y+2	; 0x02
    20f8:	28 2f       	mov	r18, r24
    20fa:	30 e0       	ldi	r19, 0x00	; 0
    20fc:	81 e0       	ldi	r24, 0x01	; 1
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	02 2e       	mov	r0, r18
    2102:	02 c0       	rjmp	.+4      	; 0x2108 <DIO_voidSetPinValue+0xfe>
    2104:	88 0f       	add	r24, r24
    2106:	99 1f       	adc	r25, r25
    2108:	0a 94       	dec	r0
    210a:	e2 f7       	brpl	.-8      	; 0x2104 <DIO_voidSetPinValue+0xfa>
    210c:	84 2b       	or	r24, r20
    210e:	8c 93       	st	X, r24
    2110:	77 c0       	rjmp	.+238    	; 0x2200 <DIO_voidSetPinValue+0x1f6>

			}
		}
		else if(Copy_u8PinValue==PIN_LOW)//Low
    2112:	8b 81       	ldd	r24, Y+3	; 0x03
    2114:	88 23       	and	r24, r24
    2116:	09 f0       	breq	.+2      	; 0x211a <DIO_voidSetPinValue+0x110>
    2118:	73 c0       	rjmp	.+230    	; 0x2200 <DIO_voidSetPinValue+0x1f6>
		{
			switch(Copy_u8PortID)
    211a:	89 81       	ldd	r24, Y+1	; 0x01
    211c:	28 2f       	mov	r18, r24
    211e:	30 e0       	ldi	r19, 0x00	; 0
    2120:	3d 83       	std	Y+5, r19	; 0x05
    2122:	2c 83       	std	Y+4, r18	; 0x04
    2124:	8c 81       	ldd	r24, Y+4	; 0x04
    2126:	9d 81       	ldd	r25, Y+5	; 0x05
    2128:	81 30       	cpi	r24, 0x01	; 1
    212a:	91 05       	cpc	r25, r1
    212c:	59 f1       	breq	.+86     	; 0x2184 <DIO_voidSetPinValue+0x17a>
    212e:	2c 81       	ldd	r18, Y+4	; 0x04
    2130:	3d 81       	ldd	r19, Y+5	; 0x05
    2132:	22 30       	cpi	r18, 0x02	; 2
    2134:	31 05       	cpc	r19, r1
    2136:	2c f4       	brge	.+10     	; 0x2142 <DIO_voidSetPinValue+0x138>
    2138:	8c 81       	ldd	r24, Y+4	; 0x04
    213a:	9d 81       	ldd	r25, Y+5	; 0x05
    213c:	00 97       	sbiw	r24, 0x00	; 0
    213e:	69 f0       	breq	.+26     	; 0x215a <DIO_voidSetPinValue+0x150>
    2140:	5f c0       	rjmp	.+190    	; 0x2200 <DIO_voidSetPinValue+0x1f6>
    2142:	2c 81       	ldd	r18, Y+4	; 0x04
    2144:	3d 81       	ldd	r19, Y+5	; 0x05
    2146:	22 30       	cpi	r18, 0x02	; 2
    2148:	31 05       	cpc	r19, r1
    214a:	89 f1       	breq	.+98     	; 0x21ae <DIO_voidSetPinValue+0x1a4>
    214c:	8c 81       	ldd	r24, Y+4	; 0x04
    214e:	9d 81       	ldd	r25, Y+5	; 0x05
    2150:	83 30       	cpi	r24, 0x03	; 3
    2152:	91 05       	cpc	r25, r1
    2154:	09 f4       	brne	.+2      	; 0x2158 <DIO_voidSetPinValue+0x14e>
    2156:	40 c0       	rjmp	.+128    	; 0x21d8 <DIO_voidSetPinValue+0x1ce>
    2158:	53 c0       	rjmp	.+166    	; 0x2200 <DIO_voidSetPinValue+0x1f6>
			{
			case PORTA_ID : CLR_BIT(PORTA_REG,Copy_u8PinID); break ;
    215a:	ab e3       	ldi	r26, 0x3B	; 59
    215c:	b0 e0       	ldi	r27, 0x00	; 0
    215e:	eb e3       	ldi	r30, 0x3B	; 59
    2160:	f0 e0       	ldi	r31, 0x00	; 0
    2162:	80 81       	ld	r24, Z
    2164:	48 2f       	mov	r20, r24
    2166:	8a 81       	ldd	r24, Y+2	; 0x02
    2168:	28 2f       	mov	r18, r24
    216a:	30 e0       	ldi	r19, 0x00	; 0
    216c:	81 e0       	ldi	r24, 0x01	; 1
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	02 2e       	mov	r0, r18
    2172:	02 c0       	rjmp	.+4      	; 0x2178 <DIO_voidSetPinValue+0x16e>
    2174:	88 0f       	add	r24, r24
    2176:	99 1f       	adc	r25, r25
    2178:	0a 94       	dec	r0
    217a:	e2 f7       	brpl	.-8      	; 0x2174 <DIO_voidSetPinValue+0x16a>
    217c:	80 95       	com	r24
    217e:	84 23       	and	r24, r20
    2180:	8c 93       	st	X, r24
    2182:	3e c0       	rjmp	.+124    	; 0x2200 <DIO_voidSetPinValue+0x1f6>
			case PORTB_ID : CLR_BIT(PORTB_REG,Copy_u8PinID); break ;
    2184:	a8 e3       	ldi	r26, 0x38	; 56
    2186:	b0 e0       	ldi	r27, 0x00	; 0
    2188:	e8 e3       	ldi	r30, 0x38	; 56
    218a:	f0 e0       	ldi	r31, 0x00	; 0
    218c:	80 81       	ld	r24, Z
    218e:	48 2f       	mov	r20, r24
    2190:	8a 81       	ldd	r24, Y+2	; 0x02
    2192:	28 2f       	mov	r18, r24
    2194:	30 e0       	ldi	r19, 0x00	; 0
    2196:	81 e0       	ldi	r24, 0x01	; 1
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	02 2e       	mov	r0, r18
    219c:	02 c0       	rjmp	.+4      	; 0x21a2 <DIO_voidSetPinValue+0x198>
    219e:	88 0f       	add	r24, r24
    21a0:	99 1f       	adc	r25, r25
    21a2:	0a 94       	dec	r0
    21a4:	e2 f7       	brpl	.-8      	; 0x219e <DIO_voidSetPinValue+0x194>
    21a6:	80 95       	com	r24
    21a8:	84 23       	and	r24, r20
    21aa:	8c 93       	st	X, r24
    21ac:	29 c0       	rjmp	.+82     	; 0x2200 <DIO_voidSetPinValue+0x1f6>
			case PORTC_ID : CLR_BIT(PORTC_REG,Copy_u8PinID) ;break ;
    21ae:	a5 e3       	ldi	r26, 0x35	; 53
    21b0:	b0 e0       	ldi	r27, 0x00	; 0
    21b2:	e5 e3       	ldi	r30, 0x35	; 53
    21b4:	f0 e0       	ldi	r31, 0x00	; 0
    21b6:	80 81       	ld	r24, Z
    21b8:	48 2f       	mov	r20, r24
    21ba:	8a 81       	ldd	r24, Y+2	; 0x02
    21bc:	28 2f       	mov	r18, r24
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	81 e0       	ldi	r24, 0x01	; 1
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	02 2e       	mov	r0, r18
    21c6:	02 c0       	rjmp	.+4      	; 0x21cc <DIO_voidSetPinValue+0x1c2>
    21c8:	88 0f       	add	r24, r24
    21ca:	99 1f       	adc	r25, r25
    21cc:	0a 94       	dec	r0
    21ce:	e2 f7       	brpl	.-8      	; 0x21c8 <DIO_voidSetPinValue+0x1be>
    21d0:	80 95       	com	r24
    21d2:	84 23       	and	r24, r20
    21d4:	8c 93       	st	X, r24
    21d6:	14 c0       	rjmp	.+40     	; 0x2200 <DIO_voidSetPinValue+0x1f6>
			case PORTD_ID : CLR_BIT(PORTD_REG,Copy_u8PinID) ;break ;
    21d8:	a2 e3       	ldi	r26, 0x32	; 50
    21da:	b0 e0       	ldi	r27, 0x00	; 0
    21dc:	e2 e3       	ldi	r30, 0x32	; 50
    21de:	f0 e0       	ldi	r31, 0x00	; 0
    21e0:	80 81       	ld	r24, Z
    21e2:	48 2f       	mov	r20, r24
    21e4:	8a 81       	ldd	r24, Y+2	; 0x02
    21e6:	28 2f       	mov	r18, r24
    21e8:	30 e0       	ldi	r19, 0x00	; 0
    21ea:	81 e0       	ldi	r24, 0x01	; 1
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	02 2e       	mov	r0, r18
    21f0:	02 c0       	rjmp	.+4      	; 0x21f6 <DIO_voidSetPinValue+0x1ec>
    21f2:	88 0f       	add	r24, r24
    21f4:	99 1f       	adc	r25, r25
    21f6:	0a 94       	dec	r0
    21f8:	e2 f7       	brpl	.-8      	; 0x21f2 <DIO_voidSetPinValue+0x1e8>
    21fa:	80 95       	com	r24
    21fc:	84 23       	and	r24, r20
    21fe:	8c 93       	st	X, r24

			}
		}
	}
}
    2200:	27 96       	adiw	r28, 0x07	; 7
    2202:	0f b6       	in	r0, 0x3f	; 63
    2204:	f8 94       	cli
    2206:	de bf       	out	0x3e, r29	; 62
    2208:	0f be       	out	0x3f, r0	; 63
    220a:	cd bf       	out	0x3d, r28	; 61
    220c:	cf 91       	pop	r28
    220e:	df 91       	pop	r29
    2210:	08 95       	ret

00002212 <DIO_voidGetBitValue>:

u8 DIO_voidGetBitValue(u8 copy_u8PortID , u8 copy_PinID )
{
    2212:	df 93       	push	r29
    2214:	cf 93       	push	r28
    2216:	00 d0       	rcall	.+0      	; 0x2218 <DIO_voidGetBitValue+0x6>
    2218:	00 d0       	rcall	.+0      	; 0x221a <DIO_voidGetBitValue+0x8>
    221a:	0f 92       	push	r0
    221c:	cd b7       	in	r28, 0x3d	; 61
    221e:	de b7       	in	r29, 0x3e	; 62
    2220:	8a 83       	std	Y+2, r24	; 0x02
    2222:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_PinVal ;

	switch(copy_u8PortID)
    2224:	8a 81       	ldd	r24, Y+2	; 0x02
    2226:	28 2f       	mov	r18, r24
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	3d 83       	std	Y+5, r19	; 0x05
    222c:	2c 83       	std	Y+4, r18	; 0x04
    222e:	4c 81       	ldd	r20, Y+4	; 0x04
    2230:	5d 81       	ldd	r21, Y+5	; 0x05
    2232:	41 30       	cpi	r20, 0x01	; 1
    2234:	51 05       	cpc	r21, r1
    2236:	41 f1       	breq	.+80     	; 0x2288 <DIO_voidGetBitValue+0x76>
    2238:	8c 81       	ldd	r24, Y+4	; 0x04
    223a:	9d 81       	ldd	r25, Y+5	; 0x05
    223c:	82 30       	cpi	r24, 0x02	; 2
    223e:	91 05       	cpc	r25, r1
    2240:	34 f4       	brge	.+12     	; 0x224e <DIO_voidGetBitValue+0x3c>
    2242:	2c 81       	ldd	r18, Y+4	; 0x04
    2244:	3d 81       	ldd	r19, Y+5	; 0x05
    2246:	21 15       	cp	r18, r1
    2248:	31 05       	cpc	r19, r1
    224a:	61 f0       	breq	.+24     	; 0x2264 <DIO_voidGetBitValue+0x52>
    224c:	52 c0       	rjmp	.+164    	; 0x22f2 <DIO_voidGetBitValue+0xe0>
    224e:	4c 81       	ldd	r20, Y+4	; 0x04
    2250:	5d 81       	ldd	r21, Y+5	; 0x05
    2252:	42 30       	cpi	r20, 0x02	; 2
    2254:	51 05       	cpc	r21, r1
    2256:	51 f1       	breq	.+84     	; 0x22ac <DIO_voidGetBitValue+0x9a>
    2258:	8c 81       	ldd	r24, Y+4	; 0x04
    225a:	9d 81       	ldd	r25, Y+5	; 0x05
    225c:	83 30       	cpi	r24, 0x03	; 3
    225e:	91 05       	cpc	r25, r1
    2260:	b9 f1       	breq	.+110    	; 0x22d0 <DIO_voidGetBitValue+0xbe>
    2262:	47 c0       	rjmp	.+142    	; 0x22f2 <DIO_voidGetBitValue+0xe0>
	{

	case PORTA_ID : Local_PinVal=GET_BIT(PINA_REG,copy_PinID)   ; break ;
    2264:	e9 e3       	ldi	r30, 0x39	; 57
    2266:	f0 e0       	ldi	r31, 0x00	; 0
    2268:	80 81       	ld	r24, Z
    226a:	28 2f       	mov	r18, r24
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	8b 81       	ldd	r24, Y+3	; 0x03
    2270:	88 2f       	mov	r24, r24
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	a9 01       	movw	r20, r18
    2276:	02 c0       	rjmp	.+4      	; 0x227c <DIO_voidGetBitValue+0x6a>
    2278:	55 95       	asr	r21
    227a:	47 95       	ror	r20
    227c:	8a 95       	dec	r24
    227e:	e2 f7       	brpl	.-8      	; 0x2278 <DIO_voidGetBitValue+0x66>
    2280:	ca 01       	movw	r24, r20
    2282:	81 70       	andi	r24, 0x01	; 1
    2284:	89 83       	std	Y+1, r24	; 0x01
    2286:	35 c0       	rjmp	.+106    	; 0x22f2 <DIO_voidGetBitValue+0xe0>
	case PORTB_ID : Local_PinVal=GET_BIT(PINB_REG,copy_PinID)   ; break ;
    2288:	e6 e3       	ldi	r30, 0x36	; 54
    228a:	f0 e0       	ldi	r31, 0x00	; 0
    228c:	80 81       	ld	r24, Z
    228e:	28 2f       	mov	r18, r24
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	8b 81       	ldd	r24, Y+3	; 0x03
    2294:	88 2f       	mov	r24, r24
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	a9 01       	movw	r20, r18
    229a:	02 c0       	rjmp	.+4      	; 0x22a0 <DIO_voidGetBitValue+0x8e>
    229c:	55 95       	asr	r21
    229e:	47 95       	ror	r20
    22a0:	8a 95       	dec	r24
    22a2:	e2 f7       	brpl	.-8      	; 0x229c <DIO_voidGetBitValue+0x8a>
    22a4:	ca 01       	movw	r24, r20
    22a6:	81 70       	andi	r24, 0x01	; 1
    22a8:	89 83       	std	Y+1, r24	; 0x01
    22aa:	23 c0       	rjmp	.+70     	; 0x22f2 <DIO_voidGetBitValue+0xe0>

	case PORTC_ID : Local_PinVal=GET_BIT(PINC_REG,copy_PinID)   ; break ;
    22ac:	e3 e3       	ldi	r30, 0x33	; 51
    22ae:	f0 e0       	ldi	r31, 0x00	; 0
    22b0:	80 81       	ld	r24, Z
    22b2:	28 2f       	mov	r18, r24
    22b4:	30 e0       	ldi	r19, 0x00	; 0
    22b6:	8b 81       	ldd	r24, Y+3	; 0x03
    22b8:	88 2f       	mov	r24, r24
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	a9 01       	movw	r20, r18
    22be:	02 c0       	rjmp	.+4      	; 0x22c4 <DIO_voidGetBitValue+0xb2>
    22c0:	55 95       	asr	r21
    22c2:	47 95       	ror	r20
    22c4:	8a 95       	dec	r24
    22c6:	e2 f7       	brpl	.-8      	; 0x22c0 <DIO_voidGetBitValue+0xae>
    22c8:	ca 01       	movw	r24, r20
    22ca:	81 70       	andi	r24, 0x01	; 1
    22cc:	89 83       	std	Y+1, r24	; 0x01
    22ce:	11 c0       	rjmp	.+34     	; 0x22f2 <DIO_voidGetBitValue+0xe0>

	case PORTD_ID : Local_PinVal=GET_BIT(PIND_REG,copy_PinID)   ; break ;
    22d0:	e0 e3       	ldi	r30, 0x30	; 48
    22d2:	f0 e0       	ldi	r31, 0x00	; 0
    22d4:	80 81       	ld	r24, Z
    22d6:	28 2f       	mov	r18, r24
    22d8:	30 e0       	ldi	r19, 0x00	; 0
    22da:	8b 81       	ldd	r24, Y+3	; 0x03
    22dc:	88 2f       	mov	r24, r24
    22de:	90 e0       	ldi	r25, 0x00	; 0
    22e0:	a9 01       	movw	r20, r18
    22e2:	02 c0       	rjmp	.+4      	; 0x22e8 <DIO_voidGetBitValue+0xd6>
    22e4:	55 95       	asr	r21
    22e6:	47 95       	ror	r20
    22e8:	8a 95       	dec	r24
    22ea:	e2 f7       	brpl	.-8      	; 0x22e4 <DIO_voidGetBitValue+0xd2>
    22ec:	ca 01       	movw	r24, r20
    22ee:	81 70       	andi	r24, 0x01	; 1
    22f0:	89 83       	std	Y+1, r24	; 0x01

	}

	return Local_PinVal ;
    22f2:	89 81       	ldd	r24, Y+1	; 0x01

}
    22f4:	0f 90       	pop	r0
    22f6:	0f 90       	pop	r0
    22f8:	0f 90       	pop	r0
    22fa:	0f 90       	pop	r0
    22fc:	0f 90       	pop	r0
    22fe:	cf 91       	pop	r28
    2300:	df 91       	pop	r29
    2302:	08 95       	ret

00002304 <DIO_voidToggelPin>:

}
 */

void DIO_voidToggelPin(u8 copy_u8PortID,u8 copy_u8PinID)
{
    2304:	df 93       	push	r29
    2306:	cf 93       	push	r28
    2308:	00 d0       	rcall	.+0      	; 0x230a <DIO_voidToggelPin+0x6>
    230a:	00 d0       	rcall	.+0      	; 0x230c <DIO_voidToggelPin+0x8>
    230c:	cd b7       	in	r28, 0x3d	; 61
    230e:	de b7       	in	r29, 0x3e	; 62
    2310:	89 83       	std	Y+1, r24	; 0x01
    2312:	6a 83       	std	Y+2, r22	; 0x02

	switch (copy_u8PortID)
    2314:	89 81       	ldd	r24, Y+1	; 0x01
    2316:	28 2f       	mov	r18, r24
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	3c 83       	std	Y+4, r19	; 0x04
    231c:	2b 83       	std	Y+3, r18	; 0x03
    231e:	8b 81       	ldd	r24, Y+3	; 0x03
    2320:	9c 81       	ldd	r25, Y+4	; 0x04
    2322:	81 30       	cpi	r24, 0x01	; 1
    2324:	91 05       	cpc	r25, r1
    2326:	49 f1       	breq	.+82     	; 0x237a <DIO_voidToggelPin+0x76>
    2328:	2b 81       	ldd	r18, Y+3	; 0x03
    232a:	3c 81       	ldd	r19, Y+4	; 0x04
    232c:	22 30       	cpi	r18, 0x02	; 2
    232e:	31 05       	cpc	r19, r1
    2330:	2c f4       	brge	.+10     	; 0x233c <DIO_voidToggelPin+0x38>
    2332:	8b 81       	ldd	r24, Y+3	; 0x03
    2334:	9c 81       	ldd	r25, Y+4	; 0x04
    2336:	00 97       	sbiw	r24, 0x00	; 0
    2338:	61 f0       	breq	.+24     	; 0x2352 <DIO_voidToggelPin+0x4e>
    233a:	5a c0       	rjmp	.+180    	; 0x23f0 <DIO_voidToggelPin+0xec>
    233c:	2b 81       	ldd	r18, Y+3	; 0x03
    233e:	3c 81       	ldd	r19, Y+4	; 0x04
    2340:	22 30       	cpi	r18, 0x02	; 2
    2342:	31 05       	cpc	r19, r1
    2344:	71 f1       	breq	.+92     	; 0x23a2 <DIO_voidToggelPin+0x9e>
    2346:	8b 81       	ldd	r24, Y+3	; 0x03
    2348:	9c 81       	ldd	r25, Y+4	; 0x04
    234a:	83 30       	cpi	r24, 0x03	; 3
    234c:	91 05       	cpc	r25, r1
    234e:	e9 f1       	breq	.+122    	; 0x23ca <DIO_voidToggelPin+0xc6>
    2350:	4f c0       	rjmp	.+158    	; 0x23f0 <DIO_voidToggelPin+0xec>
	{
	case PORTA_ID :  TOG_BIT(PORTA_REG,copy_u8PinID) ; break ;
    2352:	ab e3       	ldi	r26, 0x3B	; 59
    2354:	b0 e0       	ldi	r27, 0x00	; 0
    2356:	eb e3       	ldi	r30, 0x3B	; 59
    2358:	f0 e0       	ldi	r31, 0x00	; 0
    235a:	80 81       	ld	r24, Z
    235c:	48 2f       	mov	r20, r24
    235e:	8a 81       	ldd	r24, Y+2	; 0x02
    2360:	28 2f       	mov	r18, r24
    2362:	30 e0       	ldi	r19, 0x00	; 0
    2364:	81 e0       	ldi	r24, 0x01	; 1
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	02 2e       	mov	r0, r18
    236a:	02 c0       	rjmp	.+4      	; 0x2370 <DIO_voidToggelPin+0x6c>
    236c:	88 0f       	add	r24, r24
    236e:	99 1f       	adc	r25, r25
    2370:	0a 94       	dec	r0
    2372:	e2 f7       	brpl	.-8      	; 0x236c <DIO_voidToggelPin+0x68>
    2374:	84 27       	eor	r24, r20
    2376:	8c 93       	st	X, r24
    2378:	3b c0       	rjmp	.+118    	; 0x23f0 <DIO_voidToggelPin+0xec>
	case PORTB_ID :  TOG_BIT(PORTB_REG,copy_u8PinID) ; break ;
    237a:	a8 e3       	ldi	r26, 0x38	; 56
    237c:	b0 e0       	ldi	r27, 0x00	; 0
    237e:	e8 e3       	ldi	r30, 0x38	; 56
    2380:	f0 e0       	ldi	r31, 0x00	; 0
    2382:	80 81       	ld	r24, Z
    2384:	48 2f       	mov	r20, r24
    2386:	8a 81       	ldd	r24, Y+2	; 0x02
    2388:	28 2f       	mov	r18, r24
    238a:	30 e0       	ldi	r19, 0x00	; 0
    238c:	81 e0       	ldi	r24, 0x01	; 1
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	02 2e       	mov	r0, r18
    2392:	02 c0       	rjmp	.+4      	; 0x2398 <DIO_voidToggelPin+0x94>
    2394:	88 0f       	add	r24, r24
    2396:	99 1f       	adc	r25, r25
    2398:	0a 94       	dec	r0
    239a:	e2 f7       	brpl	.-8      	; 0x2394 <DIO_voidToggelPin+0x90>
    239c:	84 27       	eor	r24, r20
    239e:	8c 93       	st	X, r24
    23a0:	27 c0       	rjmp	.+78     	; 0x23f0 <DIO_voidToggelPin+0xec>
	case PORTC_ID :  TOG_BIT(PORTC_REG,copy_u8PinID) ; break ;
    23a2:	a5 e3       	ldi	r26, 0x35	; 53
    23a4:	b0 e0       	ldi	r27, 0x00	; 0
    23a6:	e5 e3       	ldi	r30, 0x35	; 53
    23a8:	f0 e0       	ldi	r31, 0x00	; 0
    23aa:	80 81       	ld	r24, Z
    23ac:	48 2f       	mov	r20, r24
    23ae:	8a 81       	ldd	r24, Y+2	; 0x02
    23b0:	28 2f       	mov	r18, r24
    23b2:	30 e0       	ldi	r19, 0x00	; 0
    23b4:	81 e0       	ldi	r24, 0x01	; 1
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	02 2e       	mov	r0, r18
    23ba:	02 c0       	rjmp	.+4      	; 0x23c0 <DIO_voidToggelPin+0xbc>
    23bc:	88 0f       	add	r24, r24
    23be:	99 1f       	adc	r25, r25
    23c0:	0a 94       	dec	r0
    23c2:	e2 f7       	brpl	.-8      	; 0x23bc <DIO_voidToggelPin+0xb8>
    23c4:	84 27       	eor	r24, r20
    23c6:	8c 93       	st	X, r24
    23c8:	13 c0       	rjmp	.+38     	; 0x23f0 <DIO_voidToggelPin+0xec>
	case PORTD_ID :  TOG_BIT(PORTD_REG,copy_u8PinID) ; break ;
    23ca:	a2 e3       	ldi	r26, 0x32	; 50
    23cc:	b0 e0       	ldi	r27, 0x00	; 0
    23ce:	e2 e3       	ldi	r30, 0x32	; 50
    23d0:	f0 e0       	ldi	r31, 0x00	; 0
    23d2:	80 81       	ld	r24, Z
    23d4:	48 2f       	mov	r20, r24
    23d6:	8a 81       	ldd	r24, Y+2	; 0x02
    23d8:	28 2f       	mov	r18, r24
    23da:	30 e0       	ldi	r19, 0x00	; 0
    23dc:	81 e0       	ldi	r24, 0x01	; 1
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	02 2e       	mov	r0, r18
    23e2:	02 c0       	rjmp	.+4      	; 0x23e8 <DIO_voidToggelPin+0xe4>
    23e4:	88 0f       	add	r24, r24
    23e6:	99 1f       	adc	r25, r25
    23e8:	0a 94       	dec	r0
    23ea:	e2 f7       	brpl	.-8      	; 0x23e4 <DIO_voidToggelPin+0xe0>
    23ec:	84 27       	eor	r24, r20
    23ee:	8c 93       	st	X, r24


	}
}
    23f0:	0f 90       	pop	r0
    23f2:	0f 90       	pop	r0
    23f4:	0f 90       	pop	r0
    23f6:	0f 90       	pop	r0
    23f8:	cf 91       	pop	r28
    23fa:	df 91       	pop	r29
    23fc:	08 95       	ret

000023fe <HSSD2_enInit>:
#include"HSSD2_config.h"
#include"HSSD2_int.h"


ErrorState_t HSSD2_enInit(void)
{
    23fe:	df 93       	push	r29
    2400:	cf 93       	push	r28
    2402:	cd b7       	in	r28, 0x3d	; 61
    2404:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidsetPinDirection(HSSD2_A_PIN, OUTPUT);
    2406:	84 e1       	ldi	r24, 0x14	; 20
    2408:	61 e0       	ldi	r22, 0x01	; 1
    240a:	0e 94 27 09 	call	0x124e	; 0x124e <MDIO_voidsetPinDirection>
	MDIO_voidsetPinDirection(HSSD2_B_PIN, OUTPUT);
    240e:	85 e1       	ldi	r24, 0x15	; 21
    2410:	61 e0       	ldi	r22, 0x01	; 1
    2412:	0e 94 27 09 	call	0x124e	; 0x124e <MDIO_voidsetPinDirection>
	MDIO_voidsetPinDirection(HSSD2_C_PIN, OUTPUT);
    2416:	86 e1       	ldi	r24, 0x16	; 22
    2418:	61 e0       	ldi	r22, 0x01	; 1
    241a:	0e 94 27 09 	call	0x124e	; 0x124e <MDIO_voidsetPinDirection>
	MDIO_voidsetPinDirection(HSSD2_D_PIN, OUTPUT);
    241e:	88 e1       	ldi	r24, 0x18	; 24
    2420:	61 e0       	ldi	r22, 0x01	; 1
    2422:	0e 94 27 09 	call	0x124e	; 0x124e <MDIO_voidsetPinDirection>


	MDIO_voidsetPinDirection(HSSD_COMM1_PIN, OUTPUT);
    2426:	8d e0       	ldi	r24, 0x0D	; 13
    2428:	61 e0       	ldi	r22, 0x01	; 1
    242a:	0e 94 27 09 	call	0x124e	; 0x124e <MDIO_voidsetPinDirection>
	MDIO_voidsetPinDirection(HSSD_COMM2_PIN, OUTPUT);
    242e:	8c e0       	ldi	r24, 0x0C	; 12
    2430:	61 e0       	ldi	r22, 0x01	; 1
    2432:	0e 94 27 09 	call	0x124e	; 0x124e <MDIO_voidsetPinDirection>
	MDIO_voidsetPinDirection(HSSD_COMM3_PIN, INPUT);
    2436:	89 e1       	ldi	r24, 0x19	; 25
    2438:	60 e0       	ldi	r22, 0x00	; 0
    243a:	0e 94 27 09 	call	0x124e	; 0x124e <MDIO_voidsetPinDirection>
	MDIO_voidsetPinDirection(HSSD_COMM4_PIN, INPUT);
    243e:	8a e1       	ldi	r24, 0x1A	; 26
    2440:	60 e0       	ldi	r22, 0x00	; 0
    2442:	0e 94 27 09 	call	0x124e	; 0x124e <MDIO_voidsetPinDirection>


	MDIO_voidsetPinValue(HSSD_COMM1_PIN, HIGH);		//OFF COMMON ANODE
    2446:	8d e0       	ldi	r24, 0x0D	; 13
    2448:	61 e0       	ldi	r22, 0x01	; 1
    244a:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
	MDIO_voidsetPinValue(HSSD_COMM2_PIN, HIGH);		//OFF COMMON ANODE
    244e:	8c e0       	ldi	r24, 0x0C	; 12
    2450:	61 e0       	ldi	r22, 0x01	; 1
    2452:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
/*
	MDIO_voidsetPinValue(HSSD_COMM3_PIN, HIGH);		//OFF COMMON ANODE
	MDIO_voidsetPinValue(HSSD_COMM4_PIN, HIGH);		//OFF COMMON ANODE
*/

	return SUCCESS;
    2456:	82 e0       	ldi	r24, 0x02	; 2
}
    2458:	cf 91       	pop	r28
    245a:	df 91       	pop	r29
    245c:	08 95       	ret

0000245e <HSSD2_enDisplayIntegerNumber>:


ErrorState_t HSSD2_enDisplayIntegerNumber(u8 copy_u8Number) //00-99
{
    245e:	df 93       	push	r29
    2460:	cf 93       	push	r28
    2462:	cd b7       	in	r28, 0x3d	; 61
    2464:	de b7       	in	r29, 0x3e	; 62
    2466:	a6 97       	sbiw	r28, 0x26	; 38
    2468:	0f b6       	in	r0, 0x3f	; 63
    246a:	f8 94       	cli
    246c:	de bf       	out	0x3e, r29	; 62
    246e:	0f be       	out	0x3f, r0	; 63
    2470:	cd bf       	out	0x3d, r28	; 61
    2472:	8a a3       	std	Y+34, r24	; 0x22
	ErrorState_t Local_enState = SUCCESS;
    2474:	82 e0       	ldi	r24, 0x02	; 2
    2476:	89 a3       	std	Y+33, r24	; 0x21
	if(copy_u8Number > 99)
    2478:	8a a1       	ldd	r24, Y+34	; 0x22
    247a:	84 36       	cpi	r24, 0x64	; 100
    247c:	10 f0       	brcs	.+4      	; 0x2482 <HSSD2_enDisplayIntegerNumber+0x24>
	{
		Local_enState = OUT_OF_RANGE_ERR;
    247e:	19 a2       	std	Y+33, r1	; 0x21
    2480:	0d c3       	rjmp	.+1562   	; 0x2a9c <HSSD2_enDisplayIntegerNumber+0x63e>
	}
	else
	{ // <=99
		u8 Local_u8Uints = copy_u8Number % 10;
    2482:	8a a1       	ldd	r24, Y+34	; 0x22
    2484:	9a e0       	ldi	r25, 0x0A	; 10
    2486:	69 2f       	mov	r22, r25
    2488:	0e 94 62 22 	call	0x44c4	; 0x44c4 <__udivmodqi4>
    248c:	89 2f       	mov	r24, r25
    248e:	88 a3       	std	Y+32, r24	; 0x20
		u8 Local_u8Tens  = copy_u8Number / 10;
    2490:	8a a1       	ldd	r24, Y+34	; 0x22
    2492:	9a e0       	ldi	r25, 0x0A	; 10
    2494:	69 2f       	mov	r22, r25
    2496:	0e 94 62 22 	call	0x44c4	; 0x44c4 <__udivmodqi4>
    249a:	8f 8f       	std	Y+31, r24	; 0x1f
		u16 i;

		for(i=0;i<HSSD2_DISPLAY_TIME;i++)
    249c:	1e 8e       	std	Y+30, r1	; 0x1e
    249e:	1d 8e       	std	Y+29, r1	; 0x1d
    24a0:	f7 c2       	rjmp	.+1518   	; 0x2a90 <HSSD2_enDisplayIntegerNumber+0x632>
		{
			switch(Local_u8Uints)
    24a2:	88 a1       	ldd	r24, Y+32	; 0x20
    24a4:	28 2f       	mov	r18, r24
    24a6:	30 e0       	ldi	r19, 0x00	; 0
    24a8:	3e a3       	std	Y+38, r19	; 0x26
    24aa:	2d a3       	std	Y+37, r18	; 0x25
    24ac:	8d a1       	ldd	r24, Y+37	; 0x25
    24ae:	9e a1       	ldd	r25, Y+38	; 0x26
    24b0:	84 30       	cpi	r24, 0x04	; 4
    24b2:	91 05       	cpc	r25, r1
    24b4:	09 f4       	brne	.+2      	; 0x24b8 <HSSD2_enDisplayIntegerNumber+0x5a>
    24b6:	8b c0       	rjmp	.+278    	; 0x25ce <HSSD2_enDisplayIntegerNumber+0x170>
    24b8:	2d a1       	ldd	r18, Y+37	; 0x25
    24ba:	3e a1       	ldd	r19, Y+38	; 0x26
    24bc:	25 30       	cpi	r18, 0x05	; 5
    24be:	31 05       	cpc	r19, r1
    24c0:	ec f4       	brge	.+58     	; 0x24fc <HSSD2_enDisplayIntegerNumber+0x9e>
    24c2:	8d a1       	ldd	r24, Y+37	; 0x25
    24c4:	9e a1       	ldd	r25, Y+38	; 0x26
    24c6:	81 30       	cpi	r24, 0x01	; 1
    24c8:	91 05       	cpc	r25, r1
    24ca:	09 f4       	brne	.+2      	; 0x24ce <HSSD2_enDisplayIntegerNumber+0x70>
    24cc:	4d c0       	rjmp	.+154    	; 0x2568 <HSSD2_enDisplayIntegerNumber+0x10a>
    24ce:	2d a1       	ldd	r18, Y+37	; 0x25
    24d0:	3e a1       	ldd	r19, Y+38	; 0x26
    24d2:	22 30       	cpi	r18, 0x02	; 2
    24d4:	31 05       	cpc	r19, r1
    24d6:	2c f4       	brge	.+10     	; 0x24e2 <HSSD2_enDisplayIntegerNumber+0x84>
    24d8:	8d a1       	ldd	r24, Y+37	; 0x25
    24da:	9e a1       	ldd	r25, Y+38	; 0x26
    24dc:	00 97       	sbiw	r24, 0x00	; 0
    24de:	99 f1       	breq	.+102    	; 0x2546 <HSSD2_enDisplayIntegerNumber+0xe8>
    24e0:	db c0       	rjmp	.+438    	; 0x2698 <HSSD2_enDisplayIntegerNumber+0x23a>
    24e2:	2d a1       	ldd	r18, Y+37	; 0x25
    24e4:	3e a1       	ldd	r19, Y+38	; 0x26
    24e6:	22 30       	cpi	r18, 0x02	; 2
    24e8:	31 05       	cpc	r19, r1
    24ea:	09 f4       	brne	.+2      	; 0x24ee <HSSD2_enDisplayIntegerNumber+0x90>
    24ec:	4e c0       	rjmp	.+156    	; 0x258a <HSSD2_enDisplayIntegerNumber+0x12c>
    24ee:	8d a1       	ldd	r24, Y+37	; 0x25
    24f0:	9e a1       	ldd	r25, Y+38	; 0x26
    24f2:	83 30       	cpi	r24, 0x03	; 3
    24f4:	91 05       	cpc	r25, r1
    24f6:	09 f4       	brne	.+2      	; 0x24fa <HSSD2_enDisplayIntegerNumber+0x9c>
    24f8:	59 c0       	rjmp	.+178    	; 0x25ac <HSSD2_enDisplayIntegerNumber+0x14e>
    24fa:	ce c0       	rjmp	.+412    	; 0x2698 <HSSD2_enDisplayIntegerNumber+0x23a>
    24fc:	2d a1       	ldd	r18, Y+37	; 0x25
    24fe:	3e a1       	ldd	r19, Y+38	; 0x26
    2500:	27 30       	cpi	r18, 0x07	; 7
    2502:	31 05       	cpc	r19, r1
    2504:	09 f4       	brne	.+2      	; 0x2508 <HSSD2_enDisplayIntegerNumber+0xaa>
    2506:	96 c0       	rjmp	.+300    	; 0x2634 <HSSD2_enDisplayIntegerNumber+0x1d6>
    2508:	8d a1       	ldd	r24, Y+37	; 0x25
    250a:	9e a1       	ldd	r25, Y+38	; 0x26
    250c:	88 30       	cpi	r24, 0x08	; 8
    250e:	91 05       	cpc	r25, r1
    2510:	6c f4       	brge	.+26     	; 0x252c <HSSD2_enDisplayIntegerNumber+0xce>
    2512:	2d a1       	ldd	r18, Y+37	; 0x25
    2514:	3e a1       	ldd	r19, Y+38	; 0x26
    2516:	25 30       	cpi	r18, 0x05	; 5
    2518:	31 05       	cpc	r19, r1
    251a:	09 f4       	brne	.+2      	; 0x251e <HSSD2_enDisplayIntegerNumber+0xc0>
    251c:	69 c0       	rjmp	.+210    	; 0x25f0 <HSSD2_enDisplayIntegerNumber+0x192>
    251e:	8d a1       	ldd	r24, Y+37	; 0x25
    2520:	9e a1       	ldd	r25, Y+38	; 0x26
    2522:	86 30       	cpi	r24, 0x06	; 6
    2524:	91 05       	cpc	r25, r1
    2526:	09 f4       	brne	.+2      	; 0x252a <HSSD2_enDisplayIntegerNumber+0xcc>
    2528:	74 c0       	rjmp	.+232    	; 0x2612 <HSSD2_enDisplayIntegerNumber+0x1b4>
    252a:	b6 c0       	rjmp	.+364    	; 0x2698 <HSSD2_enDisplayIntegerNumber+0x23a>
    252c:	2d a1       	ldd	r18, Y+37	; 0x25
    252e:	3e a1       	ldd	r19, Y+38	; 0x26
    2530:	28 30       	cpi	r18, 0x08	; 8
    2532:	31 05       	cpc	r19, r1
    2534:	09 f4       	brne	.+2      	; 0x2538 <HSSD2_enDisplayIntegerNumber+0xda>
    2536:	8f c0       	rjmp	.+286    	; 0x2656 <HSSD2_enDisplayIntegerNumber+0x1f8>
    2538:	8d a1       	ldd	r24, Y+37	; 0x25
    253a:	9e a1       	ldd	r25, Y+38	; 0x26
    253c:	89 30       	cpi	r24, 0x09	; 9
    253e:	91 05       	cpc	r25, r1
    2540:	09 f4       	brne	.+2      	; 0x2544 <HSSD2_enDisplayIntegerNumber+0xe6>
    2542:	9a c0       	rjmp	.+308    	; 0x2678 <HSSD2_enDisplayIntegerNumber+0x21a>
    2544:	a9 c0       	rjmp	.+338    	; 0x2698 <HSSD2_enDisplayIntegerNumber+0x23a>
					{
					case 0 :
						MDIO_voidsetPinValue(HSSD2_A_PIN, LOW);
    2546:	84 e1       	ldi	r24, 0x14	; 20
    2548:	60 e0       	ldi	r22, 0x00	; 0
    254a:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
						MDIO_voidsetPinValue(HSSD2_B_PIN, LOW);
    254e:	85 e1       	ldi	r24, 0x15	; 21
    2550:	60 e0       	ldi	r22, 0x00	; 0
    2552:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
						MDIO_voidsetPinValue(HSSD2_C_PIN, LOW);
    2556:	86 e1       	ldi	r24, 0x16	; 22
    2558:	60 e0       	ldi	r22, 0x00	; 0
    255a:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
						MDIO_voidsetPinValue(HSSD2_D_PIN, LOW);
    255e:	88 e1       	ldi	r24, 0x18	; 24
    2560:	60 e0       	ldi	r22, 0x00	; 0
    2562:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
    2566:	98 c0       	rjmp	.+304    	; 0x2698 <HSSD2_enDisplayIntegerNumber+0x23a>

						break;
					case 1 :
						MDIO_voidsetPinValue(HSSD2_A_PIN, HIGH);
    2568:	84 e1       	ldi	r24, 0x14	; 20
    256a:	61 e0       	ldi	r22, 0x01	; 1
    256c:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
						MDIO_voidsetPinValue(HSSD2_B_PIN, LOW);
    2570:	85 e1       	ldi	r24, 0x15	; 21
    2572:	60 e0       	ldi	r22, 0x00	; 0
    2574:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
						MDIO_voidsetPinValue(HSSD2_C_PIN, LOW);
    2578:	86 e1       	ldi	r24, 0x16	; 22
    257a:	60 e0       	ldi	r22, 0x00	; 0
    257c:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
						MDIO_voidsetPinValue(HSSD2_D_PIN, LOW);
    2580:	88 e1       	ldi	r24, 0x18	; 24
    2582:	60 e0       	ldi	r22, 0x00	; 0
    2584:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
    2588:	87 c0       	rjmp	.+270    	; 0x2698 <HSSD2_enDisplayIntegerNumber+0x23a>

						break;
					case 2 :
						MDIO_voidsetPinValue(HSSD2_A_PIN, LOW);
    258a:	84 e1       	ldi	r24, 0x14	; 20
    258c:	60 e0       	ldi	r22, 0x00	; 0
    258e:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
						MDIO_voidsetPinValue(HSSD2_B_PIN, HIGH);
    2592:	85 e1       	ldi	r24, 0x15	; 21
    2594:	61 e0       	ldi	r22, 0x01	; 1
    2596:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
						MDIO_voidsetPinValue(HSSD2_C_PIN, LOW);
    259a:	86 e1       	ldi	r24, 0x16	; 22
    259c:	60 e0       	ldi	r22, 0x00	; 0
    259e:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
						MDIO_voidsetPinValue(HSSD2_D_PIN, LOW);
    25a2:	88 e1       	ldi	r24, 0x18	; 24
    25a4:	60 e0       	ldi	r22, 0x00	; 0
    25a6:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
    25aa:	76 c0       	rjmp	.+236    	; 0x2698 <HSSD2_enDisplayIntegerNumber+0x23a>

						break;
					case 3 :
						MDIO_voidsetPinValue(HSSD2_A_PIN, HIGH);
    25ac:	84 e1       	ldi	r24, 0x14	; 20
    25ae:	61 e0       	ldi	r22, 0x01	; 1
    25b0:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
						MDIO_voidsetPinValue(HSSD2_B_PIN, HIGH);
    25b4:	85 e1       	ldi	r24, 0x15	; 21
    25b6:	61 e0       	ldi	r22, 0x01	; 1
    25b8:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
						MDIO_voidsetPinValue(HSSD2_C_PIN, LOW);
    25bc:	86 e1       	ldi	r24, 0x16	; 22
    25be:	60 e0       	ldi	r22, 0x00	; 0
    25c0:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
						MDIO_voidsetPinValue(HSSD2_D_PIN, LOW);
    25c4:	88 e1       	ldi	r24, 0x18	; 24
    25c6:	60 e0       	ldi	r22, 0x00	; 0
    25c8:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
    25cc:	65 c0       	rjmp	.+202    	; 0x2698 <HSSD2_enDisplayIntegerNumber+0x23a>

						break;
					case 4 :
						MDIO_voidsetPinValue(HSSD2_A_PIN, LOW);
    25ce:	84 e1       	ldi	r24, 0x14	; 20
    25d0:	60 e0       	ldi	r22, 0x00	; 0
    25d2:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
						MDIO_voidsetPinValue(HSSD2_B_PIN, LOW);
    25d6:	85 e1       	ldi	r24, 0x15	; 21
    25d8:	60 e0       	ldi	r22, 0x00	; 0
    25da:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
						MDIO_voidsetPinValue(HSSD2_C_PIN, HIGH);
    25de:	86 e1       	ldi	r24, 0x16	; 22
    25e0:	61 e0       	ldi	r22, 0x01	; 1
    25e2:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
						MDIO_voidsetPinValue(HSSD2_D_PIN, LOW);
    25e6:	88 e1       	ldi	r24, 0x18	; 24
    25e8:	60 e0       	ldi	r22, 0x00	; 0
    25ea:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
    25ee:	54 c0       	rjmp	.+168    	; 0x2698 <HSSD2_enDisplayIntegerNumber+0x23a>

						break;
					case 5 :
						MDIO_voidsetPinValue(HSSD2_A_PIN, HIGH);
    25f0:	84 e1       	ldi	r24, 0x14	; 20
    25f2:	61 e0       	ldi	r22, 0x01	; 1
    25f4:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
						MDIO_voidsetPinValue(HSSD2_B_PIN, LOW);
    25f8:	85 e1       	ldi	r24, 0x15	; 21
    25fa:	60 e0       	ldi	r22, 0x00	; 0
    25fc:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
						MDIO_voidsetPinValue(HSSD2_C_PIN, HIGH);
    2600:	86 e1       	ldi	r24, 0x16	; 22
    2602:	61 e0       	ldi	r22, 0x01	; 1
    2604:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
						MDIO_voidsetPinValue(HSSD2_D_PIN, LOW);
    2608:	88 e1       	ldi	r24, 0x18	; 24
    260a:	60 e0       	ldi	r22, 0x00	; 0
    260c:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
    2610:	43 c0       	rjmp	.+134    	; 0x2698 <HSSD2_enDisplayIntegerNumber+0x23a>

						break;
					case 6 :
						MDIO_voidsetPinValue(HSSD2_A_PIN, LOW);
    2612:	84 e1       	ldi	r24, 0x14	; 20
    2614:	60 e0       	ldi	r22, 0x00	; 0
    2616:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
						MDIO_voidsetPinValue(HSSD2_B_PIN, HIGH);
    261a:	85 e1       	ldi	r24, 0x15	; 21
    261c:	61 e0       	ldi	r22, 0x01	; 1
    261e:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
						MDIO_voidsetPinValue(HSSD2_C_PIN, HIGH);
    2622:	86 e1       	ldi	r24, 0x16	; 22
    2624:	61 e0       	ldi	r22, 0x01	; 1
    2626:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
						MDIO_voidsetPinValue(HSSD2_D_PIN, LOW);
    262a:	88 e1       	ldi	r24, 0x18	; 24
    262c:	60 e0       	ldi	r22, 0x00	; 0
    262e:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
    2632:	32 c0       	rjmp	.+100    	; 0x2698 <HSSD2_enDisplayIntegerNumber+0x23a>

						break;
					case 7 :
						MDIO_voidsetPinValue(HSSD2_A_PIN, HIGH);
    2634:	84 e1       	ldi	r24, 0x14	; 20
    2636:	61 e0       	ldi	r22, 0x01	; 1
    2638:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
						MDIO_voidsetPinValue(HSSD2_B_PIN, HIGH);
    263c:	85 e1       	ldi	r24, 0x15	; 21
    263e:	61 e0       	ldi	r22, 0x01	; 1
    2640:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
						MDIO_voidsetPinValue(HSSD2_C_PIN, HIGH);
    2644:	86 e1       	ldi	r24, 0x16	; 22
    2646:	61 e0       	ldi	r22, 0x01	; 1
    2648:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
						MDIO_voidsetPinValue(HSSD2_D_PIN, LOW);
    264c:	88 e1       	ldi	r24, 0x18	; 24
    264e:	60 e0       	ldi	r22, 0x00	; 0
    2650:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
    2654:	21 c0       	rjmp	.+66     	; 0x2698 <HSSD2_enDisplayIntegerNumber+0x23a>

						break;
					case 8 :
						MDIO_voidsetPinValue(HSSD2_A_PIN, LOW);
    2656:	84 e1       	ldi	r24, 0x14	; 20
    2658:	60 e0       	ldi	r22, 0x00	; 0
    265a:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
						MDIO_voidsetPinValue(HSSD2_B_PIN, LOW);
    265e:	85 e1       	ldi	r24, 0x15	; 21
    2660:	60 e0       	ldi	r22, 0x00	; 0
    2662:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
						MDIO_voidsetPinValue(HSSD2_C_PIN, LOW);
    2666:	86 e1       	ldi	r24, 0x16	; 22
    2668:	60 e0       	ldi	r22, 0x00	; 0
    266a:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
						MDIO_voidsetPinValue(HSSD2_D_PIN, HIGH);
    266e:	88 e1       	ldi	r24, 0x18	; 24
    2670:	61 e0       	ldi	r22, 0x01	; 1
    2672:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
    2676:	10 c0       	rjmp	.+32     	; 0x2698 <HSSD2_enDisplayIntegerNumber+0x23a>

						break;
					case 9 :
						MDIO_voidsetPinValue(HSSD2_A_PIN, HIGH);
    2678:	84 e1       	ldi	r24, 0x14	; 20
    267a:	61 e0       	ldi	r22, 0x01	; 1
    267c:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
						MDIO_voidsetPinValue(HSSD2_B_PIN, LOW);
    2680:	85 e1       	ldi	r24, 0x15	; 21
    2682:	60 e0       	ldi	r22, 0x00	; 0
    2684:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
						MDIO_voidsetPinValue(HSSD2_C_PIN, LOW);
    2688:	86 e1       	ldi	r24, 0x16	; 22
    268a:	60 e0       	ldi	r22, 0x00	; 0
    268c:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
						MDIO_voidsetPinValue(HSSD2_D_PIN, HIGH);
    2690:	88 e1       	ldi	r24, 0x18	; 24
    2692:	61 e0       	ldi	r22, 0x01	; 1
    2694:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>

						break;
					default : break;
					}//units switch
					//ENABLE DIGIT 1
					MDIO_voidsetPinValue(HSSD_COMM1_PIN, LOW);
    2698:	8d e0       	ldi	r24, 0x0D	; 13
    269a:	60 e0       	ldi	r22, 0x00	; 0
    269c:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
					//DISABLE DIGIT 2
					MDIO_voidsetPinValue(HSSD_COMM2_PIN, HIGH);
    26a0:	8c e0       	ldi	r24, 0x0C	; 12
    26a2:	61 e0       	ldi	r22, 0x01	; 1
    26a4:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
    26a8:	80 e0       	ldi	r24, 0x00	; 0
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	a0 e8       	ldi	r26, 0x80	; 128
    26ae:	bf e3       	ldi	r27, 0x3F	; 63
    26b0:	89 8f       	std	Y+25, r24	; 0x19
    26b2:	9a 8f       	std	Y+26, r25	; 0x1a
    26b4:	ab 8f       	std	Y+27, r26	; 0x1b
    26b6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26b8:	69 8d       	ldd	r22, Y+25	; 0x19
    26ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26c0:	20 e0       	ldi	r18, 0x00	; 0
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	4a e7       	ldi	r20, 0x7A	; 122
    26c6:	55 e4       	ldi	r21, 0x45	; 69
    26c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26cc:	dc 01       	movw	r26, r24
    26ce:	cb 01       	movw	r24, r22
    26d0:	8d 8b       	std	Y+21, r24	; 0x15
    26d2:	9e 8b       	std	Y+22, r25	; 0x16
    26d4:	af 8b       	std	Y+23, r26	; 0x17
    26d6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26d8:	6d 89       	ldd	r22, Y+21	; 0x15
    26da:	7e 89       	ldd	r23, Y+22	; 0x16
    26dc:	8f 89       	ldd	r24, Y+23	; 0x17
    26de:	98 8d       	ldd	r25, Y+24	; 0x18
    26e0:	20 e0       	ldi	r18, 0x00	; 0
    26e2:	30 e0       	ldi	r19, 0x00	; 0
    26e4:	40 e8       	ldi	r20, 0x80	; 128
    26e6:	5f e3       	ldi	r21, 0x3F	; 63
    26e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26ec:	88 23       	and	r24, r24
    26ee:	2c f4       	brge	.+10     	; 0x26fa <HSSD2_enDisplayIntegerNumber+0x29c>
		__ticks = 1;
    26f0:	81 e0       	ldi	r24, 0x01	; 1
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	9c 8b       	std	Y+20, r25	; 0x14
    26f6:	8b 8b       	std	Y+19, r24	; 0x13
    26f8:	3f c0       	rjmp	.+126    	; 0x2778 <HSSD2_enDisplayIntegerNumber+0x31a>
	else if (__tmp > 65535)
    26fa:	6d 89       	ldd	r22, Y+21	; 0x15
    26fc:	7e 89       	ldd	r23, Y+22	; 0x16
    26fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2700:	98 8d       	ldd	r25, Y+24	; 0x18
    2702:	20 e0       	ldi	r18, 0x00	; 0
    2704:	3f ef       	ldi	r19, 0xFF	; 255
    2706:	4f e7       	ldi	r20, 0x7F	; 127
    2708:	57 e4       	ldi	r21, 0x47	; 71
    270a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    270e:	18 16       	cp	r1, r24
    2710:	4c f5       	brge	.+82     	; 0x2764 <HSSD2_enDisplayIntegerNumber+0x306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2712:	69 8d       	ldd	r22, Y+25	; 0x19
    2714:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2716:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2718:	9c 8d       	ldd	r25, Y+28	; 0x1c
    271a:	20 e0       	ldi	r18, 0x00	; 0
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	40 e2       	ldi	r20, 0x20	; 32
    2720:	51 e4       	ldi	r21, 0x41	; 65
    2722:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2726:	dc 01       	movw	r26, r24
    2728:	cb 01       	movw	r24, r22
    272a:	bc 01       	movw	r22, r24
    272c:	cd 01       	movw	r24, r26
    272e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2732:	dc 01       	movw	r26, r24
    2734:	cb 01       	movw	r24, r22
    2736:	9c 8b       	std	Y+20, r25	; 0x14
    2738:	8b 8b       	std	Y+19, r24	; 0x13
    273a:	0f c0       	rjmp	.+30     	; 0x275a <HSSD2_enDisplayIntegerNumber+0x2fc>
    273c:	80 e9       	ldi	r24, 0x90	; 144
    273e:	91 e0       	ldi	r25, 0x01	; 1
    2740:	9a 8b       	std	Y+18, r25	; 0x12
    2742:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2744:	89 89       	ldd	r24, Y+17	; 0x11
    2746:	9a 89       	ldd	r25, Y+18	; 0x12
    2748:	01 97       	sbiw	r24, 0x01	; 1
    274a:	f1 f7       	brne	.-4      	; 0x2748 <HSSD2_enDisplayIntegerNumber+0x2ea>
    274c:	9a 8b       	std	Y+18, r25	; 0x12
    274e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2750:	8b 89       	ldd	r24, Y+19	; 0x13
    2752:	9c 89       	ldd	r25, Y+20	; 0x14
    2754:	01 97       	sbiw	r24, 0x01	; 1
    2756:	9c 8b       	std	Y+20, r25	; 0x14
    2758:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    275a:	8b 89       	ldd	r24, Y+19	; 0x13
    275c:	9c 89       	ldd	r25, Y+20	; 0x14
    275e:	00 97       	sbiw	r24, 0x00	; 0
    2760:	69 f7       	brne	.-38     	; 0x273c <HSSD2_enDisplayIntegerNumber+0x2de>
    2762:	14 c0       	rjmp	.+40     	; 0x278c <HSSD2_enDisplayIntegerNumber+0x32e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2764:	6d 89       	ldd	r22, Y+21	; 0x15
    2766:	7e 89       	ldd	r23, Y+22	; 0x16
    2768:	8f 89       	ldd	r24, Y+23	; 0x17
    276a:	98 8d       	ldd	r25, Y+24	; 0x18
    276c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2770:	dc 01       	movw	r26, r24
    2772:	cb 01       	movw	r24, r22
    2774:	9c 8b       	std	Y+20, r25	; 0x14
    2776:	8b 8b       	std	Y+19, r24	; 0x13
    2778:	8b 89       	ldd	r24, Y+19	; 0x13
    277a:	9c 89       	ldd	r25, Y+20	; 0x14
    277c:	98 8b       	std	Y+16, r25	; 0x10
    277e:	8f 87       	std	Y+15, r24	; 0x0f
    2780:	8f 85       	ldd	r24, Y+15	; 0x0f
    2782:	98 89       	ldd	r25, Y+16	; 0x10
    2784:	01 97       	sbiw	r24, 0x01	; 1
    2786:	f1 f7       	brne	.-4      	; 0x2784 <HSSD2_enDisplayIntegerNumber+0x326>
    2788:	98 8b       	std	Y+16, r25	; 0x10
    278a:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(1);
					//DISABLE DIGIT 1
					MDIO_voidsetPinValue(HSSD_COMM1_PIN, HIGH);
    278c:	8d e0       	ldi	r24, 0x0D	; 13
    278e:	61 e0       	ldi	r22, 0x01	; 1
    2790:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>


					switch(Local_u8Tens)
    2794:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2796:	28 2f       	mov	r18, r24
    2798:	30 e0       	ldi	r19, 0x00	; 0
    279a:	3c a3       	std	Y+36, r19	; 0x24
    279c:	2b a3       	std	Y+35, r18	; 0x23
    279e:	8b a1       	ldd	r24, Y+35	; 0x23
    27a0:	9c a1       	ldd	r25, Y+36	; 0x24
    27a2:	84 30       	cpi	r24, 0x04	; 4
    27a4:	91 05       	cpc	r25, r1
    27a6:	09 f4       	brne	.+2      	; 0x27aa <HSSD2_enDisplayIntegerNumber+0x34c>
    27a8:	8b c0       	rjmp	.+278    	; 0x28c0 <HSSD2_enDisplayIntegerNumber+0x462>
    27aa:	2b a1       	ldd	r18, Y+35	; 0x23
    27ac:	3c a1       	ldd	r19, Y+36	; 0x24
    27ae:	25 30       	cpi	r18, 0x05	; 5
    27b0:	31 05       	cpc	r19, r1
    27b2:	ec f4       	brge	.+58     	; 0x27ee <HSSD2_enDisplayIntegerNumber+0x390>
    27b4:	8b a1       	ldd	r24, Y+35	; 0x23
    27b6:	9c a1       	ldd	r25, Y+36	; 0x24
    27b8:	81 30       	cpi	r24, 0x01	; 1
    27ba:	91 05       	cpc	r25, r1
    27bc:	09 f4       	brne	.+2      	; 0x27c0 <HSSD2_enDisplayIntegerNumber+0x362>
    27be:	4d c0       	rjmp	.+154    	; 0x285a <HSSD2_enDisplayIntegerNumber+0x3fc>
    27c0:	2b a1       	ldd	r18, Y+35	; 0x23
    27c2:	3c a1       	ldd	r19, Y+36	; 0x24
    27c4:	22 30       	cpi	r18, 0x02	; 2
    27c6:	31 05       	cpc	r19, r1
    27c8:	2c f4       	brge	.+10     	; 0x27d4 <HSSD2_enDisplayIntegerNumber+0x376>
    27ca:	8b a1       	ldd	r24, Y+35	; 0x23
    27cc:	9c a1       	ldd	r25, Y+36	; 0x24
    27ce:	00 97       	sbiw	r24, 0x00	; 0
    27d0:	99 f1       	breq	.+102    	; 0x2838 <HSSD2_enDisplayIntegerNumber+0x3da>
    27d2:	db c0       	rjmp	.+438    	; 0x298a <HSSD2_enDisplayIntegerNumber+0x52c>
    27d4:	2b a1       	ldd	r18, Y+35	; 0x23
    27d6:	3c a1       	ldd	r19, Y+36	; 0x24
    27d8:	22 30       	cpi	r18, 0x02	; 2
    27da:	31 05       	cpc	r19, r1
    27dc:	09 f4       	brne	.+2      	; 0x27e0 <HSSD2_enDisplayIntegerNumber+0x382>
    27de:	4e c0       	rjmp	.+156    	; 0x287c <HSSD2_enDisplayIntegerNumber+0x41e>
    27e0:	8b a1       	ldd	r24, Y+35	; 0x23
    27e2:	9c a1       	ldd	r25, Y+36	; 0x24
    27e4:	83 30       	cpi	r24, 0x03	; 3
    27e6:	91 05       	cpc	r25, r1
    27e8:	09 f4       	brne	.+2      	; 0x27ec <HSSD2_enDisplayIntegerNumber+0x38e>
    27ea:	59 c0       	rjmp	.+178    	; 0x289e <HSSD2_enDisplayIntegerNumber+0x440>
    27ec:	ce c0       	rjmp	.+412    	; 0x298a <HSSD2_enDisplayIntegerNumber+0x52c>
    27ee:	2b a1       	ldd	r18, Y+35	; 0x23
    27f0:	3c a1       	ldd	r19, Y+36	; 0x24
    27f2:	27 30       	cpi	r18, 0x07	; 7
    27f4:	31 05       	cpc	r19, r1
    27f6:	09 f4       	brne	.+2      	; 0x27fa <HSSD2_enDisplayIntegerNumber+0x39c>
    27f8:	96 c0       	rjmp	.+300    	; 0x2926 <HSSD2_enDisplayIntegerNumber+0x4c8>
    27fa:	8b a1       	ldd	r24, Y+35	; 0x23
    27fc:	9c a1       	ldd	r25, Y+36	; 0x24
    27fe:	88 30       	cpi	r24, 0x08	; 8
    2800:	91 05       	cpc	r25, r1
    2802:	6c f4       	brge	.+26     	; 0x281e <HSSD2_enDisplayIntegerNumber+0x3c0>
    2804:	2b a1       	ldd	r18, Y+35	; 0x23
    2806:	3c a1       	ldd	r19, Y+36	; 0x24
    2808:	25 30       	cpi	r18, 0x05	; 5
    280a:	31 05       	cpc	r19, r1
    280c:	09 f4       	brne	.+2      	; 0x2810 <HSSD2_enDisplayIntegerNumber+0x3b2>
    280e:	69 c0       	rjmp	.+210    	; 0x28e2 <HSSD2_enDisplayIntegerNumber+0x484>
    2810:	8b a1       	ldd	r24, Y+35	; 0x23
    2812:	9c a1       	ldd	r25, Y+36	; 0x24
    2814:	86 30       	cpi	r24, 0x06	; 6
    2816:	91 05       	cpc	r25, r1
    2818:	09 f4       	brne	.+2      	; 0x281c <HSSD2_enDisplayIntegerNumber+0x3be>
    281a:	74 c0       	rjmp	.+232    	; 0x2904 <HSSD2_enDisplayIntegerNumber+0x4a6>
    281c:	b6 c0       	rjmp	.+364    	; 0x298a <HSSD2_enDisplayIntegerNumber+0x52c>
    281e:	2b a1       	ldd	r18, Y+35	; 0x23
    2820:	3c a1       	ldd	r19, Y+36	; 0x24
    2822:	28 30       	cpi	r18, 0x08	; 8
    2824:	31 05       	cpc	r19, r1
    2826:	09 f4       	brne	.+2      	; 0x282a <HSSD2_enDisplayIntegerNumber+0x3cc>
    2828:	8f c0       	rjmp	.+286    	; 0x2948 <HSSD2_enDisplayIntegerNumber+0x4ea>
    282a:	8b a1       	ldd	r24, Y+35	; 0x23
    282c:	9c a1       	ldd	r25, Y+36	; 0x24
    282e:	89 30       	cpi	r24, 0x09	; 9
    2830:	91 05       	cpc	r25, r1
    2832:	09 f4       	brne	.+2      	; 0x2836 <HSSD2_enDisplayIntegerNumber+0x3d8>
    2834:	9a c0       	rjmp	.+308    	; 0x296a <HSSD2_enDisplayIntegerNumber+0x50c>
    2836:	a9 c0       	rjmp	.+338    	; 0x298a <HSSD2_enDisplayIntegerNumber+0x52c>
							{
					case 0 :
						MDIO_voidsetPinValue(HSSD2_A_PIN, LOW);
    2838:	84 e1       	ldi	r24, 0x14	; 20
    283a:	60 e0       	ldi	r22, 0x00	; 0
    283c:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
						MDIO_voidsetPinValue(HSSD2_B_PIN, LOW);
    2840:	85 e1       	ldi	r24, 0x15	; 21
    2842:	60 e0       	ldi	r22, 0x00	; 0
    2844:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
						MDIO_voidsetPinValue(HSSD2_C_PIN, LOW);
    2848:	86 e1       	ldi	r24, 0x16	; 22
    284a:	60 e0       	ldi	r22, 0x00	; 0
    284c:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
						MDIO_voidsetPinValue(HSSD2_D_PIN, LOW);
    2850:	88 e1       	ldi	r24, 0x18	; 24
    2852:	60 e0       	ldi	r22, 0x00	; 0
    2854:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
    2858:	98 c0       	rjmp	.+304    	; 0x298a <HSSD2_enDisplayIntegerNumber+0x52c>

						break;
					case 1 :
						MDIO_voidsetPinValue(HSSD2_A_PIN, HIGH);
    285a:	84 e1       	ldi	r24, 0x14	; 20
    285c:	61 e0       	ldi	r22, 0x01	; 1
    285e:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
						MDIO_voidsetPinValue(HSSD2_B_PIN, LOW);
    2862:	85 e1       	ldi	r24, 0x15	; 21
    2864:	60 e0       	ldi	r22, 0x00	; 0
    2866:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
						MDIO_voidsetPinValue(HSSD2_C_PIN, LOW);
    286a:	86 e1       	ldi	r24, 0x16	; 22
    286c:	60 e0       	ldi	r22, 0x00	; 0
    286e:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
						MDIO_voidsetPinValue(HSSD2_D_PIN, LOW);
    2872:	88 e1       	ldi	r24, 0x18	; 24
    2874:	60 e0       	ldi	r22, 0x00	; 0
    2876:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
    287a:	87 c0       	rjmp	.+270    	; 0x298a <HSSD2_enDisplayIntegerNumber+0x52c>

						break;
					case 2 :
						MDIO_voidsetPinValue(HSSD2_A_PIN, LOW);
    287c:	84 e1       	ldi	r24, 0x14	; 20
    287e:	60 e0       	ldi	r22, 0x00	; 0
    2880:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
						MDIO_voidsetPinValue(HSSD2_B_PIN, HIGH);
    2884:	85 e1       	ldi	r24, 0x15	; 21
    2886:	61 e0       	ldi	r22, 0x01	; 1
    2888:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
						MDIO_voidsetPinValue(HSSD2_C_PIN, LOW);
    288c:	86 e1       	ldi	r24, 0x16	; 22
    288e:	60 e0       	ldi	r22, 0x00	; 0
    2890:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
						MDIO_voidsetPinValue(HSSD2_D_PIN, LOW);
    2894:	88 e1       	ldi	r24, 0x18	; 24
    2896:	60 e0       	ldi	r22, 0x00	; 0
    2898:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
    289c:	76 c0       	rjmp	.+236    	; 0x298a <HSSD2_enDisplayIntegerNumber+0x52c>

						break;
					case 3 :
						MDIO_voidsetPinValue(HSSD2_A_PIN, HIGH);
    289e:	84 e1       	ldi	r24, 0x14	; 20
    28a0:	61 e0       	ldi	r22, 0x01	; 1
    28a2:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
						MDIO_voidsetPinValue(HSSD2_B_PIN, HIGH);
    28a6:	85 e1       	ldi	r24, 0x15	; 21
    28a8:	61 e0       	ldi	r22, 0x01	; 1
    28aa:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
						MDIO_voidsetPinValue(HSSD2_C_PIN, LOW);
    28ae:	86 e1       	ldi	r24, 0x16	; 22
    28b0:	60 e0       	ldi	r22, 0x00	; 0
    28b2:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
						MDIO_voidsetPinValue(HSSD2_D_PIN, LOW);
    28b6:	88 e1       	ldi	r24, 0x18	; 24
    28b8:	60 e0       	ldi	r22, 0x00	; 0
    28ba:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
    28be:	65 c0       	rjmp	.+202    	; 0x298a <HSSD2_enDisplayIntegerNumber+0x52c>

						break;
					case 4 :
						MDIO_voidsetPinValue(HSSD2_A_PIN, LOW);
    28c0:	84 e1       	ldi	r24, 0x14	; 20
    28c2:	60 e0       	ldi	r22, 0x00	; 0
    28c4:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
						MDIO_voidsetPinValue(HSSD2_B_PIN, LOW);
    28c8:	85 e1       	ldi	r24, 0x15	; 21
    28ca:	60 e0       	ldi	r22, 0x00	; 0
    28cc:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
						MDIO_voidsetPinValue(HSSD2_C_PIN, HIGH);
    28d0:	86 e1       	ldi	r24, 0x16	; 22
    28d2:	61 e0       	ldi	r22, 0x01	; 1
    28d4:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
						MDIO_voidsetPinValue(HSSD2_D_PIN, LOW);
    28d8:	88 e1       	ldi	r24, 0x18	; 24
    28da:	60 e0       	ldi	r22, 0x00	; 0
    28dc:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
    28e0:	54 c0       	rjmp	.+168    	; 0x298a <HSSD2_enDisplayIntegerNumber+0x52c>

						break;
					case 5 :
						MDIO_voidsetPinValue(HSSD2_A_PIN, HIGH);
    28e2:	84 e1       	ldi	r24, 0x14	; 20
    28e4:	61 e0       	ldi	r22, 0x01	; 1
    28e6:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
						MDIO_voidsetPinValue(HSSD2_B_PIN, LOW);
    28ea:	85 e1       	ldi	r24, 0x15	; 21
    28ec:	60 e0       	ldi	r22, 0x00	; 0
    28ee:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
						MDIO_voidsetPinValue(HSSD2_C_PIN, HIGH);
    28f2:	86 e1       	ldi	r24, 0x16	; 22
    28f4:	61 e0       	ldi	r22, 0x01	; 1
    28f6:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
						MDIO_voidsetPinValue(HSSD2_D_PIN, LOW);
    28fa:	88 e1       	ldi	r24, 0x18	; 24
    28fc:	60 e0       	ldi	r22, 0x00	; 0
    28fe:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
    2902:	43 c0       	rjmp	.+134    	; 0x298a <HSSD2_enDisplayIntegerNumber+0x52c>

						break;
					case 6 :
						MDIO_voidsetPinValue(HSSD2_A_PIN, LOW);
    2904:	84 e1       	ldi	r24, 0x14	; 20
    2906:	60 e0       	ldi	r22, 0x00	; 0
    2908:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
						MDIO_voidsetPinValue(HSSD2_B_PIN, HIGH);
    290c:	85 e1       	ldi	r24, 0x15	; 21
    290e:	61 e0       	ldi	r22, 0x01	; 1
    2910:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
						MDIO_voidsetPinValue(HSSD2_C_PIN, HIGH);
    2914:	86 e1       	ldi	r24, 0x16	; 22
    2916:	61 e0       	ldi	r22, 0x01	; 1
    2918:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
						MDIO_voidsetPinValue(HSSD2_D_PIN, LOW);
    291c:	88 e1       	ldi	r24, 0x18	; 24
    291e:	60 e0       	ldi	r22, 0x00	; 0
    2920:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
    2924:	32 c0       	rjmp	.+100    	; 0x298a <HSSD2_enDisplayIntegerNumber+0x52c>

						break;
					case 7 :
						MDIO_voidsetPinValue(HSSD2_A_PIN, HIGH);
    2926:	84 e1       	ldi	r24, 0x14	; 20
    2928:	61 e0       	ldi	r22, 0x01	; 1
    292a:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
						MDIO_voidsetPinValue(HSSD2_B_PIN, HIGH);
    292e:	85 e1       	ldi	r24, 0x15	; 21
    2930:	61 e0       	ldi	r22, 0x01	; 1
    2932:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
						MDIO_voidsetPinValue(HSSD2_C_PIN, HIGH);
    2936:	86 e1       	ldi	r24, 0x16	; 22
    2938:	61 e0       	ldi	r22, 0x01	; 1
    293a:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
						MDIO_voidsetPinValue(HSSD2_D_PIN, LOW);
    293e:	88 e1       	ldi	r24, 0x18	; 24
    2940:	60 e0       	ldi	r22, 0x00	; 0
    2942:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
    2946:	21 c0       	rjmp	.+66     	; 0x298a <HSSD2_enDisplayIntegerNumber+0x52c>

						break;
					case 8 :
						MDIO_voidsetPinValue(HSSD2_A_PIN, LOW);
    2948:	84 e1       	ldi	r24, 0x14	; 20
    294a:	60 e0       	ldi	r22, 0x00	; 0
    294c:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
						MDIO_voidsetPinValue(HSSD2_B_PIN, LOW);
    2950:	85 e1       	ldi	r24, 0x15	; 21
    2952:	60 e0       	ldi	r22, 0x00	; 0
    2954:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
						MDIO_voidsetPinValue(HSSD2_C_PIN, LOW);
    2958:	86 e1       	ldi	r24, 0x16	; 22
    295a:	60 e0       	ldi	r22, 0x00	; 0
    295c:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
						MDIO_voidsetPinValue(HSSD2_D_PIN, HIGH);
    2960:	88 e1       	ldi	r24, 0x18	; 24
    2962:	61 e0       	ldi	r22, 0x01	; 1
    2964:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
    2968:	10 c0       	rjmp	.+32     	; 0x298a <HSSD2_enDisplayIntegerNumber+0x52c>

						break;
					case 9 :
						MDIO_voidsetPinValue(HSSD2_A_PIN, HIGH);
    296a:	84 e1       	ldi	r24, 0x14	; 20
    296c:	61 e0       	ldi	r22, 0x01	; 1
    296e:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
						MDIO_voidsetPinValue(HSSD2_B_PIN, LOW);
    2972:	85 e1       	ldi	r24, 0x15	; 21
    2974:	60 e0       	ldi	r22, 0x00	; 0
    2976:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
						MDIO_voidsetPinValue(HSSD2_C_PIN, LOW);
    297a:	86 e1       	ldi	r24, 0x16	; 22
    297c:	60 e0       	ldi	r22, 0x00	; 0
    297e:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
						MDIO_voidsetPinValue(HSSD2_D_PIN, HIGH);
    2982:	88 e1       	ldi	r24, 0x18	; 24
    2984:	61 e0       	ldi	r22, 0x01	; 1
    2986:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>

						break;
					default : break;
							}
					//DISABLE DIGIT 1
					MDIO_voidsetPinValue(HSSD_COMM1_PIN, HIGH);
    298a:	8d e0       	ldi	r24, 0x0D	; 13
    298c:	61 e0       	ldi	r22, 0x01	; 1
    298e:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
					//ENABLE DIGIT 2
					MDIO_voidsetPinValue(HSSD_COMM2_PIN, LOW);
    2992:	8c e0       	ldi	r24, 0x0C	; 12
    2994:	60 e0       	ldi	r22, 0x00	; 0
    2996:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
    299a:	80 e0       	ldi	r24, 0x00	; 0
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	a0 e8       	ldi	r26, 0x80	; 128
    29a0:	bf e3       	ldi	r27, 0x3F	; 63
    29a2:	8b 87       	std	Y+11, r24	; 0x0b
    29a4:	9c 87       	std	Y+12, r25	; 0x0c
    29a6:	ad 87       	std	Y+13, r26	; 0x0d
    29a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    29ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    29ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    29b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    29b2:	20 e0       	ldi	r18, 0x00	; 0
    29b4:	30 e0       	ldi	r19, 0x00	; 0
    29b6:	4a e7       	ldi	r20, 0x7A	; 122
    29b8:	55 e4       	ldi	r21, 0x45	; 69
    29ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29be:	dc 01       	movw	r26, r24
    29c0:	cb 01       	movw	r24, r22
    29c2:	8f 83       	std	Y+7, r24	; 0x07
    29c4:	98 87       	std	Y+8, r25	; 0x08
    29c6:	a9 87       	std	Y+9, r26	; 0x09
    29c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29ca:	6f 81       	ldd	r22, Y+7	; 0x07
    29cc:	78 85       	ldd	r23, Y+8	; 0x08
    29ce:	89 85       	ldd	r24, Y+9	; 0x09
    29d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    29d2:	20 e0       	ldi	r18, 0x00	; 0
    29d4:	30 e0       	ldi	r19, 0x00	; 0
    29d6:	40 e8       	ldi	r20, 0x80	; 128
    29d8:	5f e3       	ldi	r21, 0x3F	; 63
    29da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29de:	88 23       	and	r24, r24
    29e0:	2c f4       	brge	.+10     	; 0x29ec <HSSD2_enDisplayIntegerNumber+0x58e>
		__ticks = 1;
    29e2:	81 e0       	ldi	r24, 0x01	; 1
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	9e 83       	std	Y+6, r25	; 0x06
    29e8:	8d 83       	std	Y+5, r24	; 0x05
    29ea:	3f c0       	rjmp	.+126    	; 0x2a6a <HSSD2_enDisplayIntegerNumber+0x60c>
	else if (__tmp > 65535)
    29ec:	6f 81       	ldd	r22, Y+7	; 0x07
    29ee:	78 85       	ldd	r23, Y+8	; 0x08
    29f0:	89 85       	ldd	r24, Y+9	; 0x09
    29f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    29f4:	20 e0       	ldi	r18, 0x00	; 0
    29f6:	3f ef       	ldi	r19, 0xFF	; 255
    29f8:	4f e7       	ldi	r20, 0x7F	; 127
    29fa:	57 e4       	ldi	r21, 0x47	; 71
    29fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a00:	18 16       	cp	r1, r24
    2a02:	4c f5       	brge	.+82     	; 0x2a56 <HSSD2_enDisplayIntegerNumber+0x5f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a04:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a06:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a08:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a0c:	20 e0       	ldi	r18, 0x00	; 0
    2a0e:	30 e0       	ldi	r19, 0x00	; 0
    2a10:	40 e2       	ldi	r20, 0x20	; 32
    2a12:	51 e4       	ldi	r21, 0x41	; 65
    2a14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a18:	dc 01       	movw	r26, r24
    2a1a:	cb 01       	movw	r24, r22
    2a1c:	bc 01       	movw	r22, r24
    2a1e:	cd 01       	movw	r24, r26
    2a20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a24:	dc 01       	movw	r26, r24
    2a26:	cb 01       	movw	r24, r22
    2a28:	9e 83       	std	Y+6, r25	; 0x06
    2a2a:	8d 83       	std	Y+5, r24	; 0x05
    2a2c:	0f c0       	rjmp	.+30     	; 0x2a4c <HSSD2_enDisplayIntegerNumber+0x5ee>
    2a2e:	80 e9       	ldi	r24, 0x90	; 144
    2a30:	91 e0       	ldi	r25, 0x01	; 1
    2a32:	9c 83       	std	Y+4, r25	; 0x04
    2a34:	8b 83       	std	Y+3, r24	; 0x03
    2a36:	8b 81       	ldd	r24, Y+3	; 0x03
    2a38:	9c 81       	ldd	r25, Y+4	; 0x04
    2a3a:	01 97       	sbiw	r24, 0x01	; 1
    2a3c:	f1 f7       	brne	.-4      	; 0x2a3a <HSSD2_enDisplayIntegerNumber+0x5dc>
    2a3e:	9c 83       	std	Y+4, r25	; 0x04
    2a40:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a42:	8d 81       	ldd	r24, Y+5	; 0x05
    2a44:	9e 81       	ldd	r25, Y+6	; 0x06
    2a46:	01 97       	sbiw	r24, 0x01	; 1
    2a48:	9e 83       	std	Y+6, r25	; 0x06
    2a4a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a4c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a4e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a50:	00 97       	sbiw	r24, 0x00	; 0
    2a52:	69 f7       	brne	.-38     	; 0x2a2e <HSSD2_enDisplayIntegerNumber+0x5d0>
    2a54:	14 c0       	rjmp	.+40     	; 0x2a7e <HSSD2_enDisplayIntegerNumber+0x620>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a56:	6f 81       	ldd	r22, Y+7	; 0x07
    2a58:	78 85       	ldd	r23, Y+8	; 0x08
    2a5a:	89 85       	ldd	r24, Y+9	; 0x09
    2a5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a62:	dc 01       	movw	r26, r24
    2a64:	cb 01       	movw	r24, r22
    2a66:	9e 83       	std	Y+6, r25	; 0x06
    2a68:	8d 83       	std	Y+5, r24	; 0x05
    2a6a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a6c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a6e:	9a 83       	std	Y+2, r25	; 0x02
    2a70:	89 83       	std	Y+1, r24	; 0x01
    2a72:	89 81       	ldd	r24, Y+1	; 0x01
    2a74:	9a 81       	ldd	r25, Y+2	; 0x02
    2a76:	01 97       	sbiw	r24, 0x01	; 1
    2a78:	f1 f7       	brne	.-4      	; 0x2a76 <HSSD2_enDisplayIntegerNumber+0x618>
    2a7a:	9a 83       	std	Y+2, r25	; 0x02
    2a7c:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(1);
					MDIO_voidsetPinValue(HSSD_COMM2_PIN, HIGH);
    2a7e:	8c e0       	ldi	r24, 0x0C	; 12
    2a80:	61 e0       	ldi	r22, 0x01	; 1
    2a82:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
	{ // <=99
		u8 Local_u8Uints = copy_u8Number % 10;
		u8 Local_u8Tens  = copy_u8Number / 10;
		u16 i;

		for(i=0;i<HSSD2_DISPLAY_TIME;i++)
    2a86:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a88:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a8a:	01 96       	adiw	r24, 0x01	; 1
    2a8c:	9e 8f       	std	Y+30, r25	; 0x1e
    2a8e:	8d 8f       	std	Y+29, r24	; 0x1d
    2a90:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a92:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a94:	8a 3f       	cpi	r24, 0xFA	; 250
    2a96:	91 05       	cpc	r25, r1
    2a98:	08 f4       	brcc	.+2      	; 0x2a9c <HSSD2_enDisplayIntegerNumber+0x63e>
    2a9a:	03 cd       	rjmp	.-1530   	; 0x24a2 <HSSD2_enDisplayIntegerNumber+0x44>
					_delay_ms(1);
					MDIO_voidsetPinValue(HSSD_COMM2_PIN, HIGH);
		} //tens switch

	} //else
	return Local_enState;
    2a9c:	89 a1       	ldd	r24, Y+33	; 0x21
}
    2a9e:	a6 96       	adiw	r28, 0x26	; 38
    2aa0:	0f b6       	in	r0, 0x3f	; 63
    2aa2:	f8 94       	cli
    2aa4:	de bf       	out	0x3e, r29	; 62
    2aa6:	0f be       	out	0x3f, r0	; 63
    2aa8:	cd bf       	out	0x3d, r28	; 61
    2aaa:	cf 91       	pop	r28
    2aac:	df 91       	pop	r29
    2aae:	08 95       	ret

00002ab0 <HPB_enInit>:
#include"HPB_config.h"
#include"HPB_int.h"

ErrorState_t HPB_enInit(const PB_t * ptrPB)

{
    2ab0:	df 93       	push	r29
    2ab2:	cf 93       	push	r28
    2ab4:	00 d0       	rcall	.+0      	; 0x2ab6 <HPB_enInit+0x6>
    2ab6:	0f 92       	push	r0
    2ab8:	cd b7       	in	r28, 0x3d	; 61
    2aba:	de b7       	in	r29, 0x3e	; 62
    2abc:	9b 83       	std	Y+3, r25	; 0x03
    2abe:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_enState= SUCCESS;
    2ac0:	82 e0       	ldi	r24, 0x02	; 2
    2ac2:	89 83       	std	Y+1, r24	; 0x01
	if(ptrPB->PushButtonID>=1 && ptrPB->PushButtonID<=4)
    2ac4:	ea 81       	ldd	r30, Y+2	; 0x02
    2ac6:	fb 81       	ldd	r31, Y+3	; 0x03
    2ac8:	80 81       	ld	r24, Z
    2aca:	88 23       	and	r24, r24
    2acc:	91 f0       	breq	.+36     	; 0x2af2 <HPB_enInit+0x42>
    2ace:	ea 81       	ldd	r30, Y+2	; 0x02
    2ad0:	fb 81       	ldd	r31, Y+3	; 0x03
    2ad2:	80 81       	ld	r24, Z
    2ad4:	85 30       	cpi	r24, 0x05	; 5
    2ad6:	68 f4       	brcc	.+26     	; 0x2af2 <HPB_enInit+0x42>
	{
		MDIO_voidsetPinDirection(ptrPB->PushButtonPin, INPUT);
    2ad8:	ea 81       	ldd	r30, Y+2	; 0x02
    2ada:	fb 81       	ldd	r31, Y+3	; 0x03
    2adc:	81 81       	ldd	r24, Z+1	; 0x01
    2ade:	60 e0       	ldi	r22, 0x00	; 0
    2ae0:	0e 94 27 09 	call	0x124e	; 0x124e <MDIO_voidsetPinDirection>

		#if(KIT_TYPE == SIM_KIT)
			MDIO_voidsetPinValue(ptrPB->PushButtonPin, HIGH);
    2ae4:	ea 81       	ldd	r30, Y+2	; 0x02
    2ae6:	fb 81       	ldd	r31, Y+3	; 0x03
    2ae8:	81 81       	ldd	r24, Z+1	; 0x01
    2aea:	61 e0       	ldi	r22, 0x01	; 1
    2aec:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
    2af0:	01 c0       	rjmp	.+2      	; 0x2af4 <HPB_enInit+0x44>
		#endif
	}
	else
	{
		Local_enState = OUT_OF_RANGE_ERR;
    2af2:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_enState;
    2af4:	89 81       	ldd	r24, Y+1	; 0x01
}
    2af6:	0f 90       	pop	r0
    2af8:	0f 90       	pop	r0
    2afa:	0f 90       	pop	r0
    2afc:	cf 91       	pop	r28
    2afe:	df 91       	pop	r29
    2b00:	08 95       	ret

00002b02 <HPB_enRead>:

ErrorState_t HPB_enRead(const PB_t * ptrPB,PBState_t  * ptrPBState    )
{
    2b02:	df 93       	push	r29
    2b04:	cf 93       	push	r28
    2b06:	cd b7       	in	r28, 0x3d	; 61
    2b08:	de b7       	in	r29, 0x3e	; 62
    2b0a:	64 97       	sbiw	r28, 0x14	; 20
    2b0c:	0f b6       	in	r0, 0x3f	; 63
    2b0e:	f8 94       	cli
    2b10:	de bf       	out	0x3e, r29	; 62
    2b12:	0f be       	out	0x3f, r0	; 63
    2b14:	cd bf       	out	0x3d, r28	; 61
    2b16:	9a 8b       	std	Y+18, r25	; 0x12
    2b18:	89 8b       	std	Y+17, r24	; 0x11
    2b1a:	7c 8b       	std	Y+20, r23	; 0x14
    2b1c:	6b 8b       	std	Y+19, r22	; 0x13
	ErrorState_t  Local_enState = SUCCESS;
    2b1e:	82 e0       	ldi	r24, 0x02	; 2
    2b20:	8f 87       	std	Y+15, r24	; 0x0f
	u8 Local_u8PinRead = PB_RELEASED;
    2b22:	81 e0       	ldi	r24, 0x01	; 1
    2b24:	88 8b       	std	Y+16, r24	; 0x10
	// first read
	MDIO_voidgetPinValue(ptrPB->PushButtonPin, &Local_u8PinRead); // 0
    2b26:	e9 89       	ldd	r30, Y+17	; 0x11
    2b28:	fa 89       	ldd	r31, Y+18	; 0x12
    2b2a:	81 81       	ldd	r24, Z+1	; 0x01
    2b2c:	9e 01       	movw	r18, r28
    2b2e:	20 5f       	subi	r18, 0xF0	; 240
    2b30:	3f 4f       	sbci	r19, 0xFF	; 255
    2b32:	b9 01       	movw	r22, r18
    2b34:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <MDIO_voidgetPinValue>
	if(Local_u8PinRead == PB_PRESSED)
    2b38:	88 89       	ldd	r24, Y+16	; 0x10
    2b3a:	88 23       	and	r24, r24
    2b3c:	09 f0       	breq	.+2      	; 0x2b40 <HPB_enRead+0x3e>
    2b3e:	94 c0       	rjmp	.+296    	; 0x2c68 <HPB_enRead+0x166>
    2b40:	80 e0       	ldi	r24, 0x00	; 0
    2b42:	90 e0       	ldi	r25, 0x00	; 0
    2b44:	a0 ea       	ldi	r26, 0xA0	; 160
    2b46:	b1 e4       	ldi	r27, 0x41	; 65
    2b48:	8b 87       	std	Y+11, r24	; 0x0b
    2b4a:	9c 87       	std	Y+12, r25	; 0x0c
    2b4c:	ad 87       	std	Y+13, r26	; 0x0d
    2b4e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b50:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b52:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b54:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b56:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b58:	20 e0       	ldi	r18, 0x00	; 0
    2b5a:	30 e0       	ldi	r19, 0x00	; 0
    2b5c:	4a e7       	ldi	r20, 0x7A	; 122
    2b5e:	55 e4       	ldi	r21, 0x45	; 69
    2b60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b64:	dc 01       	movw	r26, r24
    2b66:	cb 01       	movw	r24, r22
    2b68:	8f 83       	std	Y+7, r24	; 0x07
    2b6a:	98 87       	std	Y+8, r25	; 0x08
    2b6c:	a9 87       	std	Y+9, r26	; 0x09
    2b6e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b70:	6f 81       	ldd	r22, Y+7	; 0x07
    2b72:	78 85       	ldd	r23, Y+8	; 0x08
    2b74:	89 85       	ldd	r24, Y+9	; 0x09
    2b76:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b78:	20 e0       	ldi	r18, 0x00	; 0
    2b7a:	30 e0       	ldi	r19, 0x00	; 0
    2b7c:	40 e8       	ldi	r20, 0x80	; 128
    2b7e:	5f e3       	ldi	r21, 0x3F	; 63
    2b80:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b84:	88 23       	and	r24, r24
    2b86:	2c f4       	brge	.+10     	; 0x2b92 <HPB_enRead+0x90>
		__ticks = 1;
    2b88:	81 e0       	ldi	r24, 0x01	; 1
    2b8a:	90 e0       	ldi	r25, 0x00	; 0
    2b8c:	9e 83       	std	Y+6, r25	; 0x06
    2b8e:	8d 83       	std	Y+5, r24	; 0x05
    2b90:	3f c0       	rjmp	.+126    	; 0x2c10 <HPB_enRead+0x10e>
	else if (__tmp > 65535)
    2b92:	6f 81       	ldd	r22, Y+7	; 0x07
    2b94:	78 85       	ldd	r23, Y+8	; 0x08
    2b96:	89 85       	ldd	r24, Y+9	; 0x09
    2b98:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b9a:	20 e0       	ldi	r18, 0x00	; 0
    2b9c:	3f ef       	ldi	r19, 0xFF	; 255
    2b9e:	4f e7       	ldi	r20, 0x7F	; 127
    2ba0:	57 e4       	ldi	r21, 0x47	; 71
    2ba2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ba6:	18 16       	cp	r1, r24
    2ba8:	4c f5       	brge	.+82     	; 0x2bfc <HPB_enRead+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2baa:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bac:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bae:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bb0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bb2:	20 e0       	ldi	r18, 0x00	; 0
    2bb4:	30 e0       	ldi	r19, 0x00	; 0
    2bb6:	40 e2       	ldi	r20, 0x20	; 32
    2bb8:	51 e4       	ldi	r21, 0x41	; 65
    2bba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bbe:	dc 01       	movw	r26, r24
    2bc0:	cb 01       	movw	r24, r22
    2bc2:	bc 01       	movw	r22, r24
    2bc4:	cd 01       	movw	r24, r26
    2bc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bca:	dc 01       	movw	r26, r24
    2bcc:	cb 01       	movw	r24, r22
    2bce:	9e 83       	std	Y+6, r25	; 0x06
    2bd0:	8d 83       	std	Y+5, r24	; 0x05
    2bd2:	0f c0       	rjmp	.+30     	; 0x2bf2 <HPB_enRead+0xf0>
    2bd4:	80 e9       	ldi	r24, 0x90	; 144
    2bd6:	91 e0       	ldi	r25, 0x01	; 1
    2bd8:	9c 83       	std	Y+4, r25	; 0x04
    2bda:	8b 83       	std	Y+3, r24	; 0x03
    2bdc:	8b 81       	ldd	r24, Y+3	; 0x03
    2bde:	9c 81       	ldd	r25, Y+4	; 0x04
    2be0:	01 97       	sbiw	r24, 0x01	; 1
    2be2:	f1 f7       	brne	.-4      	; 0x2be0 <HPB_enRead+0xde>
    2be4:	9c 83       	std	Y+4, r25	; 0x04
    2be6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2be8:	8d 81       	ldd	r24, Y+5	; 0x05
    2bea:	9e 81       	ldd	r25, Y+6	; 0x06
    2bec:	01 97       	sbiw	r24, 0x01	; 1
    2bee:	9e 83       	std	Y+6, r25	; 0x06
    2bf0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bf2:	8d 81       	ldd	r24, Y+5	; 0x05
    2bf4:	9e 81       	ldd	r25, Y+6	; 0x06
    2bf6:	00 97       	sbiw	r24, 0x00	; 0
    2bf8:	69 f7       	brne	.-38     	; 0x2bd4 <HPB_enRead+0xd2>
    2bfa:	14 c0       	rjmp	.+40     	; 0x2c24 <HPB_enRead+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bfc:	6f 81       	ldd	r22, Y+7	; 0x07
    2bfe:	78 85       	ldd	r23, Y+8	; 0x08
    2c00:	89 85       	ldd	r24, Y+9	; 0x09
    2c02:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c08:	dc 01       	movw	r26, r24
    2c0a:	cb 01       	movw	r24, r22
    2c0c:	9e 83       	std	Y+6, r25	; 0x06
    2c0e:	8d 83       	std	Y+5, r24	; 0x05
    2c10:	8d 81       	ldd	r24, Y+5	; 0x05
    2c12:	9e 81       	ldd	r25, Y+6	; 0x06
    2c14:	9a 83       	std	Y+2, r25	; 0x02
    2c16:	89 83       	std	Y+1, r24	; 0x01
    2c18:	89 81       	ldd	r24, Y+1	; 0x01
    2c1a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c1c:	01 97       	sbiw	r24, 0x01	; 1
    2c1e:	f1 f7       	brne	.-4      	; 0x2c1c <HPB_enRead+0x11a>
    2c20:	9a 83       	std	Y+2, r25	; 0x02
    2c22:	89 83       	std	Y+1, r24	; 0x01
	{
		// for debouncing
		_delay_ms(20);
		// Second Read
		MDIO_voidgetPinValue(ptrPB->PushButtonPin, &Local_u8PinRead);//1
    2c24:	e9 89       	ldd	r30, Y+17	; 0x11
    2c26:	fa 89       	ldd	r31, Y+18	; 0x12
    2c28:	81 81       	ldd	r24, Z+1	; 0x01
    2c2a:	9e 01       	movw	r18, r28
    2c2c:	20 5f       	subi	r18, 0xF0	; 240
    2c2e:	3f 4f       	sbci	r19, 0xFF	; 255
    2c30:	b9 01       	movw	r22, r18
    2c32:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <MDIO_voidgetPinValue>
		if(Local_u8PinRead == PB_PRESSED)
    2c36:	88 89       	ldd	r24, Y+16	; 0x10
    2c38:	88 23       	and	r24, r24
    2c3a:	89 f4       	brne	.+34     	; 0x2c5e <HPB_enRead+0x15c>
    2c3c:	09 c0       	rjmp	.+18     	; 0x2c50 <HPB_enRead+0x14e>
		{
			// for Single Press
			while(Local_u8PinRead == PB_PRESSED)
			{
				MDIO_voidgetPinValue(ptrPB->PushButtonPin, &Local_u8PinRead);
    2c3e:	e9 89       	ldd	r30, Y+17	; 0x11
    2c40:	fa 89       	ldd	r31, Y+18	; 0x12
    2c42:	81 81       	ldd	r24, Z+1	; 0x01
    2c44:	9e 01       	movw	r18, r28
    2c46:	20 5f       	subi	r18, 0xF0	; 240
    2c48:	3f 4f       	sbci	r19, 0xFF	; 255
    2c4a:	b9 01       	movw	r22, r18
    2c4c:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <MDIO_voidgetPinValue>
		// Second Read
		MDIO_voidgetPinValue(ptrPB->PushButtonPin, &Local_u8PinRead);//1
		if(Local_u8PinRead == PB_PRESSED)
		{
			// for Single Press
			while(Local_u8PinRead == PB_PRESSED)
    2c50:	88 89       	ldd	r24, Y+16	; 0x10
    2c52:	88 23       	and	r24, r24
    2c54:	a1 f3       	breq	.-24     	; 0x2c3e <HPB_enRead+0x13c>
			{
				MDIO_voidgetPinValue(ptrPB->PushButtonPin, &Local_u8PinRead);

			}
			*ptrPBState = PB_PRESSED;
    2c56:	eb 89       	ldd	r30, Y+19	; 0x13
    2c58:	fc 89       	ldd	r31, Y+20	; 0x14
    2c5a:	10 82       	st	Z, r1
    2c5c:	09 c0       	rjmp	.+18     	; 0x2c70 <HPB_enRead+0x16e>
		}// if second read
		else
		{
			*ptrPBState = PB_RELEASED;
    2c5e:	eb 89       	ldd	r30, Y+19	; 0x13
    2c60:	fc 89       	ldd	r31, Y+20	; 0x14
    2c62:	81 e0       	ldi	r24, 0x01	; 1
    2c64:	80 83       	st	Z, r24
    2c66:	04 c0       	rjmp	.+8      	; 0x2c70 <HPB_enRead+0x16e>
		}
	}// if first read
	else
	{
		*ptrPBState = PB_RELEASED;
    2c68:	eb 89       	ldd	r30, Y+19	; 0x13
    2c6a:	fc 89       	ldd	r31, Y+20	; 0x14
    2c6c:	81 e0       	ldi	r24, 0x01	; 1
    2c6e:	80 83       	st	Z, r24
	}
	return Local_enState;
    2c70:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    2c72:	64 96       	adiw	r28, 0x14	; 20
    2c74:	0f b6       	in	r0, 0x3f	; 63
    2c76:	f8 94       	cli
    2c78:	de bf       	out	0x3e, r29	; 62
    2c7a:	0f be       	out	0x3f, r0	; 63
    2c7c:	cd bf       	out	0x3d, r28	; 61
    2c7e:	cf 91       	pop	r28
    2c80:	df 91       	pop	r29
    2c82:	08 95       	ret

00002c84 <HPB_enRead2>:


u8 HPB_enRead2(u8 copy_PinID)
{
    2c84:	df 93       	push	r29
    2c86:	cf 93       	push	r28
    2c88:	cd b7       	in	r28, 0x3d	; 61
    2c8a:	de b7       	in	r29, 0x3e	; 62
    2c8c:	60 97       	sbiw	r28, 0x10	; 16
    2c8e:	0f b6       	in	r0, 0x3f	; 63
    2c90:	f8 94       	cli
    2c92:	de bf       	out	0x3e, r29	; 62
    2c94:	0f be       	out	0x3f, r0	; 63
    2c96:	cd bf       	out	0x3d, r28	; 61
    2c98:	88 8b       	std	Y+16, r24	; 0x10

	u8 Value = PB_RELEASED;
    2c9a:	81 e0       	ldi	r24, 0x01	; 1
    2c9c:	8f 87       	std	Y+15, r24	; 0x0f
	// first read
	MDIO_voidgetPinValue(copy_PinID, &Value); // 0
    2c9e:	9e 01       	movw	r18, r28
    2ca0:	21 5f       	subi	r18, 0xF1	; 241
    2ca2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ca4:	88 89       	ldd	r24, Y+16	; 0x10
    2ca6:	b9 01       	movw	r22, r18
    2ca8:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <MDIO_voidgetPinValue>
	if(Value == PB_PRESSED)
    2cac:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cae:	88 23       	and	r24, r24
    2cb0:	09 f0       	breq	.+2      	; 0x2cb4 <HPB_enRead2+0x30>
    2cb2:	8c c0       	rjmp	.+280    	; 0x2dcc <HPB_enRead2+0x148>
    2cb4:	80 e0       	ldi	r24, 0x00	; 0
    2cb6:	90 e0       	ldi	r25, 0x00	; 0
    2cb8:	a0 ea       	ldi	r26, 0xA0	; 160
    2cba:	b1 e4       	ldi	r27, 0x41	; 65
    2cbc:	8b 87       	std	Y+11, r24	; 0x0b
    2cbe:	9c 87       	std	Y+12, r25	; 0x0c
    2cc0:	ad 87       	std	Y+13, r26	; 0x0d
    2cc2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cc4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cc6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cc8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cca:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ccc:	20 e0       	ldi	r18, 0x00	; 0
    2cce:	30 e0       	ldi	r19, 0x00	; 0
    2cd0:	4a e7       	ldi	r20, 0x7A	; 122
    2cd2:	55 e4       	ldi	r21, 0x45	; 69
    2cd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cd8:	dc 01       	movw	r26, r24
    2cda:	cb 01       	movw	r24, r22
    2cdc:	8f 83       	std	Y+7, r24	; 0x07
    2cde:	98 87       	std	Y+8, r25	; 0x08
    2ce0:	a9 87       	std	Y+9, r26	; 0x09
    2ce2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ce4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ce6:	78 85       	ldd	r23, Y+8	; 0x08
    2ce8:	89 85       	ldd	r24, Y+9	; 0x09
    2cea:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cec:	20 e0       	ldi	r18, 0x00	; 0
    2cee:	30 e0       	ldi	r19, 0x00	; 0
    2cf0:	40 e8       	ldi	r20, 0x80	; 128
    2cf2:	5f e3       	ldi	r21, 0x3F	; 63
    2cf4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cf8:	88 23       	and	r24, r24
    2cfa:	2c f4       	brge	.+10     	; 0x2d06 <HPB_enRead2+0x82>
		__ticks = 1;
    2cfc:	81 e0       	ldi	r24, 0x01	; 1
    2cfe:	90 e0       	ldi	r25, 0x00	; 0
    2d00:	9e 83       	std	Y+6, r25	; 0x06
    2d02:	8d 83       	std	Y+5, r24	; 0x05
    2d04:	3f c0       	rjmp	.+126    	; 0x2d84 <HPB_enRead2+0x100>
	else if (__tmp > 65535)
    2d06:	6f 81       	ldd	r22, Y+7	; 0x07
    2d08:	78 85       	ldd	r23, Y+8	; 0x08
    2d0a:	89 85       	ldd	r24, Y+9	; 0x09
    2d0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d0e:	20 e0       	ldi	r18, 0x00	; 0
    2d10:	3f ef       	ldi	r19, 0xFF	; 255
    2d12:	4f e7       	ldi	r20, 0x7F	; 127
    2d14:	57 e4       	ldi	r21, 0x47	; 71
    2d16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d1a:	18 16       	cp	r1, r24
    2d1c:	4c f5       	brge	.+82     	; 0x2d70 <HPB_enRead2+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d20:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d22:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d24:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d26:	20 e0       	ldi	r18, 0x00	; 0
    2d28:	30 e0       	ldi	r19, 0x00	; 0
    2d2a:	40 e2       	ldi	r20, 0x20	; 32
    2d2c:	51 e4       	ldi	r21, 0x41	; 65
    2d2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d32:	dc 01       	movw	r26, r24
    2d34:	cb 01       	movw	r24, r22
    2d36:	bc 01       	movw	r22, r24
    2d38:	cd 01       	movw	r24, r26
    2d3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d3e:	dc 01       	movw	r26, r24
    2d40:	cb 01       	movw	r24, r22
    2d42:	9e 83       	std	Y+6, r25	; 0x06
    2d44:	8d 83       	std	Y+5, r24	; 0x05
    2d46:	0f c0       	rjmp	.+30     	; 0x2d66 <HPB_enRead2+0xe2>
    2d48:	80 e9       	ldi	r24, 0x90	; 144
    2d4a:	91 e0       	ldi	r25, 0x01	; 1
    2d4c:	9c 83       	std	Y+4, r25	; 0x04
    2d4e:	8b 83       	std	Y+3, r24	; 0x03
    2d50:	8b 81       	ldd	r24, Y+3	; 0x03
    2d52:	9c 81       	ldd	r25, Y+4	; 0x04
    2d54:	01 97       	sbiw	r24, 0x01	; 1
    2d56:	f1 f7       	brne	.-4      	; 0x2d54 <HPB_enRead2+0xd0>
    2d58:	9c 83       	std	Y+4, r25	; 0x04
    2d5a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d5c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d5e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d60:	01 97       	sbiw	r24, 0x01	; 1
    2d62:	9e 83       	std	Y+6, r25	; 0x06
    2d64:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d66:	8d 81       	ldd	r24, Y+5	; 0x05
    2d68:	9e 81       	ldd	r25, Y+6	; 0x06
    2d6a:	00 97       	sbiw	r24, 0x00	; 0
    2d6c:	69 f7       	brne	.-38     	; 0x2d48 <HPB_enRead2+0xc4>
    2d6e:	14 c0       	rjmp	.+40     	; 0x2d98 <HPB_enRead2+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d70:	6f 81       	ldd	r22, Y+7	; 0x07
    2d72:	78 85       	ldd	r23, Y+8	; 0x08
    2d74:	89 85       	ldd	r24, Y+9	; 0x09
    2d76:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d7c:	dc 01       	movw	r26, r24
    2d7e:	cb 01       	movw	r24, r22
    2d80:	9e 83       	std	Y+6, r25	; 0x06
    2d82:	8d 83       	std	Y+5, r24	; 0x05
    2d84:	8d 81       	ldd	r24, Y+5	; 0x05
    2d86:	9e 81       	ldd	r25, Y+6	; 0x06
    2d88:	9a 83       	std	Y+2, r25	; 0x02
    2d8a:	89 83       	std	Y+1, r24	; 0x01
    2d8c:	89 81       	ldd	r24, Y+1	; 0x01
    2d8e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d90:	01 97       	sbiw	r24, 0x01	; 1
    2d92:	f1 f7       	brne	.-4      	; 0x2d90 <HPB_enRead2+0x10c>
    2d94:	9a 83       	std	Y+2, r25	; 0x02
    2d96:	89 83       	std	Y+1, r24	; 0x01
	{
		// for debouncing
		_delay_ms(20);
		// Second Read
		MDIO_voidgetPinValue(copy_PinID, &Value);//1
    2d98:	9e 01       	movw	r18, r28
    2d9a:	21 5f       	subi	r18, 0xF1	; 241
    2d9c:	3f 4f       	sbci	r19, 0xFF	; 255
    2d9e:	88 89       	ldd	r24, Y+16	; 0x10
    2da0:	b9 01       	movw	r22, r18
    2da2:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <MDIO_voidgetPinValue>
		if(Value == PB_PRESSED)
    2da6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2da8:	88 23       	and	r24, r24
    2daa:	69 f4       	brne	.+26     	; 0x2dc6 <HPB_enRead2+0x142>
    2dac:	07 c0       	rjmp	.+14     	; 0x2dbc <HPB_enRead2+0x138>
		{
			// for Single Press
			while(Value == PB_PRESSED)
			{
				MDIO_voidgetPinValue(copy_PinID, &Value);
    2dae:	9e 01       	movw	r18, r28
    2db0:	21 5f       	subi	r18, 0xF1	; 241
    2db2:	3f 4f       	sbci	r19, 0xFF	; 255
    2db4:	88 89       	ldd	r24, Y+16	; 0x10
    2db6:	b9 01       	movw	r22, r18
    2db8:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <MDIO_voidgetPinValue>
		// Second Read
		MDIO_voidgetPinValue(copy_PinID, &Value);//1
		if(Value == PB_PRESSED)
		{
			// for Single Press
			while(Value == PB_PRESSED)
    2dbc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dbe:	88 23       	and	r24, r24
    2dc0:	b1 f3       	breq	.-20     	; 0x2dae <HPB_enRead2+0x12a>
			{
				MDIO_voidgetPinValue(copy_PinID, &Value);
			}
			Value = PB_PRESSED;
    2dc2:	1f 86       	std	Y+15, r1	; 0x0f
    2dc4:	05 c0       	rjmp	.+10     	; 0x2dd0 <HPB_enRead2+0x14c>
		}// if second read
		else
		{
			Value = PB_RELEASED;
    2dc6:	81 e0       	ldi	r24, 0x01	; 1
    2dc8:	8f 87       	std	Y+15, r24	; 0x0f
    2dca:	02 c0       	rjmp	.+4      	; 0x2dd0 <HPB_enRead2+0x14c>
		}
	}// if first read
	else
	{
		Value = PB_RELEASED;
    2dcc:	81 e0       	ldi	r24, 0x01	; 1
    2dce:	8f 87       	std	Y+15, r24	; 0x0f
	}
	return Value;
    2dd0:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    2dd2:	60 96       	adiw	r28, 0x10	; 16
    2dd4:	0f b6       	in	r0, 0x3f	; 63
    2dd6:	f8 94       	cli
    2dd8:	de bf       	out	0x3e, r29	; 62
    2dda:	0f be       	out	0x3f, r0	; 63
    2ddc:	cd bf       	out	0x3d, r28	; 61
    2dde:	cf 91       	pop	r28
    2de0:	df 91       	pop	r29
    2de2:	08 95       	ret

00002de4 <HLED_enInit>:
#include "../HLED/HLED_int.h"
#include "../HLED/HLED_priv.h"


ErrorState_t HLED_enInit(u8 copy_u8LedId)
{
    2de4:	df 93       	push	r29
    2de6:	cf 93       	push	r28
    2de8:	00 d0       	rcall	.+0      	; 0x2dea <HLED_enInit+0x6>
    2dea:	00 d0       	rcall	.+0      	; 0x2dec <HLED_enInit+0x8>
    2dec:	cd b7       	in	r28, 0x3d	; 61
    2dee:	de b7       	in	r29, 0x3e	; 62
    2df0:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_State = SUCCESS;
    2df2:	82 e0       	ldi	r24, 0x02	; 2
    2df4:	89 83       	std	Y+1, r24	; 0x01
	switch (copy_u8LedId)
    2df6:	8a 81       	ldd	r24, Y+2	; 0x02
    2df8:	28 2f       	mov	r18, r24
    2dfa:	30 e0       	ldi	r19, 0x00	; 0
    2dfc:	3c 83       	std	Y+4, r19	; 0x04
    2dfe:	2b 83       	std	Y+3, r18	; 0x03
    2e00:	8b 81       	ldd	r24, Y+3	; 0x03
    2e02:	9c 81       	ldd	r25, Y+4	; 0x04
    2e04:	82 30       	cpi	r24, 0x02	; 2
    2e06:	91 05       	cpc	r25, r1
    2e08:	d9 f0       	breq	.+54     	; 0x2e40 <HLED_enInit+0x5c>
    2e0a:	2b 81       	ldd	r18, Y+3	; 0x03
    2e0c:	3c 81       	ldd	r19, Y+4	; 0x04
    2e0e:	23 30       	cpi	r18, 0x03	; 3
    2e10:	31 05       	cpc	r19, r1
    2e12:	34 f4       	brge	.+12     	; 0x2e20 <HLED_enInit+0x3c>
    2e14:	8b 81       	ldd	r24, Y+3	; 0x03
    2e16:	9c 81       	ldd	r25, Y+4	; 0x04
    2e18:	81 30       	cpi	r24, 0x01	; 1
    2e1a:	91 05       	cpc	r25, r1
    2e1c:	61 f0       	breq	.+24     	; 0x2e36 <HLED_enInit+0x52>
    2e1e:	1f c0       	rjmp	.+62     	; 0x2e5e <HLED_enInit+0x7a>
    2e20:	2b 81       	ldd	r18, Y+3	; 0x03
    2e22:	3c 81       	ldd	r19, Y+4	; 0x04
    2e24:	23 30       	cpi	r18, 0x03	; 3
    2e26:	31 05       	cpc	r19, r1
    2e28:	81 f0       	breq	.+32     	; 0x2e4a <HLED_enInit+0x66>
    2e2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e2c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e2e:	84 30       	cpi	r24, 0x04	; 4
    2e30:	91 05       	cpc	r25, r1
    2e32:	81 f0       	breq	.+32     	; 0x2e54 <HLED_enInit+0x70>
    2e34:	14 c0       	rjmp	.+40     	; 0x2e5e <HLED_enInit+0x7a>
	{
	case HLED_RED_ID :
		MDIO_voidsetPinDirection(HLED_RED_LED_PIN, OUTPUT);
    2e36:	8b e1       	ldi	r24, 0x1B	; 27
    2e38:	61 e0       	ldi	r22, 0x01	; 1
    2e3a:	0e 94 27 09 	call	0x124e	; 0x124e <MDIO_voidsetPinDirection>
    2e3e:	10 c0       	rjmp	.+32     	; 0x2e60 <HLED_enInit+0x7c>
		break;
	case HLED_BLUE_ID	:
		MDIO_voidsetPinDirection(HLED_BLUE_LED_PIN, OUTPUT);
    2e40:	8f e0       	ldi	r24, 0x0F	; 15
    2e42:	61 e0       	ldi	r22, 0x01	; 1
    2e44:	0e 94 27 09 	call	0x124e	; 0x124e <MDIO_voidsetPinDirection>
    2e48:	0b c0       	rjmp	.+22     	; 0x2e60 <HLED_enInit+0x7c>
		break;
	case HLED_GRN_ID:
		MDIO_voidsetPinDirection(HLED_GRN_LED_PIN, OUTPUT);
    2e4a:	8e e0       	ldi	r24, 0x0E	; 14
    2e4c:	61 e0       	ldi	r22, 0x01	; 1
    2e4e:	0e 94 27 09 	call	0x124e	; 0x124e <MDIO_voidsetPinDirection>
    2e52:	06 c0       	rjmp	.+12     	; 0x2e60 <HLED_enInit+0x7c>
		break;
	case HLED_YEL_ID:
			MDIO_voidsetPinDirection(HLED_YEL_LED_PIN, OUTPUT);
    2e54:	80 e1       	ldi	r24, 0x10	; 16
    2e56:	61 e0       	ldi	r22, 0x01	; 1
    2e58:	0e 94 27 09 	call	0x124e	; 0x124e <MDIO_voidsetPinDirection>
    2e5c:	01 c0       	rjmp	.+2      	; 0x2e60 <HLED_enInit+0x7c>
			break;
	default :
		Local_State = OUT_OF_RANGE_ERR;
    2e5e:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	return Local_State;
    2e60:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e62:	0f 90       	pop	r0
    2e64:	0f 90       	pop	r0
    2e66:	0f 90       	pop	r0
    2e68:	0f 90       	pop	r0
    2e6a:	cf 91       	pop	r28
    2e6c:	df 91       	pop	r29
    2e6e:	08 95       	ret

00002e70 <HLED_enSetON>:
ErrorState_t HLED_enSetON(u8 copy_u8LedId)
{
    2e70:	df 93       	push	r29
    2e72:	cf 93       	push	r28
    2e74:	00 d0       	rcall	.+0      	; 0x2e76 <HLED_enSetON+0x6>
    2e76:	00 d0       	rcall	.+0      	; 0x2e78 <HLED_enSetON+0x8>
    2e78:	cd b7       	in	r28, 0x3d	; 61
    2e7a:	de b7       	in	r29, 0x3e	; 62
    2e7c:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_State = SUCCESS;
    2e7e:	82 e0       	ldi	r24, 0x02	; 2
    2e80:	89 83       	std	Y+1, r24	; 0x01
		switch (copy_u8LedId)
    2e82:	8a 81       	ldd	r24, Y+2	; 0x02
    2e84:	28 2f       	mov	r18, r24
    2e86:	30 e0       	ldi	r19, 0x00	; 0
    2e88:	3c 83       	std	Y+4, r19	; 0x04
    2e8a:	2b 83       	std	Y+3, r18	; 0x03
    2e8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e8e:	9c 81       	ldd	r25, Y+4	; 0x04
    2e90:	82 30       	cpi	r24, 0x02	; 2
    2e92:	91 05       	cpc	r25, r1
    2e94:	d9 f0       	breq	.+54     	; 0x2ecc <HLED_enSetON+0x5c>
    2e96:	2b 81       	ldd	r18, Y+3	; 0x03
    2e98:	3c 81       	ldd	r19, Y+4	; 0x04
    2e9a:	23 30       	cpi	r18, 0x03	; 3
    2e9c:	31 05       	cpc	r19, r1
    2e9e:	34 f4       	brge	.+12     	; 0x2eac <HLED_enSetON+0x3c>
    2ea0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ea2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ea4:	81 30       	cpi	r24, 0x01	; 1
    2ea6:	91 05       	cpc	r25, r1
    2ea8:	61 f0       	breq	.+24     	; 0x2ec2 <HLED_enSetON+0x52>
    2eaa:	1f c0       	rjmp	.+62     	; 0x2eea <HLED_enSetON+0x7a>
    2eac:	2b 81       	ldd	r18, Y+3	; 0x03
    2eae:	3c 81       	ldd	r19, Y+4	; 0x04
    2eb0:	23 30       	cpi	r18, 0x03	; 3
    2eb2:	31 05       	cpc	r19, r1
    2eb4:	81 f0       	breq	.+32     	; 0x2ed6 <HLED_enSetON+0x66>
    2eb6:	8b 81       	ldd	r24, Y+3	; 0x03
    2eb8:	9c 81       	ldd	r25, Y+4	; 0x04
    2eba:	84 30       	cpi	r24, 0x04	; 4
    2ebc:	91 05       	cpc	r25, r1
    2ebe:	81 f0       	breq	.+32     	; 0x2ee0 <HLED_enSetON+0x70>
    2ec0:	14 c0       	rjmp	.+40     	; 0x2eea <HLED_enSetON+0x7a>
		{
		case HLED_RED_ID :
#if(HLED_RED_LED_DIR == HLED_LED_FORWARD)
			MDIO_voidsetPinValue(HLED_RED_LED_PIN, HIGH);
    2ec2:	8b e1       	ldi	r24, 0x1B	; 27
    2ec4:	61 e0       	ldi	r22, 0x01	; 1
    2ec6:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
    2eca:	10 c0       	rjmp	.+32     	; 0x2eec <HLED_enSetON+0x7c>
#error ("Wrong led Red Direction")
#endif
			break;
		case HLED_BLUE_ID:
#if(HLED_BLUE_LED_DIR == HLED_LED_FORWARD)
			MDIO_voidsetPinValue(HLED_BLUE_LED_PIN, HIGH);
    2ecc:	8f e0       	ldi	r24, 0x0F	; 15
    2ece:	61 e0       	ldi	r22, 0x01	; 1
    2ed0:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
    2ed4:	0b c0       	rjmp	.+22     	; 0x2eec <HLED_enSetON+0x7c>
#endif

			break;
		case HLED_GRN_ID:
#if(HLED_GRN_LED_DIR == HLED_LED_FORWARD)
			MDIO_voidsetPinValue(HLED_GRN_LED_PIN, HIGH);
    2ed6:	8e e0       	ldi	r24, 0x0E	; 14
    2ed8:	61 e0       	ldi	r22, 0x01	; 1
    2eda:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
    2ede:	06 c0       	rjmp	.+12     	; 0x2eec <HLED_enSetON+0x7c>

			break;

		case HLED_YEL_ID:
#if(HLED_YEL_LED_DIR == HLED_LED_FORWARD)
			MDIO_voidsetPinValue(HLED_YEL_LED_PIN, HIGH);
    2ee0:	80 e1       	ldi	r24, 0x10	; 16
    2ee2:	61 e0       	ldi	r22, 0x01	; 1
    2ee4:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
    2ee8:	01 c0       	rjmp	.+2      	; 0x2eec <HLED_enSetON+0x7c>
#endif

			break;

		default :
			Local_State = OUT_OF_RANGE_ERR;
    2eea:	19 82       	std	Y+1, r1	; 0x01
			break;
		}
		return Local_State;
    2eec:	89 81       	ldd	r24, Y+1	; 0x01

}
    2eee:	0f 90       	pop	r0
    2ef0:	0f 90       	pop	r0
    2ef2:	0f 90       	pop	r0
    2ef4:	0f 90       	pop	r0
    2ef6:	cf 91       	pop	r28
    2ef8:	df 91       	pop	r29
    2efa:	08 95       	ret

00002efc <HLED_enSetOFF>:
ErrorState_t HLED_enSetOFF(u8 copy_u8LedId)
{
    2efc:	df 93       	push	r29
    2efe:	cf 93       	push	r28
    2f00:	00 d0       	rcall	.+0      	; 0x2f02 <HLED_enSetOFF+0x6>
    2f02:	00 d0       	rcall	.+0      	; 0x2f04 <HLED_enSetOFF+0x8>
    2f04:	cd b7       	in	r28, 0x3d	; 61
    2f06:	de b7       	in	r29, 0x3e	; 62
    2f08:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_State = SUCCESS;
    2f0a:	82 e0       	ldi	r24, 0x02	; 2
    2f0c:	89 83       	std	Y+1, r24	; 0x01
		switch (copy_u8LedId)
    2f0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f10:	28 2f       	mov	r18, r24
    2f12:	30 e0       	ldi	r19, 0x00	; 0
    2f14:	3c 83       	std	Y+4, r19	; 0x04
    2f16:	2b 83       	std	Y+3, r18	; 0x03
    2f18:	8b 81       	ldd	r24, Y+3	; 0x03
    2f1a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f1c:	82 30       	cpi	r24, 0x02	; 2
    2f1e:	91 05       	cpc	r25, r1
    2f20:	d9 f0       	breq	.+54     	; 0x2f58 <HLED_enSetOFF+0x5c>
    2f22:	2b 81       	ldd	r18, Y+3	; 0x03
    2f24:	3c 81       	ldd	r19, Y+4	; 0x04
    2f26:	23 30       	cpi	r18, 0x03	; 3
    2f28:	31 05       	cpc	r19, r1
    2f2a:	34 f4       	brge	.+12     	; 0x2f38 <HLED_enSetOFF+0x3c>
    2f2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f2e:	9c 81       	ldd	r25, Y+4	; 0x04
    2f30:	81 30       	cpi	r24, 0x01	; 1
    2f32:	91 05       	cpc	r25, r1
    2f34:	61 f0       	breq	.+24     	; 0x2f4e <HLED_enSetOFF+0x52>
    2f36:	1f c0       	rjmp	.+62     	; 0x2f76 <HLED_enSetOFF+0x7a>
    2f38:	2b 81       	ldd	r18, Y+3	; 0x03
    2f3a:	3c 81       	ldd	r19, Y+4	; 0x04
    2f3c:	23 30       	cpi	r18, 0x03	; 3
    2f3e:	31 05       	cpc	r19, r1
    2f40:	81 f0       	breq	.+32     	; 0x2f62 <HLED_enSetOFF+0x66>
    2f42:	8b 81       	ldd	r24, Y+3	; 0x03
    2f44:	9c 81       	ldd	r25, Y+4	; 0x04
    2f46:	84 30       	cpi	r24, 0x04	; 4
    2f48:	91 05       	cpc	r25, r1
    2f4a:	81 f0       	breq	.+32     	; 0x2f6c <HLED_enSetOFF+0x70>
    2f4c:	14 c0       	rjmp	.+40     	; 0x2f76 <HLED_enSetOFF+0x7a>
		{
		case HLED_RED_ID :
#if(HLED_RED_LED_DIR == HLED_LED_FORWARD)
			MDIO_voidsetPinValue(HLED_RED_LED_PIN, LOW);
    2f4e:	8b e1       	ldi	r24, 0x1B	; 27
    2f50:	60 e0       	ldi	r22, 0x00	; 0
    2f52:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
    2f56:	10 c0       	rjmp	.+32     	; 0x2f78 <HLED_enSetOFF+0x7c>
#error ("Wrong led Red Direction")
#endif
			break;
		case HLED_BLUE_ID:
#if(HLED_BLUE_LED_DIR == HLED_LED_FORWARD)
			MDIO_voidsetPinValue(HLED_BLUE_LED_PIN, LOW);
    2f58:	8f e0       	ldi	r24, 0x0F	; 15
    2f5a:	60 e0       	ldi	r22, 0x00	; 0
    2f5c:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
    2f60:	0b c0       	rjmp	.+22     	; 0x2f78 <HLED_enSetOFF+0x7c>
#endif

			break;
		case HLED_GRN_ID:
#if(HLED_GRN_LED_DIR == HLED_LED_FORWARD)
			MDIO_voidsetPinValue(HLED_GRN_LED_PIN, LOW);
    2f62:	8e e0       	ldi	r24, 0x0E	; 14
    2f64:	60 e0       	ldi	r22, 0x00	; 0
    2f66:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
    2f6a:	06 c0       	rjmp	.+12     	; 0x2f78 <HLED_enSetOFF+0x7c>

			break;

		case HLED_YEL_ID:
#if(HLED_YEL_LED_DIR == HLED_LED_FORWARD)
			MDIO_voidsetPinValue(HLED_YEL_LED_PIN, LOW);
    2f6c:	80 e1       	ldi	r24, 0x10	; 16
    2f6e:	60 e0       	ldi	r22, 0x00	; 0
    2f70:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
    2f74:	01 c0       	rjmp	.+2      	; 0x2f78 <HLED_enSetOFF+0x7c>
#endif

			break;

		default :
			Local_State = OUT_OF_RANGE_ERR;
    2f76:	19 82       	std	Y+1, r1	; 0x01
			break;
		}
		return Local_State;
    2f78:	89 81       	ldd	r24, Y+1	; 0x01

}
    2f7a:	0f 90       	pop	r0
    2f7c:	0f 90       	pop	r0
    2f7e:	0f 90       	pop	r0
    2f80:	0f 90       	pop	r0
    2f82:	cf 91       	pop	r28
    2f84:	df 91       	pop	r29
    2f86:	08 95       	ret

00002f88 <HLED_enToggle>:
ErrorState_t HLED_enToggle(u8 copy_u8LedId)
{
    2f88:	df 93       	push	r29
    2f8a:	cf 93       	push	r28
    2f8c:	00 d0       	rcall	.+0      	; 0x2f8e <HLED_enToggle+0x6>
    2f8e:	00 d0       	rcall	.+0      	; 0x2f90 <HLED_enToggle+0x8>
    2f90:	cd b7       	in	r28, 0x3d	; 61
    2f92:	de b7       	in	r29, 0x3e	; 62
    2f94:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_State = SUCCESS;
    2f96:	82 e0       	ldi	r24, 0x02	; 2
    2f98:	89 83       	std	Y+1, r24	; 0x01
 switch(copy_u8LedId)
    2f9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f9c:	28 2f       	mov	r18, r24
    2f9e:	30 e0       	ldi	r19, 0x00	; 0
    2fa0:	3c 83       	std	Y+4, r19	; 0x04
    2fa2:	2b 83       	std	Y+3, r18	; 0x03
    2fa4:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa6:	9c 81       	ldd	r25, Y+4	; 0x04
    2fa8:	82 30       	cpi	r24, 0x02	; 2
    2faa:	91 05       	cpc	r25, r1
    2fac:	d1 f0       	breq	.+52     	; 0x2fe2 <HLED_enToggle+0x5a>
    2fae:	2b 81       	ldd	r18, Y+3	; 0x03
    2fb0:	3c 81       	ldd	r19, Y+4	; 0x04
    2fb2:	23 30       	cpi	r18, 0x03	; 3
    2fb4:	31 05       	cpc	r19, r1
    2fb6:	34 f4       	brge	.+12     	; 0x2fc4 <HLED_enToggle+0x3c>
    2fb8:	8b 81       	ldd	r24, Y+3	; 0x03
    2fba:	9c 81       	ldd	r25, Y+4	; 0x04
    2fbc:	81 30       	cpi	r24, 0x01	; 1
    2fbe:	91 05       	cpc	r25, r1
    2fc0:	61 f0       	breq	.+24     	; 0x2fda <HLED_enToggle+0x52>
    2fc2:	1b c0       	rjmp	.+54     	; 0x2ffa <HLED_enToggle+0x72>
    2fc4:	2b 81       	ldd	r18, Y+3	; 0x03
    2fc6:	3c 81       	ldd	r19, Y+4	; 0x04
    2fc8:	23 30       	cpi	r18, 0x03	; 3
    2fca:	31 05       	cpc	r19, r1
    2fcc:	71 f0       	breq	.+28     	; 0x2fea <HLED_enToggle+0x62>
    2fce:	8b 81       	ldd	r24, Y+3	; 0x03
    2fd0:	9c 81       	ldd	r25, Y+4	; 0x04
    2fd2:	84 30       	cpi	r24, 0x04	; 4
    2fd4:	91 05       	cpc	r25, r1
    2fd6:	69 f0       	breq	.+26     	; 0x2ff2 <HLED_enToggle+0x6a>
    2fd8:	10 c0       	rjmp	.+32     	; 0x2ffa <HLED_enToggle+0x72>
 {
  case HLED_RED_ID :
	  MDIO_voidTogglePinValue(HLED_RED_LED_PIN);
    2fda:	8b e1       	ldi	r24, 0x1B	; 27
    2fdc:	0e 94 86 0c 	call	0x190c	; 0x190c <MDIO_voidTogglePinValue>
    2fe0:	0d c0       	rjmp	.+26     	; 0x2ffc <HLED_enToggle+0x74>
	 break;
  case HLED_BLUE_ID :
	  MDIO_voidTogglePinValue(HLED_BLUE_LED_PIN);
    2fe2:	8f e0       	ldi	r24, 0x0F	; 15
    2fe4:	0e 94 86 0c 	call	0x190c	; 0x190c <MDIO_voidTogglePinValue>
    2fe8:	09 c0       	rjmp	.+18     	; 0x2ffc <HLED_enToggle+0x74>
 	 break;
  case HLED_GRN_ID :
	  MDIO_voidTogglePinValue(HLED_GRN_LED_PIN);
    2fea:	8e e0       	ldi	r24, 0x0E	; 14
    2fec:	0e 94 86 0c 	call	0x190c	; 0x190c <MDIO_voidTogglePinValue>
    2ff0:	05 c0       	rjmp	.+10     	; 0x2ffc <HLED_enToggle+0x74>
 	 break;
  case HLED_YEL_ID :
  	  MDIO_voidTogglePinValue(HLED_YEL_LED_PIN);
    2ff2:	80 e1       	ldi	r24, 0x10	; 16
    2ff4:	0e 94 86 0c 	call	0x190c	; 0x190c <MDIO_voidTogglePinValue>
    2ff8:	01 c0       	rjmp	.+2      	; 0x2ffc <HLED_enToggle+0x74>
   	 break;
  default :
 			Local_State = OUT_OF_RANGE_ERR;
    2ffa:	19 82       	std	Y+1, r1	; 0x01
 			break;
 }
 		return Local_State;
    2ffc:	89 81       	ldd	r24, Y+1	; 0x01

}
    2ffe:	0f 90       	pop	r0
    3000:	0f 90       	pop	r0
    3002:	0f 90       	pop	r0
    3004:	0f 90       	pop	r0
    3006:	cf 91       	pop	r28
    3008:	df 91       	pop	r29
    300a:	08 95       	ret

0000300c <LCD_voidInit>:



/***********************************************************************************/
void LCD_voidInit(void)
{
    300c:	df 93       	push	r29
    300e:	cf 93       	push	r28
    3010:	cd b7       	in	r28, 0x3d	; 61
    3012:	de b7       	in	r29, 0x3e	; 62
    3014:	e8 97       	sbiw	r28, 0x38	; 56
    3016:	0f b6       	in	r0, 0x3f	; 63
    3018:	f8 94       	cli
    301a:	de bf       	out	0x3e, r29	; 62
    301c:	0f be       	out	0x3f, r0	; 63
    301e:	cd bf       	out	0x3d, r28	; 61
    3020:	80 e0       	ldi	r24, 0x00	; 0
    3022:	90 e0       	ldi	r25, 0x00	; 0
    3024:	a0 ef       	ldi	r26, 0xF0	; 240
    3026:	b1 e4       	ldi	r27, 0x41	; 65
    3028:	8d ab       	std	Y+53, r24	; 0x35
    302a:	9e ab       	std	Y+54, r25	; 0x36
    302c:	af ab       	std	Y+55, r26	; 0x37
    302e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3030:	6d a9       	ldd	r22, Y+53	; 0x35
    3032:	7e a9       	ldd	r23, Y+54	; 0x36
    3034:	8f a9       	ldd	r24, Y+55	; 0x37
    3036:	98 ad       	ldd	r25, Y+56	; 0x38
    3038:	20 e0       	ldi	r18, 0x00	; 0
    303a:	30 e0       	ldi	r19, 0x00	; 0
    303c:	4a e7       	ldi	r20, 0x7A	; 122
    303e:	55 e4       	ldi	r21, 0x45	; 69
    3040:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3044:	dc 01       	movw	r26, r24
    3046:	cb 01       	movw	r24, r22
    3048:	89 ab       	std	Y+49, r24	; 0x31
    304a:	9a ab       	std	Y+50, r25	; 0x32
    304c:	ab ab       	std	Y+51, r26	; 0x33
    304e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3050:	69 a9       	ldd	r22, Y+49	; 0x31
    3052:	7a a9       	ldd	r23, Y+50	; 0x32
    3054:	8b a9       	ldd	r24, Y+51	; 0x33
    3056:	9c a9       	ldd	r25, Y+52	; 0x34
    3058:	20 e0       	ldi	r18, 0x00	; 0
    305a:	30 e0       	ldi	r19, 0x00	; 0
    305c:	40 e8       	ldi	r20, 0x80	; 128
    305e:	5f e3       	ldi	r21, 0x3F	; 63
    3060:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3064:	88 23       	and	r24, r24
    3066:	2c f4       	brge	.+10     	; 0x3072 <LCD_voidInit+0x66>
		__ticks = 1;
    3068:	81 e0       	ldi	r24, 0x01	; 1
    306a:	90 e0       	ldi	r25, 0x00	; 0
    306c:	98 ab       	std	Y+48, r25	; 0x30
    306e:	8f a7       	std	Y+47, r24	; 0x2f
    3070:	3f c0       	rjmp	.+126    	; 0x30f0 <LCD_voidInit+0xe4>
	else if (__tmp > 65535)
    3072:	69 a9       	ldd	r22, Y+49	; 0x31
    3074:	7a a9       	ldd	r23, Y+50	; 0x32
    3076:	8b a9       	ldd	r24, Y+51	; 0x33
    3078:	9c a9       	ldd	r25, Y+52	; 0x34
    307a:	20 e0       	ldi	r18, 0x00	; 0
    307c:	3f ef       	ldi	r19, 0xFF	; 255
    307e:	4f e7       	ldi	r20, 0x7F	; 127
    3080:	57 e4       	ldi	r21, 0x47	; 71
    3082:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3086:	18 16       	cp	r1, r24
    3088:	4c f5       	brge	.+82     	; 0x30dc <LCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    308a:	6d a9       	ldd	r22, Y+53	; 0x35
    308c:	7e a9       	ldd	r23, Y+54	; 0x36
    308e:	8f a9       	ldd	r24, Y+55	; 0x37
    3090:	98 ad       	ldd	r25, Y+56	; 0x38
    3092:	20 e0       	ldi	r18, 0x00	; 0
    3094:	30 e0       	ldi	r19, 0x00	; 0
    3096:	40 e2       	ldi	r20, 0x20	; 32
    3098:	51 e4       	ldi	r21, 0x41	; 65
    309a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    309e:	dc 01       	movw	r26, r24
    30a0:	cb 01       	movw	r24, r22
    30a2:	bc 01       	movw	r22, r24
    30a4:	cd 01       	movw	r24, r26
    30a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30aa:	dc 01       	movw	r26, r24
    30ac:	cb 01       	movw	r24, r22
    30ae:	98 ab       	std	Y+48, r25	; 0x30
    30b0:	8f a7       	std	Y+47, r24	; 0x2f
    30b2:	0f c0       	rjmp	.+30     	; 0x30d2 <LCD_voidInit+0xc6>
    30b4:	80 e9       	ldi	r24, 0x90	; 144
    30b6:	91 e0       	ldi	r25, 0x01	; 1
    30b8:	9e a7       	std	Y+46, r25	; 0x2e
    30ba:	8d a7       	std	Y+45, r24	; 0x2d
    30bc:	8d a5       	ldd	r24, Y+45	; 0x2d
    30be:	9e a5       	ldd	r25, Y+46	; 0x2e
    30c0:	01 97       	sbiw	r24, 0x01	; 1
    30c2:	f1 f7       	brne	.-4      	; 0x30c0 <LCD_voidInit+0xb4>
    30c4:	9e a7       	std	Y+46, r25	; 0x2e
    30c6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    30ca:	98 a9       	ldd	r25, Y+48	; 0x30
    30cc:	01 97       	sbiw	r24, 0x01	; 1
    30ce:	98 ab       	std	Y+48, r25	; 0x30
    30d0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    30d4:	98 a9       	ldd	r25, Y+48	; 0x30
    30d6:	00 97       	sbiw	r24, 0x00	; 0
    30d8:	69 f7       	brne	.-38     	; 0x30b4 <LCD_voidInit+0xa8>
    30da:	14 c0       	rjmp	.+40     	; 0x3104 <LCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30dc:	69 a9       	ldd	r22, Y+49	; 0x31
    30de:	7a a9       	ldd	r23, Y+50	; 0x32
    30e0:	8b a9       	ldd	r24, Y+51	; 0x33
    30e2:	9c a9       	ldd	r25, Y+52	; 0x34
    30e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30e8:	dc 01       	movw	r26, r24
    30ea:	cb 01       	movw	r24, r22
    30ec:	98 ab       	std	Y+48, r25	; 0x30
    30ee:	8f a7       	std	Y+47, r24	; 0x2f
    30f0:	8f a5       	ldd	r24, Y+47	; 0x2f
    30f2:	98 a9       	ldd	r25, Y+48	; 0x30
    30f4:	9c a7       	std	Y+44, r25	; 0x2c
    30f6:	8b a7       	std	Y+43, r24	; 0x2b
    30f8:	8b a5       	ldd	r24, Y+43	; 0x2b
    30fa:	9c a5       	ldd	r25, Y+44	; 0x2c
    30fc:	01 97       	sbiw	r24, 0x01	; 1
    30fe:	f1 f7       	brne	.-4      	; 0x30fc <LCD_voidInit+0xf0>
    3100:	9c a7       	std	Y+44, r25	; 0x2c
    3102:	8b a7       	std	Y+43, r24	; 0x2b
	/* Delay 30ms to ensure the initialization of the LCD driver */
	_delay_ms(30);

	/* Set Control pins as output */
	DIO_voidSetPinDirection(RS_PORT,RS_PIN,PIN_OUTPUT);
    3104:	80 e0       	ldi	r24, 0x00	; 0
    3106:	63 e0       	ldi	r22, 0x03	; 3
    3108:	41 e0       	ldi	r20, 0x01	; 1
    310a:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <DIO_voidSetPinDirection>
	// DIO_voidSetPinDirection(RW_PORT,RW_PIN,PIN_OUTPUT);
	DIO_voidSetPinDirection(EN_PORT, EN_PIN,PIN_OUTPUT);
    310e:	80 e0       	ldi	r24, 0x00	; 0
    3110:	62 e0       	ldi	r22, 0x02	; 2
    3112:	41 e0       	ldi	r20, 0x01	; 1
    3114:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <DIO_voidSetPinDirection>

	/* Set Data Port Direction as output */
	DIO_voidSetPinDirection(D4_PORT,D4_PIN,PIN_OUTPUT);
    3118:	81 e0       	ldi	r24, 0x01	; 1
    311a:	60 e0       	ldi	r22, 0x00	; 0
    311c:	41 e0       	ldi	r20, 0x01	; 1
    311e:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(D5_PORT,D5_PIN,PIN_OUTPUT);
    3122:	81 e0       	ldi	r24, 0x01	; 1
    3124:	61 e0       	ldi	r22, 0x01	; 1
    3126:	41 e0       	ldi	r20, 0x01	; 1
    3128:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(D6_PORT,D6_PIN,PIN_OUTPUT);
    312c:	81 e0       	ldi	r24, 0x01	; 1
    312e:	62 e0       	ldi	r22, 0x02	; 2
    3130:	41 e0       	ldi	r20, 0x01	; 1
    3132:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(D7_PORT,D7_PIN,PIN_OUTPUT);
    3136:	81 e0       	ldi	r24, 0x01	; 1
    3138:	64 e0       	ldi	r22, 0x04	; 4
    313a:	41 e0       	ldi	r20, 0x01	; 1
    313c:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <DIO_voidSetPinDirection>

	/* Return Home */
	LCD_voidWriteCommand(RETURN_HOME );
    3140:	82 e0       	ldi	r24, 0x02	; 2
    3142:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <LCD_voidWriteCommand>

	/* Configure as 4-bit data mode*/
	LCD_voidWriteCommand(FUNCTION_SET_4BIT_2LINES_5X7_DOTS);
    3146:	88 e2       	ldi	r24, 0x28	; 40
    3148:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <LCD_voidWriteCommand>
    314c:	80 e0       	ldi	r24, 0x00	; 0
    314e:	90 e0       	ldi	r25, 0x00	; 0
    3150:	a0 e0       	ldi	r26, 0x00	; 0
    3152:	b0 e4       	ldi	r27, 0x40	; 64
    3154:	8f a3       	std	Y+39, r24	; 0x27
    3156:	98 a7       	std	Y+40, r25	; 0x28
    3158:	a9 a7       	std	Y+41, r26	; 0x29
    315a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    315c:	6f a1       	ldd	r22, Y+39	; 0x27
    315e:	78 a5       	ldd	r23, Y+40	; 0x28
    3160:	89 a5       	ldd	r24, Y+41	; 0x29
    3162:	9a a5       	ldd	r25, Y+42	; 0x2a
    3164:	20 e0       	ldi	r18, 0x00	; 0
    3166:	30 e0       	ldi	r19, 0x00	; 0
    3168:	4a e7       	ldi	r20, 0x7A	; 122
    316a:	55 e4       	ldi	r21, 0x45	; 69
    316c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3170:	dc 01       	movw	r26, r24
    3172:	cb 01       	movw	r24, r22
    3174:	8b a3       	std	Y+35, r24	; 0x23
    3176:	9c a3       	std	Y+36, r25	; 0x24
    3178:	ad a3       	std	Y+37, r26	; 0x25
    317a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    317c:	6b a1       	ldd	r22, Y+35	; 0x23
    317e:	7c a1       	ldd	r23, Y+36	; 0x24
    3180:	8d a1       	ldd	r24, Y+37	; 0x25
    3182:	9e a1       	ldd	r25, Y+38	; 0x26
    3184:	20 e0       	ldi	r18, 0x00	; 0
    3186:	30 e0       	ldi	r19, 0x00	; 0
    3188:	40 e8       	ldi	r20, 0x80	; 128
    318a:	5f e3       	ldi	r21, 0x3F	; 63
    318c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3190:	88 23       	and	r24, r24
    3192:	2c f4       	brge	.+10     	; 0x319e <LCD_voidInit+0x192>
		__ticks = 1;
    3194:	81 e0       	ldi	r24, 0x01	; 1
    3196:	90 e0       	ldi	r25, 0x00	; 0
    3198:	9a a3       	std	Y+34, r25	; 0x22
    319a:	89 a3       	std	Y+33, r24	; 0x21
    319c:	3f c0       	rjmp	.+126    	; 0x321c <LCD_voidInit+0x210>
	else if (__tmp > 65535)
    319e:	6b a1       	ldd	r22, Y+35	; 0x23
    31a0:	7c a1       	ldd	r23, Y+36	; 0x24
    31a2:	8d a1       	ldd	r24, Y+37	; 0x25
    31a4:	9e a1       	ldd	r25, Y+38	; 0x26
    31a6:	20 e0       	ldi	r18, 0x00	; 0
    31a8:	3f ef       	ldi	r19, 0xFF	; 255
    31aa:	4f e7       	ldi	r20, 0x7F	; 127
    31ac:	57 e4       	ldi	r21, 0x47	; 71
    31ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31b2:	18 16       	cp	r1, r24
    31b4:	4c f5       	brge	.+82     	; 0x3208 <LCD_voidInit+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31b6:	6f a1       	ldd	r22, Y+39	; 0x27
    31b8:	78 a5       	ldd	r23, Y+40	; 0x28
    31ba:	89 a5       	ldd	r24, Y+41	; 0x29
    31bc:	9a a5       	ldd	r25, Y+42	; 0x2a
    31be:	20 e0       	ldi	r18, 0x00	; 0
    31c0:	30 e0       	ldi	r19, 0x00	; 0
    31c2:	40 e2       	ldi	r20, 0x20	; 32
    31c4:	51 e4       	ldi	r21, 0x41	; 65
    31c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ca:	dc 01       	movw	r26, r24
    31cc:	cb 01       	movw	r24, r22
    31ce:	bc 01       	movw	r22, r24
    31d0:	cd 01       	movw	r24, r26
    31d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31d6:	dc 01       	movw	r26, r24
    31d8:	cb 01       	movw	r24, r22
    31da:	9a a3       	std	Y+34, r25	; 0x22
    31dc:	89 a3       	std	Y+33, r24	; 0x21
    31de:	0f c0       	rjmp	.+30     	; 0x31fe <LCD_voidInit+0x1f2>
    31e0:	80 e9       	ldi	r24, 0x90	; 144
    31e2:	91 e0       	ldi	r25, 0x01	; 1
    31e4:	98 a3       	std	Y+32, r25	; 0x20
    31e6:	8f 8f       	std	Y+31, r24	; 0x1f
    31e8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    31ea:	98 a1       	ldd	r25, Y+32	; 0x20
    31ec:	01 97       	sbiw	r24, 0x01	; 1
    31ee:	f1 f7       	brne	.-4      	; 0x31ec <LCD_voidInit+0x1e0>
    31f0:	98 a3       	std	Y+32, r25	; 0x20
    31f2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31f4:	89 a1       	ldd	r24, Y+33	; 0x21
    31f6:	9a a1       	ldd	r25, Y+34	; 0x22
    31f8:	01 97       	sbiw	r24, 0x01	; 1
    31fa:	9a a3       	std	Y+34, r25	; 0x22
    31fc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31fe:	89 a1       	ldd	r24, Y+33	; 0x21
    3200:	9a a1       	ldd	r25, Y+34	; 0x22
    3202:	00 97       	sbiw	r24, 0x00	; 0
    3204:	69 f7       	brne	.-38     	; 0x31e0 <LCD_voidInit+0x1d4>
    3206:	14 c0       	rjmp	.+40     	; 0x3230 <LCD_voidInit+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3208:	6b a1       	ldd	r22, Y+35	; 0x23
    320a:	7c a1       	ldd	r23, Y+36	; 0x24
    320c:	8d a1       	ldd	r24, Y+37	; 0x25
    320e:	9e a1       	ldd	r25, Y+38	; 0x26
    3210:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3214:	dc 01       	movw	r26, r24
    3216:	cb 01       	movw	r24, r22
    3218:	9a a3       	std	Y+34, r25	; 0x22
    321a:	89 a3       	std	Y+33, r24	; 0x21
    321c:	89 a1       	ldd	r24, Y+33	; 0x21
    321e:	9a a1       	ldd	r25, Y+34	; 0x22
    3220:	9e 8f       	std	Y+30, r25	; 0x1e
    3222:	8d 8f       	std	Y+29, r24	; 0x1d
    3224:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3226:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3228:	01 97       	sbiw	r24, 0x01	; 1
    322a:	f1 f7       	brne	.-4      	; 0x3228 <LCD_voidInit+0x21c>
    322c:	9e 8f       	std	Y+30, r25	; 0x1e
    322e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);

	/*Display ON OFF Control */
	LCD_voidWriteCommand(DISPLAY_ON_CURSOR_OFF);
    3230:	8c e0       	ldi	r24, 0x0C	; 12
    3232:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <LCD_voidWriteCommand>
    3236:	80 e0       	ldi	r24, 0x00	; 0
    3238:	90 e0       	ldi	r25, 0x00	; 0
    323a:	a0 e0       	ldi	r26, 0x00	; 0
    323c:	b0 e4       	ldi	r27, 0x40	; 64
    323e:	89 8f       	std	Y+25, r24	; 0x19
    3240:	9a 8f       	std	Y+26, r25	; 0x1a
    3242:	ab 8f       	std	Y+27, r26	; 0x1b
    3244:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3246:	69 8d       	ldd	r22, Y+25	; 0x19
    3248:	7a 8d       	ldd	r23, Y+26	; 0x1a
    324a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    324c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    324e:	20 e0       	ldi	r18, 0x00	; 0
    3250:	30 e0       	ldi	r19, 0x00	; 0
    3252:	4a e7       	ldi	r20, 0x7A	; 122
    3254:	55 e4       	ldi	r21, 0x45	; 69
    3256:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    325a:	dc 01       	movw	r26, r24
    325c:	cb 01       	movw	r24, r22
    325e:	8d 8b       	std	Y+21, r24	; 0x15
    3260:	9e 8b       	std	Y+22, r25	; 0x16
    3262:	af 8b       	std	Y+23, r26	; 0x17
    3264:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3266:	6d 89       	ldd	r22, Y+21	; 0x15
    3268:	7e 89       	ldd	r23, Y+22	; 0x16
    326a:	8f 89       	ldd	r24, Y+23	; 0x17
    326c:	98 8d       	ldd	r25, Y+24	; 0x18
    326e:	20 e0       	ldi	r18, 0x00	; 0
    3270:	30 e0       	ldi	r19, 0x00	; 0
    3272:	40 e8       	ldi	r20, 0x80	; 128
    3274:	5f e3       	ldi	r21, 0x3F	; 63
    3276:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    327a:	88 23       	and	r24, r24
    327c:	2c f4       	brge	.+10     	; 0x3288 <LCD_voidInit+0x27c>
		__ticks = 1;
    327e:	81 e0       	ldi	r24, 0x01	; 1
    3280:	90 e0       	ldi	r25, 0x00	; 0
    3282:	9c 8b       	std	Y+20, r25	; 0x14
    3284:	8b 8b       	std	Y+19, r24	; 0x13
    3286:	3f c0       	rjmp	.+126    	; 0x3306 <LCD_voidInit+0x2fa>
	else if (__tmp > 65535)
    3288:	6d 89       	ldd	r22, Y+21	; 0x15
    328a:	7e 89       	ldd	r23, Y+22	; 0x16
    328c:	8f 89       	ldd	r24, Y+23	; 0x17
    328e:	98 8d       	ldd	r25, Y+24	; 0x18
    3290:	20 e0       	ldi	r18, 0x00	; 0
    3292:	3f ef       	ldi	r19, 0xFF	; 255
    3294:	4f e7       	ldi	r20, 0x7F	; 127
    3296:	57 e4       	ldi	r21, 0x47	; 71
    3298:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    329c:	18 16       	cp	r1, r24
    329e:	4c f5       	brge	.+82     	; 0x32f2 <LCD_voidInit+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32a0:	69 8d       	ldd	r22, Y+25	; 0x19
    32a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32a8:	20 e0       	ldi	r18, 0x00	; 0
    32aa:	30 e0       	ldi	r19, 0x00	; 0
    32ac:	40 e2       	ldi	r20, 0x20	; 32
    32ae:	51 e4       	ldi	r21, 0x41	; 65
    32b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32b4:	dc 01       	movw	r26, r24
    32b6:	cb 01       	movw	r24, r22
    32b8:	bc 01       	movw	r22, r24
    32ba:	cd 01       	movw	r24, r26
    32bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32c0:	dc 01       	movw	r26, r24
    32c2:	cb 01       	movw	r24, r22
    32c4:	9c 8b       	std	Y+20, r25	; 0x14
    32c6:	8b 8b       	std	Y+19, r24	; 0x13
    32c8:	0f c0       	rjmp	.+30     	; 0x32e8 <LCD_voidInit+0x2dc>
    32ca:	80 e9       	ldi	r24, 0x90	; 144
    32cc:	91 e0       	ldi	r25, 0x01	; 1
    32ce:	9a 8b       	std	Y+18, r25	; 0x12
    32d0:	89 8b       	std	Y+17, r24	; 0x11
    32d2:	89 89       	ldd	r24, Y+17	; 0x11
    32d4:	9a 89       	ldd	r25, Y+18	; 0x12
    32d6:	01 97       	sbiw	r24, 0x01	; 1
    32d8:	f1 f7       	brne	.-4      	; 0x32d6 <LCD_voidInit+0x2ca>
    32da:	9a 8b       	std	Y+18, r25	; 0x12
    32dc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32de:	8b 89       	ldd	r24, Y+19	; 0x13
    32e0:	9c 89       	ldd	r25, Y+20	; 0x14
    32e2:	01 97       	sbiw	r24, 0x01	; 1
    32e4:	9c 8b       	std	Y+20, r25	; 0x14
    32e6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32e8:	8b 89       	ldd	r24, Y+19	; 0x13
    32ea:	9c 89       	ldd	r25, Y+20	; 0x14
    32ec:	00 97       	sbiw	r24, 0x00	; 0
    32ee:	69 f7       	brne	.-38     	; 0x32ca <LCD_voidInit+0x2be>
    32f0:	14 c0       	rjmp	.+40     	; 0x331a <LCD_voidInit+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32f2:	6d 89       	ldd	r22, Y+21	; 0x15
    32f4:	7e 89       	ldd	r23, Y+22	; 0x16
    32f6:	8f 89       	ldd	r24, Y+23	; 0x17
    32f8:	98 8d       	ldd	r25, Y+24	; 0x18
    32fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32fe:	dc 01       	movw	r26, r24
    3300:	cb 01       	movw	r24, r22
    3302:	9c 8b       	std	Y+20, r25	; 0x14
    3304:	8b 8b       	std	Y+19, r24	; 0x13
    3306:	8b 89       	ldd	r24, Y+19	; 0x13
    3308:	9c 89       	ldd	r25, Y+20	; 0x14
    330a:	98 8b       	std	Y+16, r25	; 0x10
    330c:	8f 87       	std	Y+15, r24	; 0x0f
    330e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3310:	98 89       	ldd	r25, Y+16	; 0x10
    3312:	01 97       	sbiw	r24, 0x01	; 1
    3314:	f1 f7       	brne	.-4      	; 0x3312 <LCD_voidInit+0x306>
    3316:	98 8b       	std	Y+16, r25	; 0x10
    3318:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);

	/* Clear Display */
	LCD_voidWriteCommand(DISPLAY_CLEAR);
    331a:	81 e0       	ldi	r24, 0x01	; 1
    331c:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <LCD_voidWriteCommand>
    3320:	80 e0       	ldi	r24, 0x00	; 0
    3322:	90 e0       	ldi	r25, 0x00	; 0
    3324:	a0 e0       	ldi	r26, 0x00	; 0
    3326:	b0 e4       	ldi	r27, 0x40	; 64
    3328:	8b 87       	std	Y+11, r24	; 0x0b
    332a:	9c 87       	std	Y+12, r25	; 0x0c
    332c:	ad 87       	std	Y+13, r26	; 0x0d
    332e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3330:	6b 85       	ldd	r22, Y+11	; 0x0b
    3332:	7c 85       	ldd	r23, Y+12	; 0x0c
    3334:	8d 85       	ldd	r24, Y+13	; 0x0d
    3336:	9e 85       	ldd	r25, Y+14	; 0x0e
    3338:	20 e0       	ldi	r18, 0x00	; 0
    333a:	30 e0       	ldi	r19, 0x00	; 0
    333c:	4a e7       	ldi	r20, 0x7A	; 122
    333e:	55 e4       	ldi	r21, 0x45	; 69
    3340:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3344:	dc 01       	movw	r26, r24
    3346:	cb 01       	movw	r24, r22
    3348:	8f 83       	std	Y+7, r24	; 0x07
    334a:	98 87       	std	Y+8, r25	; 0x08
    334c:	a9 87       	std	Y+9, r26	; 0x09
    334e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3350:	6f 81       	ldd	r22, Y+7	; 0x07
    3352:	78 85       	ldd	r23, Y+8	; 0x08
    3354:	89 85       	ldd	r24, Y+9	; 0x09
    3356:	9a 85       	ldd	r25, Y+10	; 0x0a
    3358:	20 e0       	ldi	r18, 0x00	; 0
    335a:	30 e0       	ldi	r19, 0x00	; 0
    335c:	40 e8       	ldi	r20, 0x80	; 128
    335e:	5f e3       	ldi	r21, 0x3F	; 63
    3360:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3364:	88 23       	and	r24, r24
    3366:	2c f4       	brge	.+10     	; 0x3372 <LCD_voidInit+0x366>
		__ticks = 1;
    3368:	81 e0       	ldi	r24, 0x01	; 1
    336a:	90 e0       	ldi	r25, 0x00	; 0
    336c:	9e 83       	std	Y+6, r25	; 0x06
    336e:	8d 83       	std	Y+5, r24	; 0x05
    3370:	3f c0       	rjmp	.+126    	; 0x33f0 <LCD_voidInit+0x3e4>
	else if (__tmp > 65535)
    3372:	6f 81       	ldd	r22, Y+7	; 0x07
    3374:	78 85       	ldd	r23, Y+8	; 0x08
    3376:	89 85       	ldd	r24, Y+9	; 0x09
    3378:	9a 85       	ldd	r25, Y+10	; 0x0a
    337a:	20 e0       	ldi	r18, 0x00	; 0
    337c:	3f ef       	ldi	r19, 0xFF	; 255
    337e:	4f e7       	ldi	r20, 0x7F	; 127
    3380:	57 e4       	ldi	r21, 0x47	; 71
    3382:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3386:	18 16       	cp	r1, r24
    3388:	4c f5       	brge	.+82     	; 0x33dc <LCD_voidInit+0x3d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    338a:	6b 85       	ldd	r22, Y+11	; 0x0b
    338c:	7c 85       	ldd	r23, Y+12	; 0x0c
    338e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3390:	9e 85       	ldd	r25, Y+14	; 0x0e
    3392:	20 e0       	ldi	r18, 0x00	; 0
    3394:	30 e0       	ldi	r19, 0x00	; 0
    3396:	40 e2       	ldi	r20, 0x20	; 32
    3398:	51 e4       	ldi	r21, 0x41	; 65
    339a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    339e:	dc 01       	movw	r26, r24
    33a0:	cb 01       	movw	r24, r22
    33a2:	bc 01       	movw	r22, r24
    33a4:	cd 01       	movw	r24, r26
    33a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33aa:	dc 01       	movw	r26, r24
    33ac:	cb 01       	movw	r24, r22
    33ae:	9e 83       	std	Y+6, r25	; 0x06
    33b0:	8d 83       	std	Y+5, r24	; 0x05
    33b2:	0f c0       	rjmp	.+30     	; 0x33d2 <LCD_voidInit+0x3c6>
    33b4:	80 e9       	ldi	r24, 0x90	; 144
    33b6:	91 e0       	ldi	r25, 0x01	; 1
    33b8:	9c 83       	std	Y+4, r25	; 0x04
    33ba:	8b 83       	std	Y+3, r24	; 0x03
    33bc:	8b 81       	ldd	r24, Y+3	; 0x03
    33be:	9c 81       	ldd	r25, Y+4	; 0x04
    33c0:	01 97       	sbiw	r24, 0x01	; 1
    33c2:	f1 f7       	brne	.-4      	; 0x33c0 <LCD_voidInit+0x3b4>
    33c4:	9c 83       	std	Y+4, r25	; 0x04
    33c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33c8:	8d 81       	ldd	r24, Y+5	; 0x05
    33ca:	9e 81       	ldd	r25, Y+6	; 0x06
    33cc:	01 97       	sbiw	r24, 0x01	; 1
    33ce:	9e 83       	std	Y+6, r25	; 0x06
    33d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33d2:	8d 81       	ldd	r24, Y+5	; 0x05
    33d4:	9e 81       	ldd	r25, Y+6	; 0x06
    33d6:	00 97       	sbiw	r24, 0x00	; 0
    33d8:	69 f7       	brne	.-38     	; 0x33b4 <LCD_voidInit+0x3a8>
    33da:	14 c0       	rjmp	.+40     	; 0x3404 <LCD_voidInit+0x3f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33dc:	6f 81       	ldd	r22, Y+7	; 0x07
    33de:	78 85       	ldd	r23, Y+8	; 0x08
    33e0:	89 85       	ldd	r24, Y+9	; 0x09
    33e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    33e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33e8:	dc 01       	movw	r26, r24
    33ea:	cb 01       	movw	r24, r22
    33ec:	9e 83       	std	Y+6, r25	; 0x06
    33ee:	8d 83       	std	Y+5, r24	; 0x05
    33f0:	8d 81       	ldd	r24, Y+5	; 0x05
    33f2:	9e 81       	ldd	r25, Y+6	; 0x06
    33f4:	9a 83       	std	Y+2, r25	; 0x02
    33f6:	89 83       	std	Y+1, r24	; 0x01
    33f8:	89 81       	ldd	r24, Y+1	; 0x01
    33fa:	9a 81       	ldd	r25, Y+2	; 0x02
    33fc:	01 97       	sbiw	r24, 0x01	; 1
    33fe:	f1 f7       	brne	.-4      	; 0x33fc <LCD_voidInit+0x3f0>
    3400:	9a 83       	std	Y+2, r25	; 0x02
    3402:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

}
    3404:	e8 96       	adiw	r28, 0x38	; 56
    3406:	0f b6       	in	r0, 0x3f	; 63
    3408:	f8 94       	cli
    340a:	de bf       	out	0x3e, r29	; 62
    340c:	0f be       	out	0x3f, r0	; 63
    340e:	cd bf       	out	0x3d, r28	; 61
    3410:	cf 91       	pop	r28
    3412:	df 91       	pop	r29
    3414:	08 95       	ret

00003416 <LCD_voidWriteBitsToSend>:
/***********************************************************************************/
void LCD_voidWriteBitsToSend(u8 copy_u8Byte)
{
    3416:	df 93       	push	r29
    3418:	cf 93       	push	r28
    341a:	cd b7       	in	r28, 0x3d	; 61
    341c:	de b7       	in	r29, 0x3e	; 62
    341e:	e9 97       	sbiw	r28, 0x39	; 57
    3420:	0f b6       	in	r0, 0x3f	; 63
    3422:	f8 94       	cli
    3424:	de bf       	out	0x3e, r29	; 62
    3426:	0f be       	out	0x3f, r0	; 63
    3428:	cd bf       	out	0x3d, r28	; 61
    342a:	89 af       	std	Y+57, r24	; 0x39
	//DIO_voidSetPinValue(RW_PORT,RW_PIN, PIN_LOW);
	DIO_voidSetPinValue(EN_PORT,EN_PIN, PIN_LOW);
    342c:	80 e0       	ldi	r24, 0x00	; 0
    342e:	62 e0       	ldi	r22, 0x02	; 2
    3430:	40 e0       	ldi	r20, 0x00	; 0
    3432:	0e 94 05 10 	call	0x200a	; 0x200a <DIO_voidSetPinValue>

	/*prepare 4 bits MSB to send */
	DIO_voidSetPinValue(D7_PORT,D7_PIN, (copy_u8Byte>> 7) & 1);
    3436:	89 ad       	ldd	r24, Y+57	; 0x39
    3438:	98 2f       	mov	r25, r24
    343a:	99 1f       	adc	r25, r25
    343c:	99 27       	eor	r25, r25
    343e:	99 1f       	adc	r25, r25
    3440:	81 e0       	ldi	r24, 0x01	; 1
    3442:	64 e0       	ldi	r22, 0x04	; 4
    3444:	49 2f       	mov	r20, r25
    3446:	0e 94 05 10 	call	0x200a	; 0x200a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D6_PORT,D6_PIN, (copy_u8Byte>> 6) & 1);
    344a:	89 ad       	ldd	r24, Y+57	; 0x39
    344c:	82 95       	swap	r24
    344e:	86 95       	lsr	r24
    3450:	86 95       	lsr	r24
    3452:	83 70       	andi	r24, 0x03	; 3
    3454:	98 2f       	mov	r25, r24
    3456:	91 70       	andi	r25, 0x01	; 1
    3458:	81 e0       	ldi	r24, 0x01	; 1
    345a:	62 e0       	ldi	r22, 0x02	; 2
    345c:	49 2f       	mov	r20, r25
    345e:	0e 94 05 10 	call	0x200a	; 0x200a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D5_PORT,D5_PIN, (copy_u8Byte>> 5) & 1);
    3462:	89 ad       	ldd	r24, Y+57	; 0x39
    3464:	82 95       	swap	r24
    3466:	86 95       	lsr	r24
    3468:	87 70       	andi	r24, 0x07	; 7
    346a:	98 2f       	mov	r25, r24
    346c:	91 70       	andi	r25, 0x01	; 1
    346e:	81 e0       	ldi	r24, 0x01	; 1
    3470:	61 e0       	ldi	r22, 0x01	; 1
    3472:	49 2f       	mov	r20, r25
    3474:	0e 94 05 10 	call	0x200a	; 0x200a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D4_PORT,D4_PIN, (copy_u8Byte>> 4) & 1);
    3478:	89 ad       	ldd	r24, Y+57	; 0x39
    347a:	82 95       	swap	r24
    347c:	8f 70       	andi	r24, 0x0F	; 15
    347e:	98 2f       	mov	r25, r24
    3480:	91 70       	andi	r25, 0x01	; 1
    3482:	81 e0       	ldi	r24, 0x01	; 1
    3484:	60 e0       	ldi	r22, 0x00	; 0
    3486:	49 2f       	mov	r20, r25
    3488:	0e 94 05 10 	call	0x200a	; 0x200a <DIO_voidSetPinValue>

	/* open EN--> make it high --- then after 1m close EN -->make it low*/
	DIO_voidSetPinValue(EN_PORT,EN_PIN, PIN_HIGH);
    348c:	80 e0       	ldi	r24, 0x00	; 0
    348e:	62 e0       	ldi	r22, 0x02	; 2
    3490:	41 e0       	ldi	r20, 0x01	; 1
    3492:	0e 94 05 10 	call	0x200a	; 0x200a <DIO_voidSetPinValue>
    3496:	80 e0       	ldi	r24, 0x00	; 0
    3498:	90 e0       	ldi	r25, 0x00	; 0
    349a:	a0 e8       	ldi	r26, 0x80	; 128
    349c:	bf e3       	ldi	r27, 0x3F	; 63
    349e:	8d ab       	std	Y+53, r24	; 0x35
    34a0:	9e ab       	std	Y+54, r25	; 0x36
    34a2:	af ab       	std	Y+55, r26	; 0x37
    34a4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34a6:	6d a9       	ldd	r22, Y+53	; 0x35
    34a8:	7e a9       	ldd	r23, Y+54	; 0x36
    34aa:	8f a9       	ldd	r24, Y+55	; 0x37
    34ac:	98 ad       	ldd	r25, Y+56	; 0x38
    34ae:	20 e0       	ldi	r18, 0x00	; 0
    34b0:	30 e0       	ldi	r19, 0x00	; 0
    34b2:	4a e7       	ldi	r20, 0x7A	; 122
    34b4:	55 e4       	ldi	r21, 0x45	; 69
    34b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34ba:	dc 01       	movw	r26, r24
    34bc:	cb 01       	movw	r24, r22
    34be:	89 ab       	std	Y+49, r24	; 0x31
    34c0:	9a ab       	std	Y+50, r25	; 0x32
    34c2:	ab ab       	std	Y+51, r26	; 0x33
    34c4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    34c6:	69 a9       	ldd	r22, Y+49	; 0x31
    34c8:	7a a9       	ldd	r23, Y+50	; 0x32
    34ca:	8b a9       	ldd	r24, Y+51	; 0x33
    34cc:	9c a9       	ldd	r25, Y+52	; 0x34
    34ce:	20 e0       	ldi	r18, 0x00	; 0
    34d0:	30 e0       	ldi	r19, 0x00	; 0
    34d2:	40 e8       	ldi	r20, 0x80	; 128
    34d4:	5f e3       	ldi	r21, 0x3F	; 63
    34d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34da:	88 23       	and	r24, r24
    34dc:	2c f4       	brge	.+10     	; 0x34e8 <LCD_voidWriteBitsToSend+0xd2>
		__ticks = 1;
    34de:	81 e0       	ldi	r24, 0x01	; 1
    34e0:	90 e0       	ldi	r25, 0x00	; 0
    34e2:	98 ab       	std	Y+48, r25	; 0x30
    34e4:	8f a7       	std	Y+47, r24	; 0x2f
    34e6:	3f c0       	rjmp	.+126    	; 0x3566 <LCD_voidWriteBitsToSend+0x150>
	else if (__tmp > 65535)
    34e8:	69 a9       	ldd	r22, Y+49	; 0x31
    34ea:	7a a9       	ldd	r23, Y+50	; 0x32
    34ec:	8b a9       	ldd	r24, Y+51	; 0x33
    34ee:	9c a9       	ldd	r25, Y+52	; 0x34
    34f0:	20 e0       	ldi	r18, 0x00	; 0
    34f2:	3f ef       	ldi	r19, 0xFF	; 255
    34f4:	4f e7       	ldi	r20, 0x7F	; 127
    34f6:	57 e4       	ldi	r21, 0x47	; 71
    34f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    34fc:	18 16       	cp	r1, r24
    34fe:	4c f5       	brge	.+82     	; 0x3552 <LCD_voidWriteBitsToSend+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3500:	6d a9       	ldd	r22, Y+53	; 0x35
    3502:	7e a9       	ldd	r23, Y+54	; 0x36
    3504:	8f a9       	ldd	r24, Y+55	; 0x37
    3506:	98 ad       	ldd	r25, Y+56	; 0x38
    3508:	20 e0       	ldi	r18, 0x00	; 0
    350a:	30 e0       	ldi	r19, 0x00	; 0
    350c:	40 e2       	ldi	r20, 0x20	; 32
    350e:	51 e4       	ldi	r21, 0x41	; 65
    3510:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3514:	dc 01       	movw	r26, r24
    3516:	cb 01       	movw	r24, r22
    3518:	bc 01       	movw	r22, r24
    351a:	cd 01       	movw	r24, r26
    351c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3520:	dc 01       	movw	r26, r24
    3522:	cb 01       	movw	r24, r22
    3524:	98 ab       	std	Y+48, r25	; 0x30
    3526:	8f a7       	std	Y+47, r24	; 0x2f
    3528:	0f c0       	rjmp	.+30     	; 0x3548 <LCD_voidWriteBitsToSend+0x132>
    352a:	80 e9       	ldi	r24, 0x90	; 144
    352c:	91 e0       	ldi	r25, 0x01	; 1
    352e:	9e a7       	std	Y+46, r25	; 0x2e
    3530:	8d a7       	std	Y+45, r24	; 0x2d
    3532:	8d a5       	ldd	r24, Y+45	; 0x2d
    3534:	9e a5       	ldd	r25, Y+46	; 0x2e
    3536:	01 97       	sbiw	r24, 0x01	; 1
    3538:	f1 f7       	brne	.-4      	; 0x3536 <LCD_voidWriteBitsToSend+0x120>
    353a:	9e a7       	std	Y+46, r25	; 0x2e
    353c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    353e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3540:	98 a9       	ldd	r25, Y+48	; 0x30
    3542:	01 97       	sbiw	r24, 0x01	; 1
    3544:	98 ab       	std	Y+48, r25	; 0x30
    3546:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3548:	8f a5       	ldd	r24, Y+47	; 0x2f
    354a:	98 a9       	ldd	r25, Y+48	; 0x30
    354c:	00 97       	sbiw	r24, 0x00	; 0
    354e:	69 f7       	brne	.-38     	; 0x352a <LCD_voidWriteBitsToSend+0x114>
    3550:	14 c0       	rjmp	.+40     	; 0x357a <LCD_voidWriteBitsToSend+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3552:	69 a9       	ldd	r22, Y+49	; 0x31
    3554:	7a a9       	ldd	r23, Y+50	; 0x32
    3556:	8b a9       	ldd	r24, Y+51	; 0x33
    3558:	9c a9       	ldd	r25, Y+52	; 0x34
    355a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    355e:	dc 01       	movw	r26, r24
    3560:	cb 01       	movw	r24, r22
    3562:	98 ab       	std	Y+48, r25	; 0x30
    3564:	8f a7       	std	Y+47, r24	; 0x2f
    3566:	8f a5       	ldd	r24, Y+47	; 0x2f
    3568:	98 a9       	ldd	r25, Y+48	; 0x30
    356a:	9c a7       	std	Y+44, r25	; 0x2c
    356c:	8b a7       	std	Y+43, r24	; 0x2b
    356e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3570:	9c a5       	ldd	r25, Y+44	; 0x2c
    3572:	01 97       	sbiw	r24, 0x01	; 1
    3574:	f1 f7       	brne	.-4      	; 0x3572 <LCD_voidWriteBitsToSend+0x15c>
    3576:	9c a7       	std	Y+44, r25	; 0x2c
    3578:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_voidSetPinValue(EN_PORT,EN_PIN, PIN_LOW);
    357a:	80 e0       	ldi	r24, 0x00	; 0
    357c:	62 e0       	ldi	r22, 0x02	; 2
    357e:	40 e0       	ldi	r20, 0x00	; 0
    3580:	0e 94 05 10 	call	0x200a	; 0x200a <DIO_voidSetPinValue>
    3584:	80 e0       	ldi	r24, 0x00	; 0
    3586:	90 e0       	ldi	r25, 0x00	; 0
    3588:	a0 ef       	ldi	r26, 0xF0	; 240
    358a:	b1 e4       	ldi	r27, 0x41	; 65
    358c:	8f a3       	std	Y+39, r24	; 0x27
    358e:	98 a7       	std	Y+40, r25	; 0x28
    3590:	a9 a7       	std	Y+41, r26	; 0x29
    3592:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3594:	6f a1       	ldd	r22, Y+39	; 0x27
    3596:	78 a5       	ldd	r23, Y+40	; 0x28
    3598:	89 a5       	ldd	r24, Y+41	; 0x29
    359a:	9a a5       	ldd	r25, Y+42	; 0x2a
    359c:	20 e0       	ldi	r18, 0x00	; 0
    359e:	30 e0       	ldi	r19, 0x00	; 0
    35a0:	4a e7       	ldi	r20, 0x7A	; 122
    35a2:	55 e4       	ldi	r21, 0x45	; 69
    35a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35a8:	dc 01       	movw	r26, r24
    35aa:	cb 01       	movw	r24, r22
    35ac:	8b a3       	std	Y+35, r24	; 0x23
    35ae:	9c a3       	std	Y+36, r25	; 0x24
    35b0:	ad a3       	std	Y+37, r26	; 0x25
    35b2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    35b4:	6b a1       	ldd	r22, Y+35	; 0x23
    35b6:	7c a1       	ldd	r23, Y+36	; 0x24
    35b8:	8d a1       	ldd	r24, Y+37	; 0x25
    35ba:	9e a1       	ldd	r25, Y+38	; 0x26
    35bc:	20 e0       	ldi	r18, 0x00	; 0
    35be:	30 e0       	ldi	r19, 0x00	; 0
    35c0:	40 e8       	ldi	r20, 0x80	; 128
    35c2:	5f e3       	ldi	r21, 0x3F	; 63
    35c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    35c8:	88 23       	and	r24, r24
    35ca:	2c f4       	brge	.+10     	; 0x35d6 <LCD_voidWriteBitsToSend+0x1c0>
		__ticks = 1;
    35cc:	81 e0       	ldi	r24, 0x01	; 1
    35ce:	90 e0       	ldi	r25, 0x00	; 0
    35d0:	9a a3       	std	Y+34, r25	; 0x22
    35d2:	89 a3       	std	Y+33, r24	; 0x21
    35d4:	3f c0       	rjmp	.+126    	; 0x3654 <LCD_voidWriteBitsToSend+0x23e>
	else if (__tmp > 65535)
    35d6:	6b a1       	ldd	r22, Y+35	; 0x23
    35d8:	7c a1       	ldd	r23, Y+36	; 0x24
    35da:	8d a1       	ldd	r24, Y+37	; 0x25
    35dc:	9e a1       	ldd	r25, Y+38	; 0x26
    35de:	20 e0       	ldi	r18, 0x00	; 0
    35e0:	3f ef       	ldi	r19, 0xFF	; 255
    35e2:	4f e7       	ldi	r20, 0x7F	; 127
    35e4:	57 e4       	ldi	r21, 0x47	; 71
    35e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    35ea:	18 16       	cp	r1, r24
    35ec:	4c f5       	brge	.+82     	; 0x3640 <LCD_voidWriteBitsToSend+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35ee:	6f a1       	ldd	r22, Y+39	; 0x27
    35f0:	78 a5       	ldd	r23, Y+40	; 0x28
    35f2:	89 a5       	ldd	r24, Y+41	; 0x29
    35f4:	9a a5       	ldd	r25, Y+42	; 0x2a
    35f6:	20 e0       	ldi	r18, 0x00	; 0
    35f8:	30 e0       	ldi	r19, 0x00	; 0
    35fa:	40 e2       	ldi	r20, 0x20	; 32
    35fc:	51 e4       	ldi	r21, 0x41	; 65
    35fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3602:	dc 01       	movw	r26, r24
    3604:	cb 01       	movw	r24, r22
    3606:	bc 01       	movw	r22, r24
    3608:	cd 01       	movw	r24, r26
    360a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    360e:	dc 01       	movw	r26, r24
    3610:	cb 01       	movw	r24, r22
    3612:	9a a3       	std	Y+34, r25	; 0x22
    3614:	89 a3       	std	Y+33, r24	; 0x21
    3616:	0f c0       	rjmp	.+30     	; 0x3636 <LCD_voidWriteBitsToSend+0x220>
    3618:	80 e9       	ldi	r24, 0x90	; 144
    361a:	91 e0       	ldi	r25, 0x01	; 1
    361c:	98 a3       	std	Y+32, r25	; 0x20
    361e:	8f 8f       	std	Y+31, r24	; 0x1f
    3620:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3622:	98 a1       	ldd	r25, Y+32	; 0x20
    3624:	01 97       	sbiw	r24, 0x01	; 1
    3626:	f1 f7       	brne	.-4      	; 0x3624 <LCD_voidWriteBitsToSend+0x20e>
    3628:	98 a3       	std	Y+32, r25	; 0x20
    362a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    362c:	89 a1       	ldd	r24, Y+33	; 0x21
    362e:	9a a1       	ldd	r25, Y+34	; 0x22
    3630:	01 97       	sbiw	r24, 0x01	; 1
    3632:	9a a3       	std	Y+34, r25	; 0x22
    3634:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3636:	89 a1       	ldd	r24, Y+33	; 0x21
    3638:	9a a1       	ldd	r25, Y+34	; 0x22
    363a:	00 97       	sbiw	r24, 0x00	; 0
    363c:	69 f7       	brne	.-38     	; 0x3618 <LCD_voidWriteBitsToSend+0x202>
    363e:	14 c0       	rjmp	.+40     	; 0x3668 <LCD_voidWriteBitsToSend+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3640:	6b a1       	ldd	r22, Y+35	; 0x23
    3642:	7c a1       	ldd	r23, Y+36	; 0x24
    3644:	8d a1       	ldd	r24, Y+37	; 0x25
    3646:	9e a1       	ldd	r25, Y+38	; 0x26
    3648:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    364c:	dc 01       	movw	r26, r24
    364e:	cb 01       	movw	r24, r22
    3650:	9a a3       	std	Y+34, r25	; 0x22
    3652:	89 a3       	std	Y+33, r24	; 0x21
    3654:	89 a1       	ldd	r24, Y+33	; 0x21
    3656:	9a a1       	ldd	r25, Y+34	; 0x22
    3658:	9e 8f       	std	Y+30, r25	; 0x1e
    365a:	8d 8f       	std	Y+29, r24	; 0x1d
    365c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    365e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3660:	01 97       	sbiw	r24, 0x01	; 1
    3662:	f1 f7       	brne	.-4      	; 0x3660 <LCD_voidWriteBitsToSend+0x24a>
    3664:	9e 8f       	std	Y+30, r25	; 0x1e
    3666:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(30);

	/*prepare 4 bits LSB to send */
	DIO_voidSetPinValue(D7_PORT,D7_PIN, (copy_u8Byte>> 3) & 1);
    3668:	89 ad       	ldd	r24, Y+57	; 0x39
    366a:	86 95       	lsr	r24
    366c:	86 95       	lsr	r24
    366e:	86 95       	lsr	r24
    3670:	98 2f       	mov	r25, r24
    3672:	91 70       	andi	r25, 0x01	; 1
    3674:	81 e0       	ldi	r24, 0x01	; 1
    3676:	64 e0       	ldi	r22, 0x04	; 4
    3678:	49 2f       	mov	r20, r25
    367a:	0e 94 05 10 	call	0x200a	; 0x200a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D6_PORT,D6_PIN, (copy_u8Byte>> 2) & 1);
    367e:	89 ad       	ldd	r24, Y+57	; 0x39
    3680:	86 95       	lsr	r24
    3682:	86 95       	lsr	r24
    3684:	98 2f       	mov	r25, r24
    3686:	91 70       	andi	r25, 0x01	; 1
    3688:	81 e0       	ldi	r24, 0x01	; 1
    368a:	62 e0       	ldi	r22, 0x02	; 2
    368c:	49 2f       	mov	r20, r25
    368e:	0e 94 05 10 	call	0x200a	; 0x200a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D5_PORT,D5_PIN, (copy_u8Byte>> 1) & 1);
    3692:	89 ad       	ldd	r24, Y+57	; 0x39
    3694:	86 95       	lsr	r24
    3696:	98 2f       	mov	r25, r24
    3698:	91 70       	andi	r25, 0x01	; 1
    369a:	81 e0       	ldi	r24, 0x01	; 1
    369c:	61 e0       	ldi	r22, 0x01	; 1
    369e:	49 2f       	mov	r20, r25
    36a0:	0e 94 05 10 	call	0x200a	; 0x200a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D4_PORT,D4_PIN, (copy_u8Byte>> 0) & 1);
    36a4:	89 ad       	ldd	r24, Y+57	; 0x39
    36a6:	98 2f       	mov	r25, r24
    36a8:	91 70       	andi	r25, 0x01	; 1
    36aa:	81 e0       	ldi	r24, 0x01	; 1
    36ac:	60 e0       	ldi	r22, 0x00	; 0
    36ae:	49 2f       	mov	r20, r25
    36b0:	0e 94 05 10 	call	0x200a	; 0x200a <DIO_voidSetPinValue>

	/* open EN--> make it high --- then after 1m -- close EN -->make it low*/
	DIO_voidSetPinValue(EN_PORT,EN_PIN, PIN_HIGH);
    36b4:	80 e0       	ldi	r24, 0x00	; 0
    36b6:	62 e0       	ldi	r22, 0x02	; 2
    36b8:	41 e0       	ldi	r20, 0x01	; 1
    36ba:	0e 94 05 10 	call	0x200a	; 0x200a <DIO_voidSetPinValue>
    36be:	80 e0       	ldi	r24, 0x00	; 0
    36c0:	90 e0       	ldi	r25, 0x00	; 0
    36c2:	a0 e8       	ldi	r26, 0x80	; 128
    36c4:	bf e3       	ldi	r27, 0x3F	; 63
    36c6:	89 8f       	std	Y+25, r24	; 0x19
    36c8:	9a 8f       	std	Y+26, r25	; 0x1a
    36ca:	ab 8f       	std	Y+27, r26	; 0x1b
    36cc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36ce:	69 8d       	ldd	r22, Y+25	; 0x19
    36d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    36d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    36d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    36d6:	20 e0       	ldi	r18, 0x00	; 0
    36d8:	30 e0       	ldi	r19, 0x00	; 0
    36da:	4a e7       	ldi	r20, 0x7A	; 122
    36dc:	55 e4       	ldi	r21, 0x45	; 69
    36de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36e2:	dc 01       	movw	r26, r24
    36e4:	cb 01       	movw	r24, r22
    36e6:	8d 8b       	std	Y+21, r24	; 0x15
    36e8:	9e 8b       	std	Y+22, r25	; 0x16
    36ea:	af 8b       	std	Y+23, r26	; 0x17
    36ec:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    36ee:	6d 89       	ldd	r22, Y+21	; 0x15
    36f0:	7e 89       	ldd	r23, Y+22	; 0x16
    36f2:	8f 89       	ldd	r24, Y+23	; 0x17
    36f4:	98 8d       	ldd	r25, Y+24	; 0x18
    36f6:	20 e0       	ldi	r18, 0x00	; 0
    36f8:	30 e0       	ldi	r19, 0x00	; 0
    36fa:	40 e8       	ldi	r20, 0x80	; 128
    36fc:	5f e3       	ldi	r21, 0x3F	; 63
    36fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3702:	88 23       	and	r24, r24
    3704:	2c f4       	brge	.+10     	; 0x3710 <LCD_voidWriteBitsToSend+0x2fa>
		__ticks = 1;
    3706:	81 e0       	ldi	r24, 0x01	; 1
    3708:	90 e0       	ldi	r25, 0x00	; 0
    370a:	9c 8b       	std	Y+20, r25	; 0x14
    370c:	8b 8b       	std	Y+19, r24	; 0x13
    370e:	3f c0       	rjmp	.+126    	; 0x378e <LCD_voidWriteBitsToSend+0x378>
	else if (__tmp > 65535)
    3710:	6d 89       	ldd	r22, Y+21	; 0x15
    3712:	7e 89       	ldd	r23, Y+22	; 0x16
    3714:	8f 89       	ldd	r24, Y+23	; 0x17
    3716:	98 8d       	ldd	r25, Y+24	; 0x18
    3718:	20 e0       	ldi	r18, 0x00	; 0
    371a:	3f ef       	ldi	r19, 0xFF	; 255
    371c:	4f e7       	ldi	r20, 0x7F	; 127
    371e:	57 e4       	ldi	r21, 0x47	; 71
    3720:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3724:	18 16       	cp	r1, r24
    3726:	4c f5       	brge	.+82     	; 0x377a <LCD_voidWriteBitsToSend+0x364>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3728:	69 8d       	ldd	r22, Y+25	; 0x19
    372a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    372c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    372e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3730:	20 e0       	ldi	r18, 0x00	; 0
    3732:	30 e0       	ldi	r19, 0x00	; 0
    3734:	40 e2       	ldi	r20, 0x20	; 32
    3736:	51 e4       	ldi	r21, 0x41	; 65
    3738:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    373c:	dc 01       	movw	r26, r24
    373e:	cb 01       	movw	r24, r22
    3740:	bc 01       	movw	r22, r24
    3742:	cd 01       	movw	r24, r26
    3744:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3748:	dc 01       	movw	r26, r24
    374a:	cb 01       	movw	r24, r22
    374c:	9c 8b       	std	Y+20, r25	; 0x14
    374e:	8b 8b       	std	Y+19, r24	; 0x13
    3750:	0f c0       	rjmp	.+30     	; 0x3770 <LCD_voidWriteBitsToSend+0x35a>
    3752:	80 e9       	ldi	r24, 0x90	; 144
    3754:	91 e0       	ldi	r25, 0x01	; 1
    3756:	9a 8b       	std	Y+18, r25	; 0x12
    3758:	89 8b       	std	Y+17, r24	; 0x11
    375a:	89 89       	ldd	r24, Y+17	; 0x11
    375c:	9a 89       	ldd	r25, Y+18	; 0x12
    375e:	01 97       	sbiw	r24, 0x01	; 1
    3760:	f1 f7       	brne	.-4      	; 0x375e <LCD_voidWriteBitsToSend+0x348>
    3762:	9a 8b       	std	Y+18, r25	; 0x12
    3764:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3766:	8b 89       	ldd	r24, Y+19	; 0x13
    3768:	9c 89       	ldd	r25, Y+20	; 0x14
    376a:	01 97       	sbiw	r24, 0x01	; 1
    376c:	9c 8b       	std	Y+20, r25	; 0x14
    376e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3770:	8b 89       	ldd	r24, Y+19	; 0x13
    3772:	9c 89       	ldd	r25, Y+20	; 0x14
    3774:	00 97       	sbiw	r24, 0x00	; 0
    3776:	69 f7       	brne	.-38     	; 0x3752 <LCD_voidWriteBitsToSend+0x33c>
    3778:	14 c0       	rjmp	.+40     	; 0x37a2 <LCD_voidWriteBitsToSend+0x38c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    377a:	6d 89       	ldd	r22, Y+21	; 0x15
    377c:	7e 89       	ldd	r23, Y+22	; 0x16
    377e:	8f 89       	ldd	r24, Y+23	; 0x17
    3780:	98 8d       	ldd	r25, Y+24	; 0x18
    3782:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3786:	dc 01       	movw	r26, r24
    3788:	cb 01       	movw	r24, r22
    378a:	9c 8b       	std	Y+20, r25	; 0x14
    378c:	8b 8b       	std	Y+19, r24	; 0x13
    378e:	8b 89       	ldd	r24, Y+19	; 0x13
    3790:	9c 89       	ldd	r25, Y+20	; 0x14
    3792:	98 8b       	std	Y+16, r25	; 0x10
    3794:	8f 87       	std	Y+15, r24	; 0x0f
    3796:	8f 85       	ldd	r24, Y+15	; 0x0f
    3798:	98 89       	ldd	r25, Y+16	; 0x10
    379a:	01 97       	sbiw	r24, 0x01	; 1
    379c:	f1 f7       	brne	.-4      	; 0x379a <LCD_voidWriteBitsToSend+0x384>
    379e:	98 8b       	std	Y+16, r25	; 0x10
    37a0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_voidSetPinValue(EN_PORT,EN_PIN, PIN_LOW);
    37a2:	80 e0       	ldi	r24, 0x00	; 0
    37a4:	62 e0       	ldi	r22, 0x02	; 2
    37a6:	40 e0       	ldi	r20, 0x00	; 0
    37a8:	0e 94 05 10 	call	0x200a	; 0x200a <DIO_voidSetPinValue>
    37ac:	80 e0       	ldi	r24, 0x00	; 0
    37ae:	90 e0       	ldi	r25, 0x00	; 0
    37b0:	a0 e7       	ldi	r26, 0x70	; 112
    37b2:	b1 e4       	ldi	r27, 0x41	; 65
    37b4:	8b 87       	std	Y+11, r24	; 0x0b
    37b6:	9c 87       	std	Y+12, r25	; 0x0c
    37b8:	ad 87       	std	Y+13, r26	; 0x0d
    37ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    37be:	7c 85       	ldd	r23, Y+12	; 0x0c
    37c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    37c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    37c4:	20 e0       	ldi	r18, 0x00	; 0
    37c6:	30 e0       	ldi	r19, 0x00	; 0
    37c8:	4a e7       	ldi	r20, 0x7A	; 122
    37ca:	55 e4       	ldi	r21, 0x45	; 69
    37cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37d0:	dc 01       	movw	r26, r24
    37d2:	cb 01       	movw	r24, r22
    37d4:	8f 83       	std	Y+7, r24	; 0x07
    37d6:	98 87       	std	Y+8, r25	; 0x08
    37d8:	a9 87       	std	Y+9, r26	; 0x09
    37da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    37dc:	6f 81       	ldd	r22, Y+7	; 0x07
    37de:	78 85       	ldd	r23, Y+8	; 0x08
    37e0:	89 85       	ldd	r24, Y+9	; 0x09
    37e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    37e4:	20 e0       	ldi	r18, 0x00	; 0
    37e6:	30 e0       	ldi	r19, 0x00	; 0
    37e8:	40 e8       	ldi	r20, 0x80	; 128
    37ea:	5f e3       	ldi	r21, 0x3F	; 63
    37ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    37f0:	88 23       	and	r24, r24
    37f2:	2c f4       	brge	.+10     	; 0x37fe <LCD_voidWriteBitsToSend+0x3e8>
		__ticks = 1;
    37f4:	81 e0       	ldi	r24, 0x01	; 1
    37f6:	90 e0       	ldi	r25, 0x00	; 0
    37f8:	9e 83       	std	Y+6, r25	; 0x06
    37fa:	8d 83       	std	Y+5, r24	; 0x05
    37fc:	3f c0       	rjmp	.+126    	; 0x387c <LCD_voidWriteBitsToSend+0x466>
	else if (__tmp > 65535)
    37fe:	6f 81       	ldd	r22, Y+7	; 0x07
    3800:	78 85       	ldd	r23, Y+8	; 0x08
    3802:	89 85       	ldd	r24, Y+9	; 0x09
    3804:	9a 85       	ldd	r25, Y+10	; 0x0a
    3806:	20 e0       	ldi	r18, 0x00	; 0
    3808:	3f ef       	ldi	r19, 0xFF	; 255
    380a:	4f e7       	ldi	r20, 0x7F	; 127
    380c:	57 e4       	ldi	r21, 0x47	; 71
    380e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3812:	18 16       	cp	r1, r24
    3814:	4c f5       	brge	.+82     	; 0x3868 <LCD_voidWriteBitsToSend+0x452>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3816:	6b 85       	ldd	r22, Y+11	; 0x0b
    3818:	7c 85       	ldd	r23, Y+12	; 0x0c
    381a:	8d 85       	ldd	r24, Y+13	; 0x0d
    381c:	9e 85       	ldd	r25, Y+14	; 0x0e
    381e:	20 e0       	ldi	r18, 0x00	; 0
    3820:	30 e0       	ldi	r19, 0x00	; 0
    3822:	40 e2       	ldi	r20, 0x20	; 32
    3824:	51 e4       	ldi	r21, 0x41	; 65
    3826:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    382a:	dc 01       	movw	r26, r24
    382c:	cb 01       	movw	r24, r22
    382e:	bc 01       	movw	r22, r24
    3830:	cd 01       	movw	r24, r26
    3832:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3836:	dc 01       	movw	r26, r24
    3838:	cb 01       	movw	r24, r22
    383a:	9e 83       	std	Y+6, r25	; 0x06
    383c:	8d 83       	std	Y+5, r24	; 0x05
    383e:	0f c0       	rjmp	.+30     	; 0x385e <LCD_voidWriteBitsToSend+0x448>
    3840:	80 e9       	ldi	r24, 0x90	; 144
    3842:	91 e0       	ldi	r25, 0x01	; 1
    3844:	9c 83       	std	Y+4, r25	; 0x04
    3846:	8b 83       	std	Y+3, r24	; 0x03
    3848:	8b 81       	ldd	r24, Y+3	; 0x03
    384a:	9c 81       	ldd	r25, Y+4	; 0x04
    384c:	01 97       	sbiw	r24, 0x01	; 1
    384e:	f1 f7       	brne	.-4      	; 0x384c <LCD_voidWriteBitsToSend+0x436>
    3850:	9c 83       	std	Y+4, r25	; 0x04
    3852:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3854:	8d 81       	ldd	r24, Y+5	; 0x05
    3856:	9e 81       	ldd	r25, Y+6	; 0x06
    3858:	01 97       	sbiw	r24, 0x01	; 1
    385a:	9e 83       	std	Y+6, r25	; 0x06
    385c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    385e:	8d 81       	ldd	r24, Y+5	; 0x05
    3860:	9e 81       	ldd	r25, Y+6	; 0x06
    3862:	00 97       	sbiw	r24, 0x00	; 0
    3864:	69 f7       	brne	.-38     	; 0x3840 <LCD_voidWriteBitsToSend+0x42a>
    3866:	14 c0       	rjmp	.+40     	; 0x3890 <LCD_voidWriteBitsToSend+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3868:	6f 81       	ldd	r22, Y+7	; 0x07
    386a:	78 85       	ldd	r23, Y+8	; 0x08
    386c:	89 85       	ldd	r24, Y+9	; 0x09
    386e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3870:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3874:	dc 01       	movw	r26, r24
    3876:	cb 01       	movw	r24, r22
    3878:	9e 83       	std	Y+6, r25	; 0x06
    387a:	8d 83       	std	Y+5, r24	; 0x05
    387c:	8d 81       	ldd	r24, Y+5	; 0x05
    387e:	9e 81       	ldd	r25, Y+6	; 0x06
    3880:	9a 83       	std	Y+2, r25	; 0x02
    3882:	89 83       	std	Y+1, r24	; 0x01
    3884:	89 81       	ldd	r24, Y+1	; 0x01
    3886:	9a 81       	ldd	r25, Y+2	; 0x02
    3888:	01 97       	sbiw	r24, 0x01	; 1
    388a:	f1 f7       	brne	.-4      	; 0x3888 <LCD_voidWriteBitsToSend+0x472>
    388c:	9a 83       	std	Y+2, r25	; 0x02
    388e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(15);



}
    3890:	e9 96       	adiw	r28, 0x39	; 57
    3892:	0f b6       	in	r0, 0x3f	; 63
    3894:	f8 94       	cli
    3896:	de bf       	out	0x3e, r29	; 62
    3898:	0f be       	out	0x3f, r0	; 63
    389a:	cd bf       	out	0x3d, r28	; 61
    389c:	cf 91       	pop	r28
    389e:	df 91       	pop	r29
    38a0:	08 95       	ret

000038a2 <LCD_voidWriteData>:



/***********************************************************************************/
void LCD_voidWriteData(u8 copy_u8data)
{
    38a2:	df 93       	push	r29
    38a4:	cf 93       	push	r28
    38a6:	0f 92       	push	r0
    38a8:	cd b7       	in	r28, 0x3d	; 61
    38aa:	de b7       	in	r29, 0x3e	; 62
    38ac:	89 83       	std	Y+1, r24	; 0x01
	/*Set RS to HIGH */
	DIO_voidSetPinValue(RS_PORT,RS_PIN,PIN_HIGH);
    38ae:	80 e0       	ldi	r24, 0x00	; 0
    38b0:	63 e0       	ldi	r22, 0x03	; 3
    38b2:	41 e0       	ldi	r20, 0x01	; 1
    38b4:	0e 94 05 10 	call	0x200a	; 0x200a <DIO_voidSetPinValue>


	LCD_voidWriteBitsToSend(copy_u8data);
    38b8:	89 81       	ldd	r24, Y+1	; 0x01
    38ba:	0e 94 0b 1a 	call	0x3416	; 0x3416 <LCD_voidWriteBitsToSend>
}
    38be:	0f 90       	pop	r0
    38c0:	cf 91       	pop	r28
    38c2:	df 91       	pop	r29
    38c4:	08 95       	ret

000038c6 <LCD_voidWriteCommand>:


/***********************************************************************************/

void LCD_voidWriteCommand(u8 copy_u8Command)
{
    38c6:	df 93       	push	r29
    38c8:	cf 93       	push	r28
    38ca:	0f 92       	push	r0
    38cc:	cd b7       	in	r28, 0x3d	; 61
    38ce:	de b7       	in	r29, 0x3e	; 62
    38d0:	89 83       	std	Y+1, r24	; 0x01
	/*Set RS to low */
	DIO_voidSetPinValue(RS_PORT,RS_PIN,PIN_LOW);
    38d2:	80 e0       	ldi	r24, 0x00	; 0
    38d4:	63 e0       	ldi	r22, 0x03	; 3
    38d6:	40 e0       	ldi	r20, 0x00	; 0
    38d8:	0e 94 05 10 	call	0x200a	; 0x200a <DIO_voidSetPinValue>


	LCD_voidWriteBitsToSend(copy_u8Command);
    38dc:	89 81       	ldd	r24, Y+1	; 0x01
    38de:	0e 94 0b 1a 	call	0x3416	; 0x3416 <LCD_voidWriteBitsToSend>
}
    38e2:	0f 90       	pop	r0
    38e4:	cf 91       	pop	r28
    38e6:	df 91       	pop	r29
    38e8:	08 95       	ret

000038ea <LCD_voidWriteString>:

/***********************************************************************************/

void LCD_voidWriteString(u8 * copy_str)
{
    38ea:	df 93       	push	r29
    38ec:	cf 93       	push	r28
    38ee:	00 d0       	rcall	.+0      	; 0x38f0 <LCD_voidWriteString+0x6>
    38f0:	00 d0       	rcall	.+0      	; 0x38f2 <LCD_voidWriteString+0x8>
    38f2:	00 d0       	rcall	.+0      	; 0x38f4 <LCD_voidWriteString+0xa>
    38f4:	cd b7       	in	r28, 0x3d	; 61
    38f6:	de b7       	in	r29, 0x3e	; 62
    38f8:	9e 83       	std	Y+6, r25	; 0x06
    38fa:	8d 83       	std	Y+5, r24	; 0x05
	u32 i= 0;
    38fc:	19 82       	std	Y+1, r1	; 0x01
    38fe:	1a 82       	std	Y+2, r1	; 0x02
    3900:	1b 82       	std	Y+3, r1	; 0x03
    3902:	1c 82       	std	Y+4, r1	; 0x04
    3904:	15 c0       	rjmp	.+42     	; 0x3930 <LCD_voidWriteString+0x46>
	while(copy_str[i] != '\0')
	{
		LCD_voidWriteData(copy_str[i]);
    3906:	29 81       	ldd	r18, Y+1	; 0x01
    3908:	3a 81       	ldd	r19, Y+2	; 0x02
    390a:	8d 81       	ldd	r24, Y+5	; 0x05
    390c:	9e 81       	ldd	r25, Y+6	; 0x06
    390e:	fc 01       	movw	r30, r24
    3910:	e2 0f       	add	r30, r18
    3912:	f3 1f       	adc	r31, r19
    3914:	80 81       	ld	r24, Z
    3916:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <LCD_voidWriteData>
		i++;
    391a:	89 81       	ldd	r24, Y+1	; 0x01
    391c:	9a 81       	ldd	r25, Y+2	; 0x02
    391e:	ab 81       	ldd	r26, Y+3	; 0x03
    3920:	bc 81       	ldd	r27, Y+4	; 0x04
    3922:	01 96       	adiw	r24, 0x01	; 1
    3924:	a1 1d       	adc	r26, r1
    3926:	b1 1d       	adc	r27, r1
    3928:	89 83       	std	Y+1, r24	; 0x01
    392a:	9a 83       	std	Y+2, r25	; 0x02
    392c:	ab 83       	std	Y+3, r26	; 0x03
    392e:	bc 83       	std	Y+4, r27	; 0x04
/***********************************************************************************/

void LCD_voidWriteString(u8 * copy_str)
{
	u32 i= 0;
	while(copy_str[i] != '\0')
    3930:	29 81       	ldd	r18, Y+1	; 0x01
    3932:	3a 81       	ldd	r19, Y+2	; 0x02
    3934:	8d 81       	ldd	r24, Y+5	; 0x05
    3936:	9e 81       	ldd	r25, Y+6	; 0x06
    3938:	fc 01       	movw	r30, r24
    393a:	e2 0f       	add	r30, r18
    393c:	f3 1f       	adc	r31, r19
    393e:	80 81       	ld	r24, Z
    3940:	88 23       	and	r24, r24
    3942:	09 f7       	brne	.-62     	; 0x3906 <LCD_voidWriteString+0x1c>
	{
		LCD_voidWriteData(copy_str[i]);
		i++;
	}
}
    3944:	26 96       	adiw	r28, 0x06	; 6
    3946:	0f b6       	in	r0, 0x3f	; 63
    3948:	f8 94       	cli
    394a:	de bf       	out	0x3e, r29	; 62
    394c:	0f be       	out	0x3f, r0	; 63
    394e:	cd bf       	out	0x3d, r28	; 61
    3950:	cf 91       	pop	r28
    3952:	df 91       	pop	r29
    3954:	08 95       	ret

00003956 <LCD_voidGoToXY>:


/***********************************************************************************/
void LCD_voidGoToXY(u8 copy_u8row,u8 copy_u8col)
{
    3956:	df 93       	push	r29
    3958:	cf 93       	push	r28
    395a:	cd b7       	in	r28, 0x3d	; 61
    395c:	de b7       	in	r29, 0x3e	; 62
    395e:	27 97       	sbiw	r28, 0x07	; 7
    3960:	0f b6       	in	r0, 0x3f	; 63
    3962:	f8 94       	cli
    3964:	de bf       	out	0x3e, r29	; 62
    3966:	0f be       	out	0x3f, r0	; 63
    3968:	cd bf       	out	0x3d, r28	; 61
    396a:	8e 83       	std	Y+6, r24	; 0x06
    396c:	6f 83       	std	Y+7, r22	; 0x07
	 * 0x40 --> address row 1
	 * 0x14 --> address row 2
	 * 0x54 --> address row 3
	 * copy_u8col --> col num
	 * */
	u8 rows_address[4]={0x00,0x40,0x14,0x54};
    396e:	1a 82       	std	Y+2, r1	; 0x02
    3970:	80 e4       	ldi	r24, 0x40	; 64
    3972:	8b 83       	std	Y+3, r24	; 0x03
    3974:	84 e1       	ldi	r24, 0x14	; 20
    3976:	8c 83       	std	Y+4, r24	; 0x04
    3978:	84 e5       	ldi	r24, 0x54	; 84
    397a:	8d 83       	std	Y+5, r24	; 0x05

	u8 local_address=rows_address[copy_u8row]+copy_u8col;
    397c:	8e 81       	ldd	r24, Y+6	; 0x06
    397e:	28 2f       	mov	r18, r24
    3980:	30 e0       	ldi	r19, 0x00	; 0
    3982:	ce 01       	movw	r24, r28
    3984:	02 96       	adiw	r24, 0x02	; 2
    3986:	fc 01       	movw	r30, r24
    3988:	e2 0f       	add	r30, r18
    398a:	f3 1f       	adc	r31, r19
    398c:	90 81       	ld	r25, Z
    398e:	8f 81       	ldd	r24, Y+7	; 0x07
    3990:	89 0f       	add	r24, r25
    3992:	89 83       	std	Y+1, r24	; 0x01

	LCD_voidWriteCommand(local_address+SET_DDRAM_ADDRESS) ;
    3994:	89 81       	ldd	r24, Y+1	; 0x01
    3996:	80 58       	subi	r24, 0x80	; 128
    3998:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <LCD_voidWriteCommand>

}
    399c:	27 96       	adiw	r28, 0x07	; 7
    399e:	0f b6       	in	r0, 0x3f	; 63
    39a0:	f8 94       	cli
    39a2:	de bf       	out	0x3e, r29	; 62
    39a4:	0f be       	out	0x3f, r0	; 63
    39a6:	cd bf       	out	0x3d, r28	; 61
    39a8:	cf 91       	pop	r28
    39aa:	df 91       	pop	r29
    39ac:	08 95       	ret

000039ae <LCD_voidClear>:




	void LCD_voidClear(void)
	{
    39ae:	df 93       	push	r29
    39b0:	cf 93       	push	r28
    39b2:	cd b7       	in	r28, 0x3d	; 61
    39b4:	de b7       	in	r29, 0x3e	; 62
		LCD_voidWriteCommand(DISPLAY_CLEAR);
    39b6:	81 e0       	ldi	r24, 0x01	; 1
    39b8:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <LCD_voidWriteCommand>
	}
    39bc:	cf 91       	pop	r28
    39be:	df 91       	pop	r29
    39c0:	08 95       	ret

000039c2 <LCD_voidWriteNumber>:



	void LCD_voidWriteNumber( u32 Copy_u8num )

	{
    39c2:	0f 93       	push	r16
    39c4:	1f 93       	push	r17
    39c6:	df 93       	push	r29
    39c8:	cf 93       	push	r28
    39ca:	cd b7       	in	r28, 0x3d	; 61
    39cc:	de b7       	in	r29, 0x3e	; 62
    39ce:	63 97       	sbiw	r28, 0x13	; 19
    39d0:	0f b6       	in	r0, 0x3f	; 63
    39d2:	f8 94       	cli
    39d4:	de bf       	out	0x3e, r29	; 62
    39d6:	0f be       	out	0x3f, r0	; 63
    39d8:	cd bf       	out	0x3d, r28	; 61
    39da:	68 8b       	std	Y+16, r22	; 0x10
    39dc:	79 8b       	std	Y+17, r23	; 0x11
    39de:	8a 8b       	std	Y+18, r24	; 0x12
    39e0:	9b 8b       	std	Y+19, r25	; 0x13
		u32 LOCAL_NUMBER=Copy_u8num ;
    39e2:	88 89       	ldd	r24, Y+16	; 0x10
    39e4:	99 89       	ldd	r25, Y+17	; 0x11
    39e6:	aa 89       	ldd	r26, Y+18	; 0x12
    39e8:	bb 89       	ldd	r27, Y+19	; 0x13
    39ea:	8a 83       	std	Y+2, r24	; 0x02
    39ec:	9b 83       	std	Y+3, r25	; 0x03
    39ee:	ac 83       	std	Y+4, r26	; 0x04
    39f0:	bd 83       	std	Y+5, r27	; 0x05
		u8 LOCAL_ARR[10] ,i=0 ;
    39f2:	19 82       	std	Y+1, r1	; 0x01

		do
		{
			LOCAL_ARR[i]= ( (LOCAL_NUMBER%10)+48 );
    39f4:	89 81       	ldd	r24, Y+1	; 0x01
    39f6:	08 2f       	mov	r16, r24
    39f8:	10 e0       	ldi	r17, 0x00	; 0
    39fa:	8a 81       	ldd	r24, Y+2	; 0x02
    39fc:	9b 81       	ldd	r25, Y+3	; 0x03
    39fe:	ac 81       	ldd	r26, Y+4	; 0x04
    3a00:	bd 81       	ldd	r27, Y+5	; 0x05
    3a02:	2a e0       	ldi	r18, 0x0A	; 10
    3a04:	30 e0       	ldi	r19, 0x00	; 0
    3a06:	40 e0       	ldi	r20, 0x00	; 0
    3a08:	50 e0       	ldi	r21, 0x00	; 0
    3a0a:	bc 01       	movw	r22, r24
    3a0c:	cd 01       	movw	r24, r26
    3a0e:	0e 94 6e 22 	call	0x44dc	; 0x44dc <__udivmodsi4>
    3a12:	dc 01       	movw	r26, r24
    3a14:	cb 01       	movw	r24, r22
    3a16:	28 2f       	mov	r18, r24
    3a18:	20 5d       	subi	r18, 0xD0	; 208
    3a1a:	ce 01       	movw	r24, r28
    3a1c:	06 96       	adiw	r24, 0x06	; 6
    3a1e:	fc 01       	movw	r30, r24
    3a20:	e0 0f       	add	r30, r16
    3a22:	f1 1f       	adc	r31, r17
    3a24:	20 83       	st	Z, r18
			LOCAL_NUMBER=LOCAL_NUMBER/10 ;
    3a26:	8a 81       	ldd	r24, Y+2	; 0x02
    3a28:	9b 81       	ldd	r25, Y+3	; 0x03
    3a2a:	ac 81       	ldd	r26, Y+4	; 0x04
    3a2c:	bd 81       	ldd	r27, Y+5	; 0x05
    3a2e:	2a e0       	ldi	r18, 0x0A	; 10
    3a30:	30 e0       	ldi	r19, 0x00	; 0
    3a32:	40 e0       	ldi	r20, 0x00	; 0
    3a34:	50 e0       	ldi	r21, 0x00	; 0
    3a36:	bc 01       	movw	r22, r24
    3a38:	cd 01       	movw	r24, r26
    3a3a:	0e 94 6e 22 	call	0x44dc	; 0x44dc <__udivmodsi4>
    3a3e:	da 01       	movw	r26, r20
    3a40:	c9 01       	movw	r24, r18
    3a42:	8a 83       	std	Y+2, r24	; 0x02
    3a44:	9b 83       	std	Y+3, r25	; 0x03
    3a46:	ac 83       	std	Y+4, r26	; 0x04
    3a48:	bd 83       	std	Y+5, r27	; 0x05
			i++ ;
    3a4a:	89 81       	ldd	r24, Y+1	; 0x01
    3a4c:	8f 5f       	subi	r24, 0xFF	; 255
    3a4e:	89 83       	std	Y+1, r24	; 0x01
		}
		while(LOCAL_NUMBER!=0);
    3a50:	8a 81       	ldd	r24, Y+2	; 0x02
    3a52:	9b 81       	ldd	r25, Y+3	; 0x03
    3a54:	ac 81       	ldd	r26, Y+4	; 0x04
    3a56:	bd 81       	ldd	r27, Y+5	; 0x05
    3a58:	00 97       	sbiw	r24, 0x00	; 0
    3a5a:	a1 05       	cpc	r26, r1
    3a5c:	b1 05       	cpc	r27, r1
    3a5e:	51 f6       	brne	.-108    	; 0x39f4 <LCD_voidWriteNumber+0x32>
    3a60:	11 c0       	rjmp	.+34     	; 0x3a84 <LCD_voidWriteNumber+0xc2>


		for(;i>0;i--)
		{
			LCD_voidWriteData(LOCAL_ARR[i-1]);
    3a62:	89 81       	ldd	r24, Y+1	; 0x01
    3a64:	88 2f       	mov	r24, r24
    3a66:	90 e0       	ldi	r25, 0x00	; 0
    3a68:	9c 01       	movw	r18, r24
    3a6a:	21 50       	subi	r18, 0x01	; 1
    3a6c:	30 40       	sbci	r19, 0x00	; 0
    3a6e:	ce 01       	movw	r24, r28
    3a70:	06 96       	adiw	r24, 0x06	; 6
    3a72:	fc 01       	movw	r30, r24
    3a74:	e2 0f       	add	r30, r18
    3a76:	f3 1f       	adc	r31, r19
    3a78:	80 81       	ld	r24, Z
    3a7a:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <LCD_voidWriteData>
			i++ ;
		}
		while(LOCAL_NUMBER!=0);


		for(;i>0;i--)
    3a7e:	89 81       	ldd	r24, Y+1	; 0x01
    3a80:	81 50       	subi	r24, 0x01	; 1
    3a82:	89 83       	std	Y+1, r24	; 0x01
    3a84:	89 81       	ldd	r24, Y+1	; 0x01
    3a86:	88 23       	and	r24, r24
    3a88:	61 f7       	brne	.-40     	; 0x3a62 <LCD_voidWriteNumber+0xa0>
			LCD_voidWriteData(LOCAL_ARR[i-1]);
		}



	}
    3a8a:	63 96       	adiw	r28, 0x13	; 19
    3a8c:	0f b6       	in	r0, 0x3f	; 63
    3a8e:	f8 94       	cli
    3a90:	de bf       	out	0x3e, r29	; 62
    3a92:	0f be       	out	0x3f, r0	; 63
    3a94:	cd bf       	out	0x3d, r28	; 61
    3a96:	cf 91       	pop	r28
    3a98:	df 91       	pop	r29
    3a9a:	1f 91       	pop	r17
    3a9c:	0f 91       	pop	r16
    3a9e:	08 95       	ret

00003aa0 <HKEYPAD_enInit>:
 *
 * */


ErrorState_t HKEYPAD_enInit(void)
{
    3aa0:	df 93       	push	r29
    3aa2:	cf 93       	push	r28
    3aa4:	cd b7       	in	r28, 0x3d	; 61
    3aa6:	de b7       	in	r29, 0x3e	; 62
	// configure rows to be o/p
	MDIO_voidsetPinDirection(HKEYPAD_R0_PIN, OUTPUT);
    3aa8:	83 e2       	ldi	r24, 0x23	; 35
    3aaa:	61 e0       	ldi	r22, 0x01	; 1
    3aac:	0e 94 27 09 	call	0x124e	; 0x124e <MDIO_voidsetPinDirection>
	MDIO_voidsetPinDirection(HKEYPAD_R1_PIN, OUTPUT);
    3ab0:	82 e2       	ldi	r24, 0x22	; 34
    3ab2:	61 e0       	ldi	r22, 0x01	; 1
    3ab4:	0e 94 27 09 	call	0x124e	; 0x124e <MDIO_voidsetPinDirection>
	MDIO_voidsetPinDirection(HKEYPAD_R2_PIN, OUTPUT);
    3ab8:	81 e2       	ldi	r24, 0x21	; 33
    3aba:	61 e0       	ldi	r22, 0x01	; 1
    3abc:	0e 94 27 09 	call	0x124e	; 0x124e <MDIO_voidsetPinDirection>
	MDIO_voidsetPinDirection(HKEYPAD_R3_PIN, OUTPUT);
    3ac0:	80 e2       	ldi	r24, 0x20	; 32
    3ac2:	61 e0       	ldi	r22, 0x01	; 1
    3ac4:	0e 94 27 09 	call	0x124e	; 0x124e <MDIO_voidsetPinDirection>

	// configure cols to be i/p
	MDIO_voidsetPinDirection(HKEYPAD_C0_PIN, INPUT);
    3ac8:	8f e2       	ldi	r24, 0x2F	; 47
    3aca:	60 e0       	ldi	r22, 0x00	; 0
    3acc:	0e 94 27 09 	call	0x124e	; 0x124e <MDIO_voidsetPinDirection>
	MDIO_voidsetPinDirection(HKEYPAD_C1_PIN, INPUT);
    3ad0:	8e e2       	ldi	r24, 0x2E	; 46
    3ad2:	60 e0       	ldi	r22, 0x00	; 0
    3ad4:	0e 94 27 09 	call	0x124e	; 0x124e <MDIO_voidsetPinDirection>
	MDIO_voidsetPinDirection(HKEYPAD_C2_PIN, INPUT);
    3ad8:	8d e2       	ldi	r24, 0x2D	; 45
    3ada:	60 e0       	ldi	r22, 0x00	; 0
    3adc:	0e 94 27 09 	call	0x124e	; 0x124e <MDIO_voidsetPinDirection>
	MDIO_voidsetPinDirection(HKEYPAD_C3_PIN, INPUT);
    3ae0:	8b e2       	ldi	r24, 0x2B	; 43
    3ae2:	60 e0       	ldi	r22, 0x00	; 0
    3ae4:	0e 94 27 09 	call	0x124e	; 0x124e <MDIO_voidsetPinDirection>

	// we can activate pull up resistors for the input pins by setting their port registers with high


	//intialize o/p (Rows -> High because zero is activing the row )
	MDIO_voidsetPinValue(HKEYPAD_R0_PIN, HIGH);
    3ae8:	83 e2       	ldi	r24, 0x23	; 35
    3aea:	61 e0       	ldi	r22, 0x01	; 1
    3aec:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
	MDIO_voidsetPinValue(HKEYPAD_R1_PIN, HIGH);
    3af0:	82 e2       	ldi	r24, 0x22	; 34
    3af2:	61 e0       	ldi	r22, 0x01	; 1
    3af4:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
	MDIO_voidsetPinValue(HKEYPAD_R2_PIN, HIGH);
    3af8:	81 e2       	ldi	r24, 0x21	; 33
    3afa:	61 e0       	ldi	r22, 0x01	; 1
    3afc:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
	MDIO_voidsetPinValue(HKEYPAD_R3_PIN, HIGH);
    3b00:	80 e2       	ldi	r24, 0x20	; 32
    3b02:	61 e0       	ldi	r22, 0x01	; 1
    3b04:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
	MDIO_voidsetPinValue(HKEYPAD_C0_PIN, HIGH);
	MDIO_voidsetPinValue(HKEYPAD_C1_PIN, HIGH);
	MDIO_voidsetPinValue(HKEYPAD_C2_PIN, HIGH);
	MDIO_voidsetPinValue(HKEYPAD_C3_PIN, HIGH);
#endif
	return SUCCESS;
    3b08:	82 e0       	ldi	r24, 0x02	; 2
}
    3b0a:	cf 91       	pop	r28
    3b0c:	df 91       	pop	r29
    3b0e:	08 95       	ret

00003b10 <HKEYPAD_enGetPressedKey>:
ErrorState_t HKEYPAD_enGetPressedKey(u8 * ptrKey)
{
    3b10:	df 93       	push	r29
    3b12:	cf 93       	push	r28
    3b14:	cd b7       	in	r28, 0x3d	; 61
    3b16:	de b7       	in	r29, 0x3e	; 62
    3b18:	e2 97       	sbiw	r28, 0x32	; 50
    3b1a:	0f b6       	in	r0, 0x3f	; 63
    3b1c:	f8 94       	cli
    3b1e:	de bf       	out	0x3e, r29	; 62
    3b20:	0f be       	out	0x3f, r0	; 63
    3b22:	cd bf       	out	0x3d, r28	; 61
    3b24:	9d a7       	std	Y+45, r25	; 0x2d
    3b26:	8c a7       	std	Y+44, r24	; 0x2c
	u8 Local_u8PressedKey= HKEYPAD_NO_PRESSED_KEY ;
    3b28:	8f ef       	ldi	r24, 0xFF	; 255
    3b2a:	8a 8b       	std	Y+18, r24	; 0x12
	u8 Local_u8PinRead;
	u8 row_index;
	u8 col_index;
	u8 flag = 0;
    3b2c:	1f 86       	std	Y+15, r1	; 0x0f
	u8 Local_u8ArrKeys[4][4]= HKEYPAD_KEYS;
    3b2e:	ce 01       	movw	r24, r28
    3b30:	44 96       	adiw	r24, 0x14	; 20
    3b32:	9f a7       	std	Y+47, r25	; 0x2f
    3b34:	8e a7       	std	Y+46, r24	; 0x2e
    3b36:	e0 e8       	ldi	r30, 0x80	; 128
    3b38:	f0 e0       	ldi	r31, 0x00	; 0
    3b3a:	f9 ab       	std	Y+49, r31	; 0x31
    3b3c:	e8 ab       	std	Y+48, r30	; 0x30
    3b3e:	f0 e1       	ldi	r31, 0x10	; 16
    3b40:	fa ab       	std	Y+50, r31	; 0x32
    3b42:	e8 a9       	ldd	r30, Y+48	; 0x30
    3b44:	f9 a9       	ldd	r31, Y+49	; 0x31
    3b46:	00 80       	ld	r0, Z
    3b48:	88 a9       	ldd	r24, Y+48	; 0x30
    3b4a:	99 a9       	ldd	r25, Y+49	; 0x31
    3b4c:	01 96       	adiw	r24, 0x01	; 1
    3b4e:	99 ab       	std	Y+49, r25	; 0x31
    3b50:	88 ab       	std	Y+48, r24	; 0x30
    3b52:	ee a5       	ldd	r30, Y+46	; 0x2e
    3b54:	ff a5       	ldd	r31, Y+47	; 0x2f
    3b56:	00 82       	st	Z, r0
    3b58:	8e a5       	ldd	r24, Y+46	; 0x2e
    3b5a:	9f a5       	ldd	r25, Y+47	; 0x2f
    3b5c:	01 96       	adiw	r24, 0x01	; 1
    3b5e:	9f a7       	std	Y+47, r25	; 0x2f
    3b60:	8e a7       	std	Y+46, r24	; 0x2e
    3b62:	9a a9       	ldd	r25, Y+50	; 0x32
    3b64:	91 50       	subi	r25, 0x01	; 1
    3b66:	9a ab       	std	Y+50, r25	; 0x32
    3b68:	ea a9       	ldd	r30, Y+50	; 0x32
    3b6a:	ee 23       	and	r30, r30
    3b6c:	51 f7       	brne	.-44     	; 0x3b42 <HKEYPAD_enGetPressedKey+0x32>
	u8 rowArr[]={HKEYPAD_R0_PIN,HKEYPAD_R1_PIN,HKEYPAD_R2_PIN,HKEYPAD_R3_PIN};
    3b6e:	83 e2       	ldi	r24, 0x23	; 35
    3b70:	8c a3       	std	Y+36, r24	; 0x24
    3b72:	82 e2       	ldi	r24, 0x22	; 34
    3b74:	8d a3       	std	Y+37, r24	; 0x25
    3b76:	81 e2       	ldi	r24, 0x21	; 33
    3b78:	8e a3       	std	Y+38, r24	; 0x26
    3b7a:	80 e2       	ldi	r24, 0x20	; 32
    3b7c:	8f a3       	std	Y+39, r24	; 0x27
	u8 colArr[]={HKEYPAD_C0_PIN,HKEYPAD_C1_PIN,HKEYPAD_C2_PIN,HKEYPAD_C3_PIN};
    3b7e:	8f e2       	ldi	r24, 0x2F	; 47
    3b80:	88 a7       	std	Y+40, r24	; 0x28
    3b82:	8e e2       	ldi	r24, 0x2E	; 46
    3b84:	89 a7       	std	Y+41, r24	; 0x29
    3b86:	8d e2       	ldi	r24, 0x2D	; 45
    3b88:	8a a7       	std	Y+42, r24	; 0x2a
    3b8a:	8b e2       	ldi	r24, 0x2B	; 43
    3b8c:	8b a7       	std	Y+43, r24	; 0x2b
	for(row_index= 0 ; row_index<=3 && flag ==0 ; row_index++ )
    3b8e:	19 8a       	std	Y+17, r1	; 0x11
    3b90:	e4 c0       	rjmp	.+456    	; 0x3d5a <HKEYPAD_enGetPressedKey+0x24a>
	{
		// output 0 (ground) on row (Activate row)
		MDIO_voidsetPinValue(rowArr[row_index],LOW);
    3b92:	89 89       	ldd	r24, Y+17	; 0x11
    3b94:	28 2f       	mov	r18, r24
    3b96:	30 e0       	ldi	r19, 0x00	; 0
    3b98:	ce 01       	movw	r24, r28
    3b9a:	84 96       	adiw	r24, 0x24	; 36
    3b9c:	fc 01       	movw	r30, r24
    3b9e:	e2 0f       	add	r30, r18
    3ba0:	f3 1f       	adc	r31, r19
    3ba2:	80 81       	ld	r24, Z
    3ba4:	60 e0       	ldi	r22, 0x00	; 0
    3ba6:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
		for(col_index= 0 ; col_index<=3 ; col_index++ )
    3baa:	18 8a       	std	Y+16, r1	; 0x10
    3bac:	c3 c0       	rjmp	.+390    	; 0x3d34 <HKEYPAD_enGetPressedKey+0x224>
		{
			//read Col
			MDIO_voidgetPinValue(colArr[col_index], &Local_u8PinRead);
    3bae:	88 89       	ldd	r24, Y+16	; 0x10
    3bb0:	28 2f       	mov	r18, r24
    3bb2:	30 e0       	ldi	r19, 0x00	; 0
    3bb4:	ce 01       	movw	r24, r28
    3bb6:	88 96       	adiw	r24, 0x28	; 40
    3bb8:	fc 01       	movw	r30, r24
    3bba:	e2 0f       	add	r30, r18
    3bbc:	f3 1f       	adc	r31, r19
    3bbe:	80 81       	ld	r24, Z
    3bc0:	9e 01       	movw	r18, r28
    3bc2:	2d 5e       	subi	r18, 0xED	; 237
    3bc4:	3f 4f       	sbci	r19, 0xFF	; 255
    3bc6:	b9 01       	movw	r22, r18
    3bc8:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <MDIO_voidgetPinValue>

			if(Local_u8PinRead == HKEYPAD_KEY_PRESSED)
    3bcc:	8b 89       	ldd	r24, Y+19	; 0x13
    3bce:	88 23       	and	r24, r24
    3bd0:	09 f0       	breq	.+2      	; 0x3bd4 <HKEYPAD_enGetPressedKey+0xc4>
    3bd2:	ad c0       	rjmp	.+346    	; 0x3d2e <HKEYPAD_enGetPressedKey+0x21e>
    3bd4:	80 e0       	ldi	r24, 0x00	; 0
    3bd6:	90 e0       	ldi	r25, 0x00	; 0
    3bd8:	a0 ea       	ldi	r26, 0xA0	; 160
    3bda:	b1 e4       	ldi	r27, 0x41	; 65
    3bdc:	8b 87       	std	Y+11, r24	; 0x0b
    3bde:	9c 87       	std	Y+12, r25	; 0x0c
    3be0:	ad 87       	std	Y+13, r26	; 0x0d
    3be2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3be4:	6b 85       	ldd	r22, Y+11	; 0x0b
    3be6:	7c 85       	ldd	r23, Y+12	; 0x0c
    3be8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bea:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bec:	20 e0       	ldi	r18, 0x00	; 0
    3bee:	30 e0       	ldi	r19, 0x00	; 0
    3bf0:	4a e7       	ldi	r20, 0x7A	; 122
    3bf2:	55 e4       	ldi	r21, 0x45	; 69
    3bf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bf8:	dc 01       	movw	r26, r24
    3bfa:	cb 01       	movw	r24, r22
    3bfc:	8f 83       	std	Y+7, r24	; 0x07
    3bfe:	98 87       	std	Y+8, r25	; 0x08
    3c00:	a9 87       	std	Y+9, r26	; 0x09
    3c02:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c04:	6f 81       	ldd	r22, Y+7	; 0x07
    3c06:	78 85       	ldd	r23, Y+8	; 0x08
    3c08:	89 85       	ldd	r24, Y+9	; 0x09
    3c0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c0c:	20 e0       	ldi	r18, 0x00	; 0
    3c0e:	30 e0       	ldi	r19, 0x00	; 0
    3c10:	40 e8       	ldi	r20, 0x80	; 128
    3c12:	5f e3       	ldi	r21, 0x3F	; 63
    3c14:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3c18:	88 23       	and	r24, r24
    3c1a:	2c f4       	brge	.+10     	; 0x3c26 <HKEYPAD_enGetPressedKey+0x116>
		__ticks = 1;
    3c1c:	81 e0       	ldi	r24, 0x01	; 1
    3c1e:	90 e0       	ldi	r25, 0x00	; 0
    3c20:	9e 83       	std	Y+6, r25	; 0x06
    3c22:	8d 83       	std	Y+5, r24	; 0x05
    3c24:	3f c0       	rjmp	.+126    	; 0x3ca4 <HKEYPAD_enGetPressedKey+0x194>
	else if (__tmp > 65535)
    3c26:	6f 81       	ldd	r22, Y+7	; 0x07
    3c28:	78 85       	ldd	r23, Y+8	; 0x08
    3c2a:	89 85       	ldd	r24, Y+9	; 0x09
    3c2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c2e:	20 e0       	ldi	r18, 0x00	; 0
    3c30:	3f ef       	ldi	r19, 0xFF	; 255
    3c32:	4f e7       	ldi	r20, 0x7F	; 127
    3c34:	57 e4       	ldi	r21, 0x47	; 71
    3c36:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3c3a:	18 16       	cp	r1, r24
    3c3c:	4c f5       	brge	.+82     	; 0x3c90 <HKEYPAD_enGetPressedKey+0x180>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c40:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c42:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c44:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c46:	20 e0       	ldi	r18, 0x00	; 0
    3c48:	30 e0       	ldi	r19, 0x00	; 0
    3c4a:	40 e2       	ldi	r20, 0x20	; 32
    3c4c:	51 e4       	ldi	r21, 0x41	; 65
    3c4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c52:	dc 01       	movw	r26, r24
    3c54:	cb 01       	movw	r24, r22
    3c56:	bc 01       	movw	r22, r24
    3c58:	cd 01       	movw	r24, r26
    3c5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c5e:	dc 01       	movw	r26, r24
    3c60:	cb 01       	movw	r24, r22
    3c62:	9e 83       	std	Y+6, r25	; 0x06
    3c64:	8d 83       	std	Y+5, r24	; 0x05
    3c66:	0f c0       	rjmp	.+30     	; 0x3c86 <HKEYPAD_enGetPressedKey+0x176>
    3c68:	80 e9       	ldi	r24, 0x90	; 144
    3c6a:	91 e0       	ldi	r25, 0x01	; 1
    3c6c:	9c 83       	std	Y+4, r25	; 0x04
    3c6e:	8b 83       	std	Y+3, r24	; 0x03
    3c70:	8b 81       	ldd	r24, Y+3	; 0x03
    3c72:	9c 81       	ldd	r25, Y+4	; 0x04
    3c74:	01 97       	sbiw	r24, 0x01	; 1
    3c76:	f1 f7       	brne	.-4      	; 0x3c74 <HKEYPAD_enGetPressedKey+0x164>
    3c78:	9c 83       	std	Y+4, r25	; 0x04
    3c7a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c7c:	8d 81       	ldd	r24, Y+5	; 0x05
    3c7e:	9e 81       	ldd	r25, Y+6	; 0x06
    3c80:	01 97       	sbiw	r24, 0x01	; 1
    3c82:	9e 83       	std	Y+6, r25	; 0x06
    3c84:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c86:	8d 81       	ldd	r24, Y+5	; 0x05
    3c88:	9e 81       	ldd	r25, Y+6	; 0x06
    3c8a:	00 97       	sbiw	r24, 0x00	; 0
    3c8c:	69 f7       	brne	.-38     	; 0x3c68 <HKEYPAD_enGetPressedKey+0x158>
    3c8e:	14 c0       	rjmp	.+40     	; 0x3cb8 <HKEYPAD_enGetPressedKey+0x1a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c90:	6f 81       	ldd	r22, Y+7	; 0x07
    3c92:	78 85       	ldd	r23, Y+8	; 0x08
    3c94:	89 85       	ldd	r24, Y+9	; 0x09
    3c96:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c9c:	dc 01       	movw	r26, r24
    3c9e:	cb 01       	movw	r24, r22
    3ca0:	9e 83       	std	Y+6, r25	; 0x06
    3ca2:	8d 83       	std	Y+5, r24	; 0x05
    3ca4:	8d 81       	ldd	r24, Y+5	; 0x05
    3ca6:	9e 81       	ldd	r25, Y+6	; 0x06
    3ca8:	9a 83       	std	Y+2, r25	; 0x02
    3caa:	89 83       	std	Y+1, r24	; 0x01
    3cac:	89 81       	ldd	r24, Y+1	; 0x01
    3cae:	9a 81       	ldd	r25, Y+2	; 0x02
    3cb0:	01 97       	sbiw	r24, 0x01	; 1
    3cb2:	f1 f7       	brne	.-4      	; 0x3cb0 <HKEYPAD_enGetPressedKey+0x1a0>
    3cb4:	9a 83       	std	Y+2, r25	; 0x02
    3cb6:	89 83       	std	Y+1, r24	; 0x01
				{
					// for debouncing
					_delay_ms(20);
					// Second Read
					MDIO_voidgetPinValue(colArr[col_index], &Local_u8PinRead); //1
    3cb8:	88 89       	ldd	r24, Y+16	; 0x10
    3cba:	28 2f       	mov	r18, r24
    3cbc:	30 e0       	ldi	r19, 0x00	; 0
    3cbe:	ce 01       	movw	r24, r28
    3cc0:	88 96       	adiw	r24, 0x28	; 40
    3cc2:	fc 01       	movw	r30, r24
    3cc4:	e2 0f       	add	r30, r18
    3cc6:	f3 1f       	adc	r31, r19
    3cc8:	80 81       	ld	r24, Z
    3cca:	9e 01       	movw	r18, r28
    3ccc:	2d 5e       	subi	r18, 0xED	; 237
    3cce:	3f 4f       	sbci	r19, 0xFF	; 255
    3cd0:	b9 01       	movw	r22, r18
    3cd2:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <MDIO_voidgetPinValue>
					if(Local_u8PinRead == HKEYPAD_KEY_PRESSED)
    3cd6:	8b 89       	ldd	r24, Y+19	; 0x13
    3cd8:	88 23       	and	r24, r24
    3cda:	49 f5       	brne	.+82     	; 0x3d2e <HKEYPAD_enGetPressedKey+0x21e>
    3cdc:	0f c0       	rjmp	.+30     	; 0x3cfc <HKEYPAD_enGetPressedKey+0x1ec>
					{
						// for Single Press
						while(Local_u8PinRead == HKEYPAD_KEY_PRESSED)
						{
							MDIO_voidgetPinValue(colArr[col_index], &Local_u8PinRead);
    3cde:	88 89       	ldd	r24, Y+16	; 0x10
    3ce0:	28 2f       	mov	r18, r24
    3ce2:	30 e0       	ldi	r19, 0x00	; 0
    3ce4:	ce 01       	movw	r24, r28
    3ce6:	88 96       	adiw	r24, 0x28	; 40
    3ce8:	fc 01       	movw	r30, r24
    3cea:	e2 0f       	add	r30, r18
    3cec:	f3 1f       	adc	r31, r19
    3cee:	80 81       	ld	r24, Z
    3cf0:	9e 01       	movw	r18, r28
    3cf2:	2d 5e       	subi	r18, 0xED	; 237
    3cf4:	3f 4f       	sbci	r19, 0xFF	; 255
    3cf6:	b9 01       	movw	r22, r18
    3cf8:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <MDIO_voidgetPinValue>
					// Second Read
					MDIO_voidgetPinValue(colArr[col_index], &Local_u8PinRead); //1
					if(Local_u8PinRead == HKEYPAD_KEY_PRESSED)
					{
						// for Single Press
						while(Local_u8PinRead == HKEYPAD_KEY_PRESSED)
    3cfc:	8b 89       	ldd	r24, Y+19	; 0x13
    3cfe:	88 23       	and	r24, r24
    3d00:	71 f3       	breq	.-36     	; 0x3cde <HKEYPAD_enGetPressedKey+0x1ce>
						{
							MDIO_voidgetPinValue(colArr[col_index], &Local_u8PinRead);
						}
						Local_u8PressedKey = Local_u8ArrKeys[row_index][col_index];
    3d02:	89 89       	ldd	r24, Y+17	; 0x11
    3d04:	28 2f       	mov	r18, r24
    3d06:	30 e0       	ldi	r19, 0x00	; 0
    3d08:	88 89       	ldd	r24, Y+16	; 0x10
    3d0a:	48 2f       	mov	r20, r24
    3d0c:	50 e0       	ldi	r21, 0x00	; 0
    3d0e:	22 0f       	add	r18, r18
    3d10:	33 1f       	adc	r19, r19
    3d12:	22 0f       	add	r18, r18
    3d14:	33 1f       	adc	r19, r19
    3d16:	ce 01       	movw	r24, r28
    3d18:	01 96       	adiw	r24, 0x01	; 1
    3d1a:	82 0f       	add	r24, r18
    3d1c:	93 1f       	adc	r25, r19
    3d1e:	84 0f       	add	r24, r20
    3d20:	95 1f       	adc	r25, r21
    3d22:	fc 01       	movw	r30, r24
    3d24:	73 96       	adiw	r30, 0x13	; 19
    3d26:	80 81       	ld	r24, Z
    3d28:	8a 8b       	std	Y+18, r24	; 0x12
						flag = 1 ;
    3d2a:	81 e0       	ldi	r24, 0x01	; 1
    3d2c:	8f 87       	std	Y+15, r24	; 0x0f
	u8 colArr[]={HKEYPAD_C0_PIN,HKEYPAD_C1_PIN,HKEYPAD_C2_PIN,HKEYPAD_C3_PIN};
	for(row_index= 0 ; row_index<=3 && flag ==0 ; row_index++ )
	{
		// output 0 (ground) on row (Activate row)
		MDIO_voidsetPinValue(rowArr[row_index],LOW);
		for(col_index= 0 ; col_index<=3 ; col_index++ )
    3d2e:	88 89       	ldd	r24, Y+16	; 0x10
    3d30:	8f 5f       	subi	r24, 0xFF	; 255
    3d32:	88 8b       	std	Y+16, r24	; 0x10
    3d34:	88 89       	ldd	r24, Y+16	; 0x10
    3d36:	84 30       	cpi	r24, 0x04	; 4
    3d38:	08 f4       	brcc	.+2      	; 0x3d3c <HKEYPAD_enGetPressedKey+0x22c>
    3d3a:	39 cf       	rjmp	.-398    	; 0x3bae <HKEYPAD_enGetPressedKey+0x9e>

				}
		} //INNER FOR COLS

		// output 1 on row (Deactivate row)
		MDIO_voidsetPinValue(rowArr[row_index],HIGH);
    3d3c:	89 89       	ldd	r24, Y+17	; 0x11
    3d3e:	28 2f       	mov	r18, r24
    3d40:	30 e0       	ldi	r19, 0x00	; 0
    3d42:	ce 01       	movw	r24, r28
    3d44:	84 96       	adiw	r24, 0x24	; 36
    3d46:	fc 01       	movw	r30, r24
    3d48:	e2 0f       	add	r30, r18
    3d4a:	f3 1f       	adc	r31, r19
    3d4c:	80 81       	ld	r24, Z
    3d4e:	61 e0       	ldi	r22, 0x01	; 1
    3d50:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
	u8 col_index;
	u8 flag = 0;
	u8 Local_u8ArrKeys[4][4]= HKEYPAD_KEYS;
	u8 rowArr[]={HKEYPAD_R0_PIN,HKEYPAD_R1_PIN,HKEYPAD_R2_PIN,HKEYPAD_R3_PIN};
	u8 colArr[]={HKEYPAD_C0_PIN,HKEYPAD_C1_PIN,HKEYPAD_C2_PIN,HKEYPAD_C3_PIN};
	for(row_index= 0 ; row_index<=3 && flag ==0 ; row_index++ )
    3d54:	89 89       	ldd	r24, Y+17	; 0x11
    3d56:	8f 5f       	subi	r24, 0xFF	; 255
    3d58:	89 8b       	std	Y+17, r24	; 0x11
    3d5a:	89 89       	ldd	r24, Y+17	; 0x11
    3d5c:	84 30       	cpi	r24, 0x04	; 4
    3d5e:	20 f4       	brcc	.+8      	; 0x3d68 <HKEYPAD_enGetPressedKey+0x258>
    3d60:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d62:	88 23       	and	r24, r24
    3d64:	09 f4       	brne	.+2      	; 0x3d68 <HKEYPAD_enGetPressedKey+0x258>
    3d66:	15 cf       	rjmp	.-470    	; 0x3b92 <HKEYPAD_enGetPressedKey+0x82>

		// output 1 on row (Deactivate row)
		MDIO_voidsetPinValue(rowArr[row_index],HIGH);

	} //OUTER FOR ROWS
	*ptrKey= Local_u8PressedKey;
    3d68:	ec a5       	ldd	r30, Y+44	; 0x2c
    3d6a:	fd a5       	ldd	r31, Y+45	; 0x2d
    3d6c:	8a 89       	ldd	r24, Y+18	; 0x12
    3d6e:	80 83       	st	Z, r24
	return SUCCESS;
    3d70:	82 e0       	ldi	r24, 0x02	; 2
}
    3d72:	e2 96       	adiw	r28, 0x32	; 50
    3d74:	0f b6       	in	r0, 0x3f	; 63
    3d76:	f8 94       	cli
    3d78:	de bf       	out	0x3e, r29	; 62
    3d7a:	0f be       	out	0x3f, r0	; 63
    3d7c:	cd bf       	out	0x3d, r28	; 61
    3d7e:	cf 91       	pop	r28
    3d80:	df 91       	pop	r29
    3d82:	08 95       	ret

00003d84 <HKEYPAD_enGetPressedKey2>:

u8 HKEYPAD_enGetPressedKey2(void)
{
    3d84:	df 93       	push	r29
    3d86:	cf 93       	push	r28
    3d88:	cd b7       	in	r28, 0x3d	; 61
    3d8a:	de b7       	in	r29, 0x3e	; 62
    3d8c:	e0 97       	sbiw	r28, 0x30	; 48
    3d8e:	0f b6       	in	r0, 0x3f	; 63
    3d90:	f8 94       	cli
    3d92:	de bf       	out	0x3e, r29	; 62
    3d94:	0f be       	out	0x3f, r0	; 63
    3d96:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8PressedKey= HKEYPAD_NO_PRESSED_KEY ;
    3d98:	8f ef       	ldi	r24, 0xFF	; 255
    3d9a:	8a 8b       	std	Y+18, r24	; 0x12
	u8 Local_u8PinRead;
	u8 row_index;
	u8 col_index;
	u8 flag = 0;
    3d9c:	1f 86       	std	Y+15, r1	; 0x0f
	u8 Local_u8ArrKeys[4][4]= HKEYPAD_KEYS;
    3d9e:	ce 01       	movw	r24, r28
    3da0:	44 96       	adiw	r24, 0x14	; 20
    3da2:	9d a7       	std	Y+45, r25	; 0x2d
    3da4:	8c a7       	std	Y+44, r24	; 0x2c
    3da6:	e0 e9       	ldi	r30, 0x90	; 144
    3da8:	f0 e0       	ldi	r31, 0x00	; 0
    3daa:	ff a7       	std	Y+47, r31	; 0x2f
    3dac:	ee a7       	std	Y+46, r30	; 0x2e
    3dae:	f0 e1       	ldi	r31, 0x10	; 16
    3db0:	f8 ab       	std	Y+48, r31	; 0x30
    3db2:	ee a5       	ldd	r30, Y+46	; 0x2e
    3db4:	ff a5       	ldd	r31, Y+47	; 0x2f
    3db6:	00 80       	ld	r0, Z
    3db8:	8e a5       	ldd	r24, Y+46	; 0x2e
    3dba:	9f a5       	ldd	r25, Y+47	; 0x2f
    3dbc:	01 96       	adiw	r24, 0x01	; 1
    3dbe:	9f a7       	std	Y+47, r25	; 0x2f
    3dc0:	8e a7       	std	Y+46, r24	; 0x2e
    3dc2:	ec a5       	ldd	r30, Y+44	; 0x2c
    3dc4:	fd a5       	ldd	r31, Y+45	; 0x2d
    3dc6:	00 82       	st	Z, r0
    3dc8:	8c a5       	ldd	r24, Y+44	; 0x2c
    3dca:	9d a5       	ldd	r25, Y+45	; 0x2d
    3dcc:	01 96       	adiw	r24, 0x01	; 1
    3dce:	9d a7       	std	Y+45, r25	; 0x2d
    3dd0:	8c a7       	std	Y+44, r24	; 0x2c
    3dd2:	98 a9       	ldd	r25, Y+48	; 0x30
    3dd4:	91 50       	subi	r25, 0x01	; 1
    3dd6:	98 ab       	std	Y+48, r25	; 0x30
    3dd8:	e8 a9       	ldd	r30, Y+48	; 0x30
    3dda:	ee 23       	and	r30, r30
    3ddc:	51 f7       	brne	.-44     	; 0x3db2 <HKEYPAD_enGetPressedKey2+0x2e>
	u8 rowArr[]={HKEYPAD_R0_PIN,HKEYPAD_R1_PIN,HKEYPAD_R2_PIN,HKEYPAD_R3_PIN};
    3dde:	83 e2       	ldi	r24, 0x23	; 35
    3de0:	8c a3       	std	Y+36, r24	; 0x24
    3de2:	82 e2       	ldi	r24, 0x22	; 34
    3de4:	8d a3       	std	Y+37, r24	; 0x25
    3de6:	81 e2       	ldi	r24, 0x21	; 33
    3de8:	8e a3       	std	Y+38, r24	; 0x26
    3dea:	80 e2       	ldi	r24, 0x20	; 32
    3dec:	8f a3       	std	Y+39, r24	; 0x27
	u8 colArr[]={HKEYPAD_C0_PIN,HKEYPAD_C1_PIN,HKEYPAD_C2_PIN,HKEYPAD_C3_PIN};
    3dee:	8f e2       	ldi	r24, 0x2F	; 47
    3df0:	88 a7       	std	Y+40, r24	; 0x28
    3df2:	8e e2       	ldi	r24, 0x2E	; 46
    3df4:	89 a7       	std	Y+41, r24	; 0x29
    3df6:	8d e2       	ldi	r24, 0x2D	; 45
    3df8:	8a a7       	std	Y+42, r24	; 0x2a
    3dfa:	8b e2       	ldi	r24, 0x2B	; 43
    3dfc:	8b a7       	std	Y+43, r24	; 0x2b
	for(row_index= 0 ; row_index<=3 && flag ==0 ; row_index++ )
    3dfe:	19 8a       	std	Y+17, r1	; 0x11
    3e00:	e4 c0       	rjmp	.+456    	; 0x3fca <HKEYPAD_enGetPressedKey2+0x246>
	{
		// output 0 (ground) on row (Activate row)
		MDIO_voidsetPinValue(rowArr[row_index],LOW);
    3e02:	89 89       	ldd	r24, Y+17	; 0x11
    3e04:	28 2f       	mov	r18, r24
    3e06:	30 e0       	ldi	r19, 0x00	; 0
    3e08:	ce 01       	movw	r24, r28
    3e0a:	84 96       	adiw	r24, 0x24	; 36
    3e0c:	fc 01       	movw	r30, r24
    3e0e:	e2 0f       	add	r30, r18
    3e10:	f3 1f       	adc	r31, r19
    3e12:	80 81       	ld	r24, Z
    3e14:	60 e0       	ldi	r22, 0x00	; 0
    3e16:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
		for(col_index= 0 ; col_index<=3 ; col_index++ )
    3e1a:	18 8a       	std	Y+16, r1	; 0x10
    3e1c:	c3 c0       	rjmp	.+390    	; 0x3fa4 <HKEYPAD_enGetPressedKey2+0x220>
		{
			//read Col
			MDIO_voidgetPinValue(colArr[col_index], &Local_u8PinRead);
    3e1e:	88 89       	ldd	r24, Y+16	; 0x10
    3e20:	28 2f       	mov	r18, r24
    3e22:	30 e0       	ldi	r19, 0x00	; 0
    3e24:	ce 01       	movw	r24, r28
    3e26:	88 96       	adiw	r24, 0x28	; 40
    3e28:	fc 01       	movw	r30, r24
    3e2a:	e2 0f       	add	r30, r18
    3e2c:	f3 1f       	adc	r31, r19
    3e2e:	80 81       	ld	r24, Z
    3e30:	9e 01       	movw	r18, r28
    3e32:	2d 5e       	subi	r18, 0xED	; 237
    3e34:	3f 4f       	sbci	r19, 0xFF	; 255
    3e36:	b9 01       	movw	r22, r18
    3e38:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <MDIO_voidgetPinValue>

			if(Local_u8PinRead == HKEYPAD_KEY_PRESSED)
    3e3c:	8b 89       	ldd	r24, Y+19	; 0x13
    3e3e:	88 23       	and	r24, r24
    3e40:	09 f0       	breq	.+2      	; 0x3e44 <HKEYPAD_enGetPressedKey2+0xc0>
    3e42:	ad c0       	rjmp	.+346    	; 0x3f9e <HKEYPAD_enGetPressedKey2+0x21a>
    3e44:	80 e0       	ldi	r24, 0x00	; 0
    3e46:	90 e0       	ldi	r25, 0x00	; 0
    3e48:	a0 ea       	ldi	r26, 0xA0	; 160
    3e4a:	b1 e4       	ldi	r27, 0x41	; 65
    3e4c:	8b 87       	std	Y+11, r24	; 0x0b
    3e4e:	9c 87       	std	Y+12, r25	; 0x0c
    3e50:	ad 87       	std	Y+13, r26	; 0x0d
    3e52:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e54:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e56:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e58:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e5c:	20 e0       	ldi	r18, 0x00	; 0
    3e5e:	30 e0       	ldi	r19, 0x00	; 0
    3e60:	4a e7       	ldi	r20, 0x7A	; 122
    3e62:	55 e4       	ldi	r21, 0x45	; 69
    3e64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e68:	dc 01       	movw	r26, r24
    3e6a:	cb 01       	movw	r24, r22
    3e6c:	8f 83       	std	Y+7, r24	; 0x07
    3e6e:	98 87       	std	Y+8, r25	; 0x08
    3e70:	a9 87       	std	Y+9, r26	; 0x09
    3e72:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3e74:	6f 81       	ldd	r22, Y+7	; 0x07
    3e76:	78 85       	ldd	r23, Y+8	; 0x08
    3e78:	89 85       	ldd	r24, Y+9	; 0x09
    3e7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e7c:	20 e0       	ldi	r18, 0x00	; 0
    3e7e:	30 e0       	ldi	r19, 0x00	; 0
    3e80:	40 e8       	ldi	r20, 0x80	; 128
    3e82:	5f e3       	ldi	r21, 0x3F	; 63
    3e84:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3e88:	88 23       	and	r24, r24
    3e8a:	2c f4       	brge	.+10     	; 0x3e96 <HKEYPAD_enGetPressedKey2+0x112>
		__ticks = 1;
    3e8c:	81 e0       	ldi	r24, 0x01	; 1
    3e8e:	90 e0       	ldi	r25, 0x00	; 0
    3e90:	9e 83       	std	Y+6, r25	; 0x06
    3e92:	8d 83       	std	Y+5, r24	; 0x05
    3e94:	3f c0       	rjmp	.+126    	; 0x3f14 <HKEYPAD_enGetPressedKey2+0x190>
	else if (__tmp > 65535)
    3e96:	6f 81       	ldd	r22, Y+7	; 0x07
    3e98:	78 85       	ldd	r23, Y+8	; 0x08
    3e9a:	89 85       	ldd	r24, Y+9	; 0x09
    3e9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e9e:	20 e0       	ldi	r18, 0x00	; 0
    3ea0:	3f ef       	ldi	r19, 0xFF	; 255
    3ea2:	4f e7       	ldi	r20, 0x7F	; 127
    3ea4:	57 e4       	ldi	r21, 0x47	; 71
    3ea6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3eaa:	18 16       	cp	r1, r24
    3eac:	4c f5       	brge	.+82     	; 0x3f00 <HKEYPAD_enGetPressedKey2+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3eae:	6b 85       	ldd	r22, Y+11	; 0x0b
    3eb0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3eb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3eb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3eb6:	20 e0       	ldi	r18, 0x00	; 0
    3eb8:	30 e0       	ldi	r19, 0x00	; 0
    3eba:	40 e2       	ldi	r20, 0x20	; 32
    3ebc:	51 e4       	ldi	r21, 0x41	; 65
    3ebe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ec2:	dc 01       	movw	r26, r24
    3ec4:	cb 01       	movw	r24, r22
    3ec6:	bc 01       	movw	r22, r24
    3ec8:	cd 01       	movw	r24, r26
    3eca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ece:	dc 01       	movw	r26, r24
    3ed0:	cb 01       	movw	r24, r22
    3ed2:	9e 83       	std	Y+6, r25	; 0x06
    3ed4:	8d 83       	std	Y+5, r24	; 0x05
    3ed6:	0f c0       	rjmp	.+30     	; 0x3ef6 <HKEYPAD_enGetPressedKey2+0x172>
    3ed8:	80 e9       	ldi	r24, 0x90	; 144
    3eda:	91 e0       	ldi	r25, 0x01	; 1
    3edc:	9c 83       	std	Y+4, r25	; 0x04
    3ede:	8b 83       	std	Y+3, r24	; 0x03
    3ee0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ee2:	9c 81       	ldd	r25, Y+4	; 0x04
    3ee4:	01 97       	sbiw	r24, 0x01	; 1
    3ee6:	f1 f7       	brne	.-4      	; 0x3ee4 <HKEYPAD_enGetPressedKey2+0x160>
    3ee8:	9c 83       	std	Y+4, r25	; 0x04
    3eea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3eec:	8d 81       	ldd	r24, Y+5	; 0x05
    3eee:	9e 81       	ldd	r25, Y+6	; 0x06
    3ef0:	01 97       	sbiw	r24, 0x01	; 1
    3ef2:	9e 83       	std	Y+6, r25	; 0x06
    3ef4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ef6:	8d 81       	ldd	r24, Y+5	; 0x05
    3ef8:	9e 81       	ldd	r25, Y+6	; 0x06
    3efa:	00 97       	sbiw	r24, 0x00	; 0
    3efc:	69 f7       	brne	.-38     	; 0x3ed8 <HKEYPAD_enGetPressedKey2+0x154>
    3efe:	14 c0       	rjmp	.+40     	; 0x3f28 <HKEYPAD_enGetPressedKey2+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f00:	6f 81       	ldd	r22, Y+7	; 0x07
    3f02:	78 85       	ldd	r23, Y+8	; 0x08
    3f04:	89 85       	ldd	r24, Y+9	; 0x09
    3f06:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f0c:	dc 01       	movw	r26, r24
    3f0e:	cb 01       	movw	r24, r22
    3f10:	9e 83       	std	Y+6, r25	; 0x06
    3f12:	8d 83       	std	Y+5, r24	; 0x05
    3f14:	8d 81       	ldd	r24, Y+5	; 0x05
    3f16:	9e 81       	ldd	r25, Y+6	; 0x06
    3f18:	9a 83       	std	Y+2, r25	; 0x02
    3f1a:	89 83       	std	Y+1, r24	; 0x01
    3f1c:	89 81       	ldd	r24, Y+1	; 0x01
    3f1e:	9a 81       	ldd	r25, Y+2	; 0x02
    3f20:	01 97       	sbiw	r24, 0x01	; 1
    3f22:	f1 f7       	brne	.-4      	; 0x3f20 <HKEYPAD_enGetPressedKey2+0x19c>
    3f24:	9a 83       	std	Y+2, r25	; 0x02
    3f26:	89 83       	std	Y+1, r24	; 0x01
				{
					// for debouncing
					_delay_ms(20);
					// Second Read
					MDIO_voidgetPinValue(colArr[col_index], &Local_u8PinRead); //1
    3f28:	88 89       	ldd	r24, Y+16	; 0x10
    3f2a:	28 2f       	mov	r18, r24
    3f2c:	30 e0       	ldi	r19, 0x00	; 0
    3f2e:	ce 01       	movw	r24, r28
    3f30:	88 96       	adiw	r24, 0x28	; 40
    3f32:	fc 01       	movw	r30, r24
    3f34:	e2 0f       	add	r30, r18
    3f36:	f3 1f       	adc	r31, r19
    3f38:	80 81       	ld	r24, Z
    3f3a:	9e 01       	movw	r18, r28
    3f3c:	2d 5e       	subi	r18, 0xED	; 237
    3f3e:	3f 4f       	sbci	r19, 0xFF	; 255
    3f40:	b9 01       	movw	r22, r18
    3f42:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <MDIO_voidgetPinValue>
					if(Local_u8PinRead == HKEYPAD_KEY_PRESSED)
    3f46:	8b 89       	ldd	r24, Y+19	; 0x13
    3f48:	88 23       	and	r24, r24
    3f4a:	49 f5       	brne	.+82     	; 0x3f9e <HKEYPAD_enGetPressedKey2+0x21a>
    3f4c:	0f c0       	rjmp	.+30     	; 0x3f6c <HKEYPAD_enGetPressedKey2+0x1e8>
					{
						// for Single Press
						while(Local_u8PinRead == HKEYPAD_KEY_PRESSED)
						{
							MDIO_voidgetPinValue(colArr[col_index], &Local_u8PinRead);
    3f4e:	88 89       	ldd	r24, Y+16	; 0x10
    3f50:	28 2f       	mov	r18, r24
    3f52:	30 e0       	ldi	r19, 0x00	; 0
    3f54:	ce 01       	movw	r24, r28
    3f56:	88 96       	adiw	r24, 0x28	; 40
    3f58:	fc 01       	movw	r30, r24
    3f5a:	e2 0f       	add	r30, r18
    3f5c:	f3 1f       	adc	r31, r19
    3f5e:	80 81       	ld	r24, Z
    3f60:	9e 01       	movw	r18, r28
    3f62:	2d 5e       	subi	r18, 0xED	; 237
    3f64:	3f 4f       	sbci	r19, 0xFF	; 255
    3f66:	b9 01       	movw	r22, r18
    3f68:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <MDIO_voidgetPinValue>
					// Second Read
					MDIO_voidgetPinValue(colArr[col_index], &Local_u8PinRead); //1
					if(Local_u8PinRead == HKEYPAD_KEY_PRESSED)
					{
						// for Single Press
						while(Local_u8PinRead == HKEYPAD_KEY_PRESSED)
    3f6c:	8b 89       	ldd	r24, Y+19	; 0x13
    3f6e:	88 23       	and	r24, r24
    3f70:	71 f3       	breq	.-36     	; 0x3f4e <HKEYPAD_enGetPressedKey2+0x1ca>
						{
							MDIO_voidgetPinValue(colArr[col_index], &Local_u8PinRead);
						}
						Local_u8PressedKey = Local_u8ArrKeys[row_index][col_index];
    3f72:	89 89       	ldd	r24, Y+17	; 0x11
    3f74:	28 2f       	mov	r18, r24
    3f76:	30 e0       	ldi	r19, 0x00	; 0
    3f78:	88 89       	ldd	r24, Y+16	; 0x10
    3f7a:	48 2f       	mov	r20, r24
    3f7c:	50 e0       	ldi	r21, 0x00	; 0
    3f7e:	22 0f       	add	r18, r18
    3f80:	33 1f       	adc	r19, r19
    3f82:	22 0f       	add	r18, r18
    3f84:	33 1f       	adc	r19, r19
    3f86:	ce 01       	movw	r24, r28
    3f88:	01 96       	adiw	r24, 0x01	; 1
    3f8a:	82 0f       	add	r24, r18
    3f8c:	93 1f       	adc	r25, r19
    3f8e:	84 0f       	add	r24, r20
    3f90:	95 1f       	adc	r25, r21
    3f92:	fc 01       	movw	r30, r24
    3f94:	73 96       	adiw	r30, 0x13	; 19
    3f96:	80 81       	ld	r24, Z
    3f98:	8a 8b       	std	Y+18, r24	; 0x12
						flag = 1 ;
    3f9a:	81 e0       	ldi	r24, 0x01	; 1
    3f9c:	8f 87       	std	Y+15, r24	; 0x0f
	u8 colArr[]={HKEYPAD_C0_PIN,HKEYPAD_C1_PIN,HKEYPAD_C2_PIN,HKEYPAD_C3_PIN};
	for(row_index= 0 ; row_index<=3 && flag ==0 ; row_index++ )
	{
		// output 0 (ground) on row (Activate row)
		MDIO_voidsetPinValue(rowArr[row_index],LOW);
		for(col_index= 0 ; col_index<=3 ; col_index++ )
    3f9e:	88 89       	ldd	r24, Y+16	; 0x10
    3fa0:	8f 5f       	subi	r24, 0xFF	; 255
    3fa2:	88 8b       	std	Y+16, r24	; 0x10
    3fa4:	88 89       	ldd	r24, Y+16	; 0x10
    3fa6:	84 30       	cpi	r24, 0x04	; 4
    3fa8:	08 f4       	brcc	.+2      	; 0x3fac <HKEYPAD_enGetPressedKey2+0x228>
    3faa:	39 cf       	rjmp	.-398    	; 0x3e1e <HKEYPAD_enGetPressedKey2+0x9a>

				}
		} //INNER FOR COLS

		// output 1 on row (Deactivate row)
		MDIO_voidsetPinValue(rowArr[row_index],HIGH);
    3fac:	89 89       	ldd	r24, Y+17	; 0x11
    3fae:	28 2f       	mov	r18, r24
    3fb0:	30 e0       	ldi	r19, 0x00	; 0
    3fb2:	ce 01       	movw	r24, r28
    3fb4:	84 96       	adiw	r24, 0x24	; 36
    3fb6:	fc 01       	movw	r30, r24
    3fb8:	e2 0f       	add	r30, r18
    3fba:	f3 1f       	adc	r31, r19
    3fbc:	80 81       	ld	r24, Z
    3fbe:	61 e0       	ldi	r22, 0x01	; 1
    3fc0:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
	u8 col_index;
	u8 flag = 0;
	u8 Local_u8ArrKeys[4][4]= HKEYPAD_KEYS;
	u8 rowArr[]={HKEYPAD_R0_PIN,HKEYPAD_R1_PIN,HKEYPAD_R2_PIN,HKEYPAD_R3_PIN};
	u8 colArr[]={HKEYPAD_C0_PIN,HKEYPAD_C1_PIN,HKEYPAD_C2_PIN,HKEYPAD_C3_PIN};
	for(row_index= 0 ; row_index<=3 && flag ==0 ; row_index++ )
    3fc4:	89 89       	ldd	r24, Y+17	; 0x11
    3fc6:	8f 5f       	subi	r24, 0xFF	; 255
    3fc8:	89 8b       	std	Y+17, r24	; 0x11
    3fca:	89 89       	ldd	r24, Y+17	; 0x11
    3fcc:	84 30       	cpi	r24, 0x04	; 4
    3fce:	20 f4       	brcc	.+8      	; 0x3fd8 <HKEYPAD_enGetPressedKey2+0x254>
    3fd0:	8f 85       	ldd	r24, Y+15	; 0x0f
    3fd2:	88 23       	and	r24, r24
    3fd4:	09 f4       	brne	.+2      	; 0x3fd8 <HKEYPAD_enGetPressedKey2+0x254>
    3fd6:	15 cf       	rjmp	.-470    	; 0x3e02 <HKEYPAD_enGetPressedKey2+0x7e>
		// output 1 on row (Deactivate row)
		MDIO_voidsetPinValue(rowArr[row_index],HIGH);

	} //OUTER FOR ROWS

	return Local_u8PressedKey;
    3fd8:	8a 89       	ldd	r24, Y+18	; 0x12

}
    3fda:	e0 96       	adiw	r28, 0x30	; 48
    3fdc:	0f b6       	in	r0, 0x3f	; 63
    3fde:	f8 94       	cli
    3fe0:	de bf       	out	0x3e, r29	; 62
    3fe2:	0f be       	out	0x3f, r0	; 63
    3fe4:	cd bf       	out	0x3d, r28	; 61
    3fe6:	cf 91       	pop	r28
    3fe8:	df 91       	pop	r29
    3fea:	08 95       	ret

00003fec <HKEYPAD_voidcheckPassword>:
 * Applications Functions
 *
 * */

void HKEYPAD_voidcheckPassword(void)
{
    3fec:	df 93       	push	r29
    3fee:	cf 93       	push	r28
    3ff0:	cd b7       	in	r28, 0x3d	; 61
    3ff2:	de b7       	in	r29, 0x3e	; 62
    3ff4:	ac 97       	sbiw	r28, 0x2c	; 44
    3ff6:	0f b6       	in	r0, 0x3f	; 63
    3ff8:	f8 94       	cli
    3ffa:	de bf       	out	0x3e, r29	; 62
    3ffc:	0f be       	out	0x3f, r0	; 63
    3ffe:	cd bf       	out	0x3d, r28	; 61
#define PASSWORD 1234
	{
		u8 tries = 0;
    4000:	1d 82       	std	Y+5, r1	; 0x05
		u8 Local_u8Entry[11] = "Enter Pass" ;
    4002:	ce 01       	movw	r24, r28
    4004:	06 96       	adiw	r24, 0x06	; 6
    4006:	9f 8f       	std	Y+31, r25	; 0x1f
    4008:	8e 8f       	std	Y+30, r24	; 0x1e
    400a:	e0 e6       	ldi	r30, 0x60	; 96
    400c:	f0 e0       	ldi	r31, 0x00	; 0
    400e:	f9 a3       	std	Y+33, r31	; 0x21
    4010:	e8 a3       	std	Y+32, r30	; 0x20
    4012:	fb e0       	ldi	r31, 0x0B	; 11
    4014:	fa a3       	std	Y+34, r31	; 0x22
    4016:	e8 a1       	ldd	r30, Y+32	; 0x20
    4018:	f9 a1       	ldd	r31, Y+33	; 0x21
    401a:	00 80       	ld	r0, Z
    401c:	88 a1       	ldd	r24, Y+32	; 0x20
    401e:	99 a1       	ldd	r25, Y+33	; 0x21
    4020:	01 96       	adiw	r24, 0x01	; 1
    4022:	99 a3       	std	Y+33, r25	; 0x21
    4024:	88 a3       	std	Y+32, r24	; 0x20
    4026:	ee 8d       	ldd	r30, Y+30	; 0x1e
    4028:	ff 8d       	ldd	r31, Y+31	; 0x1f
    402a:	00 82       	st	Z, r0
    402c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    402e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4030:	01 96       	adiw	r24, 0x01	; 1
    4032:	9f 8f       	std	Y+31, r25	; 0x1f
    4034:	8e 8f       	std	Y+30, r24	; 0x1e
    4036:	9a a1       	ldd	r25, Y+34	; 0x22
    4038:	91 50       	subi	r25, 0x01	; 1
    403a:	9a a3       	std	Y+34, r25	; 0x22
    403c:	ea a1       	ldd	r30, Y+34	; 0x22
    403e:	ee 23       	and	r30, r30
    4040:	51 f7       	brne	.-44     	; 0x4016 <HKEYPAD_voidcheckPassword+0x2a>
		u8 Index = 0;
    4042:	1c 82       	std	Y+4, r1	; 0x04
		u8 Local_u8Key = 0xFF ;
    4044:	8f ef       	ldi	r24, 0xFF	; 255
    4046:	8b 83       	std	Y+3, r24	; 0x03
		u16 PassUser = 0;
    4048:	1a 82       	std	Y+2, r1	; 0x02
    404a:	19 82       	std	Y+1, r1	; 0x01
		u8 hello[6]="hello";
    404c:	ce 01       	movw	r24, r28
    404e:	41 96       	adiw	r24, 0x11	; 17
    4050:	9c a3       	std	Y+36, r25	; 0x24
    4052:	8b a3       	std	Y+35, r24	; 0x23
    4054:	eb e6       	ldi	r30, 0x6B	; 107
    4056:	f0 e0       	ldi	r31, 0x00	; 0
    4058:	fe a3       	std	Y+38, r31	; 0x26
    405a:	ed a3       	std	Y+37, r30	; 0x25
    405c:	f6 e0       	ldi	r31, 0x06	; 6
    405e:	ff a3       	std	Y+39, r31	; 0x27
    4060:	ed a1       	ldd	r30, Y+37	; 0x25
    4062:	fe a1       	ldd	r31, Y+38	; 0x26
    4064:	00 80       	ld	r0, Z
    4066:	8d a1       	ldd	r24, Y+37	; 0x25
    4068:	9e a1       	ldd	r25, Y+38	; 0x26
    406a:	01 96       	adiw	r24, 0x01	; 1
    406c:	9e a3       	std	Y+38, r25	; 0x26
    406e:	8d a3       	std	Y+37, r24	; 0x25
    4070:	eb a1       	ldd	r30, Y+35	; 0x23
    4072:	fc a1       	ldd	r31, Y+36	; 0x24
    4074:	00 82       	st	Z, r0
    4076:	8b a1       	ldd	r24, Y+35	; 0x23
    4078:	9c a1       	ldd	r25, Y+36	; 0x24
    407a:	01 96       	adiw	r24, 0x01	; 1
    407c:	9c a3       	std	Y+36, r25	; 0x24
    407e:	8b a3       	std	Y+35, r24	; 0x23
    4080:	9f a1       	ldd	r25, Y+39	; 0x27
    4082:	91 50       	subi	r25, 0x01	; 1
    4084:	9f a3       	std	Y+39, r25	; 0x27
    4086:	ef a1       	ldd	r30, Y+39	; 0x27
    4088:	ee 23       	and	r30, r30
    408a:	51 f7       	brne	.-44     	; 0x4060 <HKEYPAD_voidcheckPassword+0x74>
		u8 wrong[7]="Wrong!";
    408c:	ce 01       	movw	r24, r28
    408e:	47 96       	adiw	r24, 0x17	; 23
    4090:	99 a7       	std	Y+41, r25	; 0x29
    4092:	88 a7       	std	Y+40, r24	; 0x28
    4094:	e1 e7       	ldi	r30, 0x71	; 113
    4096:	f0 e0       	ldi	r31, 0x00	; 0
    4098:	fb a7       	std	Y+43, r31	; 0x2b
    409a:	ea a7       	std	Y+42, r30	; 0x2a
    409c:	f7 e0       	ldi	r31, 0x07	; 7
    409e:	fc a7       	std	Y+44, r31	; 0x2c
    40a0:	ea a5       	ldd	r30, Y+42	; 0x2a
    40a2:	fb a5       	ldd	r31, Y+43	; 0x2b
    40a4:	00 80       	ld	r0, Z
    40a6:	8a a5       	ldd	r24, Y+42	; 0x2a
    40a8:	9b a5       	ldd	r25, Y+43	; 0x2b
    40aa:	01 96       	adiw	r24, 0x01	; 1
    40ac:	9b a7       	std	Y+43, r25	; 0x2b
    40ae:	8a a7       	std	Y+42, r24	; 0x2a
    40b0:	e8 a5       	ldd	r30, Y+40	; 0x28
    40b2:	f9 a5       	ldd	r31, Y+41	; 0x29
    40b4:	00 82       	st	Z, r0
    40b6:	88 a5       	ldd	r24, Y+40	; 0x28
    40b8:	99 a5       	ldd	r25, Y+41	; 0x29
    40ba:	01 96       	adiw	r24, 0x01	; 1
    40bc:	99 a7       	std	Y+41, r25	; 0x29
    40be:	88 a7       	std	Y+40, r24	; 0x28
    40c0:	9c a5       	ldd	r25, Y+44	; 0x2c
    40c2:	91 50       	subi	r25, 0x01	; 1
    40c4:	9c a7       	std	Y+44, r25	; 0x2c
    40c6:	ec a5       	ldd	r30, Y+44	; 0x2c
    40c8:	ee 23       	and	r30, r30
    40ca:	51 f7       	brne	.-44     	; 0x40a0 <HKEYPAD_voidcheckPassword+0xb4>



		MDIO_voidsetPinDirection(PC6, OUTPUT);
    40cc:	84 e2       	ldi	r24, 0x24	; 36
    40ce:	61 e0       	ldi	r22, 0x01	; 1
    40d0:	0e 94 27 09 	call	0x124e	; 0x124e <MDIO_voidsetPinDirection>
    40d4:	32 c0       	rjmp	.+100    	; 0x413a <HKEYPAD_voidcheckPassword+0x14e>
		while(tries<3 && PassUser != PASSWORD)
		{
			LCD_voidWriteString(Local_u8Entry);
    40d6:	ce 01       	movw	r24, r28
    40d8:	06 96       	adiw	r24, 0x06	; 6
    40da:	0e 94 75 1c 	call	0x38ea	; 0x38ea <LCD_voidWriteString>
			LCD_voidGoToXY(1,0);
    40de:	81 e0       	ldi	r24, 0x01	; 1
    40e0:	60 e0       	ldi	r22, 0x00	; 0
    40e2:	0e 94 ab 1c 	call	0x3956	; 0x3956 <LCD_voidGoToXY>

			for(Index =0 ;Index<4;Index++)
    40e6:	1c 82       	std	Y+4, r1	; 0x04
    40e8:	1f c0       	rjmp	.+62     	; 0x4128 <HKEYPAD_voidcheckPassword+0x13c>
			{
				do
				{
					Local_u8Key = HKEYPAD_enGetPressedKey2() ;
    40ea:	0e 94 c2 1e 	call	0x3d84	; 0x3d84 <HKEYPAD_enGetPressedKey2>
    40ee:	8b 83       	std	Y+3, r24	; 0x03
				} while (Local_u8Key == 0xFF);
    40f0:	8b 81       	ldd	r24, Y+3	; 0x03
    40f2:	8f 3f       	cpi	r24, 0xFF	; 255
    40f4:	d1 f3       	breq	.-12     	; 0x40ea <HKEYPAD_voidcheckPassword+0xfe>
				LCD_voidWriteData('*');
    40f6:	8a e2       	ldi	r24, 0x2A	; 42
    40f8:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <LCD_voidWriteData>
				PassUser = (PassUser*10)+Local_u8Key ;
    40fc:	89 81       	ldd	r24, Y+1	; 0x01
    40fe:	9a 81       	ldd	r25, Y+2	; 0x02
    4100:	9c 01       	movw	r18, r24
    4102:	22 0f       	add	r18, r18
    4104:	33 1f       	adc	r19, r19
    4106:	c9 01       	movw	r24, r18
    4108:	88 0f       	add	r24, r24
    410a:	99 1f       	adc	r25, r25
    410c:	88 0f       	add	r24, r24
    410e:	99 1f       	adc	r25, r25
    4110:	28 0f       	add	r18, r24
    4112:	39 1f       	adc	r19, r25
    4114:	8b 81       	ldd	r24, Y+3	; 0x03
    4116:	88 2f       	mov	r24, r24
    4118:	90 e0       	ldi	r25, 0x00	; 0
    411a:	82 0f       	add	r24, r18
    411c:	93 1f       	adc	r25, r19
    411e:	9a 83       	std	Y+2, r25	; 0x02
    4120:	89 83       	std	Y+1, r24	; 0x01
		while(tries<3 && PassUser != PASSWORD)
		{
			LCD_voidWriteString(Local_u8Entry);
			LCD_voidGoToXY(1,0);

			for(Index =0 ;Index<4;Index++)
    4122:	8c 81       	ldd	r24, Y+4	; 0x04
    4124:	8f 5f       	subi	r24, 0xFF	; 255
    4126:	8c 83       	std	Y+4, r24	; 0x04
    4128:	8c 81       	ldd	r24, Y+4	; 0x04
    412a:	84 30       	cpi	r24, 0x04	; 4
    412c:	f0 f2       	brcs	.-68     	; 0x40ea <HKEYPAD_voidcheckPassword+0xfe>
					Local_u8Key = HKEYPAD_enGetPressedKey2() ;
				} while (Local_u8Key == 0xFF);
				LCD_voidWriteData('*');
				PassUser = (PassUser*10)+Local_u8Key ;
			}
			tries++ ;
    412e:	8d 81       	ldd	r24, Y+5	; 0x05
    4130:	8f 5f       	subi	r24, 0xFF	; 255
    4132:	8d 83       	std	Y+5, r24	; 0x05
			LCD_voidWriteCommand(0x01);
    4134:	81 e0       	ldi	r24, 0x01	; 1
    4136:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <LCD_voidWriteCommand>
		u8 wrong[7]="Wrong!";



		MDIO_voidsetPinDirection(PC6, OUTPUT);
		while(tries<3 && PassUser != PASSWORD)
    413a:	8d 81       	ldd	r24, Y+5	; 0x05
    413c:	83 30       	cpi	r24, 0x03	; 3
    413e:	30 f4       	brcc	.+12     	; 0x414c <HKEYPAD_voidcheckPassword+0x160>
    4140:	89 81       	ldd	r24, Y+1	; 0x01
    4142:	9a 81       	ldd	r25, Y+2	; 0x02
    4144:	f4 e0       	ldi	r31, 0x04	; 4
    4146:	82 3d       	cpi	r24, 0xD2	; 210
    4148:	9f 07       	cpc	r25, r31
    414a:	29 f6       	brne	.-118    	; 0x40d6 <HKEYPAD_voidcheckPassword+0xea>
			}
			tries++ ;
			LCD_voidWriteCommand(0x01);
		}

		if(PassUser == PASSWORD)
    414c:	89 81       	ldd	r24, Y+1	; 0x01
    414e:	9a 81       	ldd	r25, Y+2	; 0x02
    4150:	24 e0       	ldi	r18, 0x04	; 4
    4152:	82 3d       	cpi	r24, 0xD2	; 210
    4154:	92 07       	cpc	r25, r18
    4156:	61 f4       	brne	.+24     	; 0x4170 <HKEYPAD_voidcheckPassword+0x184>
		{
			LCD_voidWriteCommand(0x01);
    4158:	81 e0       	ldi	r24, 0x01	; 1
    415a:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <LCD_voidWriteCommand>
			LCD_voidGoToXY(0,5);
    415e:	80 e0       	ldi	r24, 0x00	; 0
    4160:	65 e0       	ldi	r22, 0x05	; 5
    4162:	0e 94 ab 1c 	call	0x3956	; 0x3956 <LCD_voidGoToXY>
			LCD_voidWriteString(hello);
    4166:	ce 01       	movw	r24, r28
    4168:	41 96       	adiw	r24, 0x11	; 17
    416a:	0e 94 75 1c 	call	0x38ea	; 0x38ea <LCD_voidWriteString>
    416e:	12 c0       	rjmp	.+36     	; 0x4194 <HKEYPAD_voidcheckPassword+0x1a8>
		}
		else if (tries>=3)
    4170:	8d 81       	ldd	r24, Y+5	; 0x05
    4172:	83 30       	cpi	r24, 0x03	; 3
    4174:	78 f0       	brcs	.+30     	; 0x4194 <HKEYPAD_voidcheckPassword+0x1a8>
		{
			LCD_voidWriteCommand(0x01);
    4176:	81 e0       	ldi	r24, 0x01	; 1
    4178:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <LCD_voidWriteCommand>
			LCD_voidGoToXY(0,4);
    417c:	80 e0       	ldi	r24, 0x00	; 0
    417e:	64 e0       	ldi	r22, 0x04	; 4
    4180:	0e 94 ab 1c 	call	0x3956	; 0x3956 <LCD_voidGoToXY>
			LCD_voidWriteString(wrong);
    4184:	ce 01       	movw	r24, r28
    4186:	47 96       	adiw	r24, 0x17	; 23
    4188:	0e 94 75 1c 	call	0x38ea	; 0x38ea <LCD_voidWriteString>
			MDIO_voidsetPinValue(PC6, HIGH);
    418c:	84 e2       	ldi	r24, 0x24	; 36
    418e:	61 e0       	ldi	r22, 0x01	; 1
    4190:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
		}

	}
}
    4194:	ac 96       	adiw	r28, 0x2c	; 44
    4196:	0f b6       	in	r0, 0x3f	; 63
    4198:	f8 94       	cli
    419a:	de bf       	out	0x3e, r29	; 62
    419c:	0f be       	out	0x3f, r0	; 63
    419e:	cd bf       	out	0x3d, r28	; 61
    41a0:	cf 91       	pop	r28
    41a2:	df 91       	pop	r29
    41a4:	08 95       	ret

000041a6 <HKEYPAD_voidcheckPassword2>:

void HKEYPAD_voidcheckPassword2(void)
{
    41a6:	0f 93       	push	r16
    41a8:	1f 93       	push	r17
    41aa:	df 93       	push	r29
    41ac:	cf 93       	push	r28
    41ae:	cd b7       	in	r28, 0x3d	; 61
    41b0:	de b7       	in	r29, 0x3e	; 62
    41b2:	2b 97       	sbiw	r28, 0x0b	; 11
    41b4:	0f b6       	in	r0, 0x3f	; 63
    41b6:	f8 94       	cli
    41b8:	de bf       	out	0x3e, r29	; 62
    41ba:	0f be       	out	0x3f, r0	; 63
    41bc:	cd bf       	out	0x3d, r28	; 61
//HKEYPAD_enInit();
//HLED_enInit(HLED_BLUE_ID);

u8 password[4]={'1','2','3','4'};
    41be:	81 e3       	ldi	r24, 0x31	; 49
    41c0:	8c 83       	std	Y+4, r24	; 0x04
    41c2:	82 e3       	ldi	r24, 0x32	; 50
    41c4:	8d 83       	std	Y+5, r24	; 0x05
    41c6:	83 e3       	ldi	r24, 0x33	; 51
    41c8:	8e 83       	std	Y+6, r24	; 0x06
    41ca:	84 e3       	ldi	r24, 0x34	; 52
    41cc:	8f 83       	std	Y+7, r24	; 0x07
u8 check [4]={0};
    41ce:	18 86       	std	Y+8, r1	; 0x08
    41d0:	19 86       	std	Y+9, r1	; 0x09
    41d2:	1a 86       	std	Y+10, r1	; 0x0a
    41d4:	1b 86       	std	Y+11, r1	; 0x0b
u8 i,j;
u8 counter=0;
    41d6:	19 82       	std	Y+1, r1	; 0x01

for(i=0;i<3;i++)  //number of password trials
    41d8:	1b 82       	std	Y+3, r1	; 0x03
    41da:	57 c0       	rjmp	.+174    	; 0x428a <HKEYPAD_voidcheckPassword2+0xe4>
	{
		for(j=0;j<4;j++)		//filling the checking array
    41dc:	1a 82       	std	Y+2, r1	; 0x02
    41de:	38 c0       	rjmp	.+112    	; 0x4250 <HKEYPAD_voidcheckPassword2+0xaa>
			{

				if (check[j] != HKEYPAD_NO_PRESSED_KEY)
    41e0:	8a 81       	ldd	r24, Y+2	; 0x02
    41e2:	28 2f       	mov	r18, r24
    41e4:	30 e0       	ldi	r19, 0x00	; 0
    41e6:	ce 01       	movw	r24, r28
    41e8:	08 96       	adiw	r24, 0x08	; 8
    41ea:	fc 01       	movw	r30, r24
    41ec:	e2 0f       	add	r30, r18
    41ee:	f3 1f       	adc	r31, r19
    41f0:	80 81       	ld	r24, Z
    41f2:	8f 3f       	cpi	r24, 0xFF	; 255
    41f4:	51 f1       	breq	.+84     	; 0x424a <HKEYPAD_voidcheckPassword2+0xa4>
						{
							LCD_voidWriteCommand(0xc0); //setting DDRAM Postion
    41f6:	80 ec       	ldi	r24, 0xC0	; 192
    41f8:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <LCD_voidWriteCommand>
							check[j]= HKEYPAD_enGetPressedKey(check[j]);
    41fc:	8a 81       	ldd	r24, Y+2	; 0x02
    41fe:	08 2f       	mov	r16, r24
    4200:	10 e0       	ldi	r17, 0x00	; 0
    4202:	8a 81       	ldd	r24, Y+2	; 0x02
    4204:	28 2f       	mov	r18, r24
    4206:	30 e0       	ldi	r19, 0x00	; 0
    4208:	ce 01       	movw	r24, r28
    420a:	08 96       	adiw	r24, 0x08	; 8
    420c:	fc 01       	movw	r30, r24
    420e:	e2 0f       	add	r30, r18
    4210:	f3 1f       	adc	r31, r19
    4212:	80 81       	ld	r24, Z
    4214:	88 2f       	mov	r24, r24
    4216:	90 e0       	ldi	r25, 0x00	; 0
    4218:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <HKEYPAD_enGetPressedKey>
    421c:	28 2f       	mov	r18, r24
    421e:	ce 01       	movw	r24, r28
    4220:	08 96       	adiw	r24, 0x08	; 8
    4222:	fc 01       	movw	r30, r24
    4224:	e0 0f       	add	r30, r16
    4226:	f1 1f       	adc	r31, r17
    4228:	20 83       	st	Z, r18
							HKEYPAD_enGetPressedKey(check[j]);
    422a:	8a 81       	ldd	r24, Y+2	; 0x02
    422c:	28 2f       	mov	r18, r24
    422e:	30 e0       	ldi	r19, 0x00	; 0
    4230:	ce 01       	movw	r24, r28
    4232:	08 96       	adiw	r24, 0x08	; 8
    4234:	fc 01       	movw	r30, r24
    4236:	e2 0f       	add	r30, r18
    4238:	f3 1f       	adc	r31, r19
    423a:	80 81       	ld	r24, Z
    423c:	88 2f       	mov	r24, r24
    423e:	90 e0       	ldi	r25, 0x00	; 0
    4240:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <HKEYPAD_enGetPressedKey>
							LCD_voidWriteData('*');
    4244:	8a e2       	ldi	r24, 0x2A	; 42
    4246:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <LCD_voidWriteData>
u8 i,j;
u8 counter=0;

for(i=0;i<3;i++)  //number of password trials
	{
		for(j=0;j<4;j++)		//filling the checking array
    424a:	8a 81       	ldd	r24, Y+2	; 0x02
    424c:	8f 5f       	subi	r24, 0xFF	; 255
    424e:	8a 83       	std	Y+2, r24	; 0x02
    4250:	8a 81       	ldd	r24, Y+2	; 0x02
    4252:	84 30       	cpi	r24, 0x04	; 4
    4254:	28 f2       	brcs	.-118    	; 0x41e0 <HKEYPAD_voidcheckPassword2+0x3a>
							check[j]= HKEYPAD_enGetPressedKey(check[j]);
							HKEYPAD_enGetPressedKey(check[j]);
							LCD_voidWriteData('*');
						}
			}
				if(password[0]==check[0] && password[1]==check[1] && password[2]==check[2] && password[3]==check[3])
    4256:	9c 81       	ldd	r25, Y+4	; 0x04
    4258:	88 85       	ldd	r24, Y+8	; 0x08
    425a:	98 17       	cp	r25, r24
    425c:	81 f4       	brne	.+32     	; 0x427e <HKEYPAD_voidcheckPassword2+0xd8>
    425e:	9d 81       	ldd	r25, Y+5	; 0x05
    4260:	89 85       	ldd	r24, Y+9	; 0x09
    4262:	98 17       	cp	r25, r24
    4264:	61 f4       	brne	.+24     	; 0x427e <HKEYPAD_voidcheckPassword2+0xd8>
    4266:	9e 81       	ldd	r25, Y+6	; 0x06
    4268:	8a 85       	ldd	r24, Y+10	; 0x0a
    426a:	98 17       	cp	r25, r24
    426c:	41 f4       	brne	.+16     	; 0x427e <HKEYPAD_voidcheckPassword2+0xd8>
    426e:	9f 81       	ldd	r25, Y+7	; 0x07
    4270:	8b 85       	ldd	r24, Y+11	; 0x0b
    4272:	98 17       	cp	r25, r24
    4274:	21 f4       	brne	.+8      	; 0x427e <HKEYPAD_voidcheckPassword2+0xd8>
				{
					HLED_enSetON(HLED_BLUE_ID);
    4276:	82 e0       	ldi	r24, 0x02	; 2
    4278:	0e 94 38 17 	call	0x2e70	; 0x2e70 <HLED_enSetON>
    427c:	0a c0       	rjmp	.+20     	; 0x4292 <HKEYPAD_voidcheckPassword2+0xec>
					break;
				}
				else
				{
					counter++;
    427e:	89 81       	ldd	r24, Y+1	; 0x01
    4280:	8f 5f       	subi	r24, 0xFF	; 255
    4282:	89 83       	std	Y+1, r24	; 0x01
u8 password[4]={'1','2','3','4'};
u8 check [4]={0};
u8 i,j;
u8 counter=0;

for(i=0;i<3;i++)  //number of password trials
    4284:	8b 81       	ldd	r24, Y+3	; 0x03
    4286:	8f 5f       	subi	r24, 0xFF	; 255
    4288:	8b 83       	std	Y+3, r24	; 0x03
    428a:	8b 81       	ldd	r24, Y+3	; 0x03
    428c:	83 30       	cpi	r24, 0x03	; 3
    428e:	08 f4       	brcc	.+2      	; 0x4292 <HKEYPAD_voidcheckPassword2+0xec>
    4290:	a5 cf       	rjmp	.-182    	; 0x41dc <HKEYPAD_voidcheckPassword2+0x36>
				else
				{
					counter++;
				}
	}
	if (counter==3)
    4292:	89 81       	ldd	r24, Y+1	; 0x01
    4294:	83 30       	cpi	r24, 0x03	; 3
    4296:	11 f4       	brne	.+4      	; 0x429c <HKEYPAD_voidcheckPassword2+0xf6>
		{
			HBUZZ_Once();
    4298:	0e 94 8a 21 	call	0x4314	; 0x4314 <HBUZZ_Once>
		}
		counter =	0 ;
    429c:	19 82       	std	Y+1, r1	; 0x01
}
    429e:	2b 96       	adiw	r28, 0x0b	; 11
    42a0:	0f b6       	in	r0, 0x3f	; 63
    42a2:	f8 94       	cli
    42a4:	de bf       	out	0x3e, r29	; 62
    42a6:	0f be       	out	0x3f, r0	; 63
    42a8:	cd bf       	out	0x3d, r28	; 61
    42aa:	cf 91       	pop	r28
    42ac:	df 91       	pop	r29
    42ae:	1f 91       	pop	r17
    42b0:	0f 91       	pop	r16
    42b2:	08 95       	ret

000042b4 <HBUZZ_Init>:
#include"HBUZZ_priv.h"
#include"HBUZZ_config.h"
#include"HBUZZ_int.h"

ErrorState_t HBUZZ_Init(void)
{
    42b4:	df 93       	push	r29
    42b6:	cf 93       	push	r28
    42b8:	0f 92       	push	r0
    42ba:	cd b7       	in	r28, 0x3d	; 61
    42bc:	de b7       	in	r29, 0x3e	; 62
	ErrorState_t Local_State = SUCCESS;
    42be:	82 e0       	ldi	r24, 0x02	; 2
    42c0:	89 83       	std	Y+1, r24	; 0x01
	MDIO_voidsetPinDirection(HBUZZ_PIN, OUTPUT);
    42c2:	83 e2       	ldi	r24, 0x23	; 35
    42c4:	61 e0       	ldi	r22, 0x01	; 1
    42c6:	0e 94 27 09 	call	0x124e	; 0x124e <MDIO_voidsetPinDirection>
	return Local_State;
    42ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    42cc:	0f 90       	pop	r0
    42ce:	cf 91       	pop	r28
    42d0:	df 91       	pop	r29
    42d2:	08 95       	ret

000042d4 <HBUZZ_SetON>:

ErrorState_t HBUZZ_SetON(void)
{
    42d4:	df 93       	push	r29
    42d6:	cf 93       	push	r28
    42d8:	0f 92       	push	r0
    42da:	cd b7       	in	r28, 0x3d	; 61
    42dc:	de b7       	in	r29, 0x3e	; 62
	ErrorState_t Local_State = SUCCESS;
    42de:	82 e0       	ldi	r24, 0x02	; 2
    42e0:	89 83       	std	Y+1, r24	; 0x01
	MDIO_voidsetPinValue(HBUZZ_PIN, HIGH);
    42e2:	83 e2       	ldi	r24, 0x23	; 35
    42e4:	61 e0       	ldi	r22, 0x01	; 1
    42e6:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
	return Local_State;
    42ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    42ec:	0f 90       	pop	r0
    42ee:	cf 91       	pop	r28
    42f0:	df 91       	pop	r29
    42f2:	08 95       	ret

000042f4 <HBUZZ_SetOFF>:
ErrorState_t HBUZZ_SetOFF(void)
{
    42f4:	df 93       	push	r29
    42f6:	cf 93       	push	r28
    42f8:	0f 92       	push	r0
    42fa:	cd b7       	in	r28, 0x3d	; 61
    42fc:	de b7       	in	r29, 0x3e	; 62
	ErrorState_t Local_State = SUCCESS;
    42fe:	82 e0       	ldi	r24, 0x02	; 2
    4300:	89 83       	std	Y+1, r24	; 0x01
	MDIO_voidsetPinValue(HBUZZ_PIN, LOW);
    4302:	83 e2       	ldi	r24, 0x23	; 35
    4304:	60 e0       	ldi	r22, 0x00	; 0
    4306:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
	return Local_State;
    430a:	89 81       	ldd	r24, Y+1	; 0x01
}
    430c:	0f 90       	pop	r0
    430e:	cf 91       	pop	r28
    4310:	df 91       	pop	r29
    4312:	08 95       	ret

00004314 <HBUZZ_Once>:
ErrorState_t HBUZZ_Once(void)
{
    4314:	df 93       	push	r29
    4316:	cf 93       	push	r28
    4318:	cd b7       	in	r28, 0x3d	; 61
    431a:	de b7       	in	r29, 0x3e	; 62
    431c:	2f 97       	sbiw	r28, 0x0f	; 15
    431e:	0f b6       	in	r0, 0x3f	; 63
    4320:	f8 94       	cli
    4322:	de bf       	out	0x3e, r29	; 62
    4324:	0f be       	out	0x3f, r0	; 63
    4326:	cd bf       	out	0x3d, r28	; 61
	ErrorState_t Local_State = SUCCESS;
    4328:	82 e0       	ldi	r24, 0x02	; 2
    432a:	8f 87       	std	Y+15, r24	; 0x0f
	MDIO_voidsetPinValue(HBUZZ_PIN, HIGH);
    432c:	83 e2       	ldi	r24, 0x23	; 35
    432e:	61 e0       	ldi	r22, 0x01	; 1
    4330:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
    4334:	80 e0       	ldi	r24, 0x00	; 0
    4336:	90 e0       	ldi	r25, 0x00	; 0
    4338:	aa ef       	ldi	r26, 0xFA	; 250
    433a:	b3 e4       	ldi	r27, 0x43	; 67
    433c:	8b 87       	std	Y+11, r24	; 0x0b
    433e:	9c 87       	std	Y+12, r25	; 0x0c
    4340:	ad 87       	std	Y+13, r26	; 0x0d
    4342:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4344:	6b 85       	ldd	r22, Y+11	; 0x0b
    4346:	7c 85       	ldd	r23, Y+12	; 0x0c
    4348:	8d 85       	ldd	r24, Y+13	; 0x0d
    434a:	9e 85       	ldd	r25, Y+14	; 0x0e
    434c:	20 e0       	ldi	r18, 0x00	; 0
    434e:	30 e0       	ldi	r19, 0x00	; 0
    4350:	4a e7       	ldi	r20, 0x7A	; 122
    4352:	55 e4       	ldi	r21, 0x45	; 69
    4354:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4358:	dc 01       	movw	r26, r24
    435a:	cb 01       	movw	r24, r22
    435c:	8f 83       	std	Y+7, r24	; 0x07
    435e:	98 87       	std	Y+8, r25	; 0x08
    4360:	a9 87       	std	Y+9, r26	; 0x09
    4362:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4364:	6f 81       	ldd	r22, Y+7	; 0x07
    4366:	78 85       	ldd	r23, Y+8	; 0x08
    4368:	89 85       	ldd	r24, Y+9	; 0x09
    436a:	9a 85       	ldd	r25, Y+10	; 0x0a
    436c:	20 e0       	ldi	r18, 0x00	; 0
    436e:	30 e0       	ldi	r19, 0x00	; 0
    4370:	40 e8       	ldi	r20, 0x80	; 128
    4372:	5f e3       	ldi	r21, 0x3F	; 63
    4374:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4378:	88 23       	and	r24, r24
    437a:	2c f4       	brge	.+10     	; 0x4386 <HBUZZ_Once+0x72>
		__ticks = 1;
    437c:	81 e0       	ldi	r24, 0x01	; 1
    437e:	90 e0       	ldi	r25, 0x00	; 0
    4380:	9e 83       	std	Y+6, r25	; 0x06
    4382:	8d 83       	std	Y+5, r24	; 0x05
    4384:	3f c0       	rjmp	.+126    	; 0x4404 <HBUZZ_Once+0xf0>
	else if (__tmp > 65535)
    4386:	6f 81       	ldd	r22, Y+7	; 0x07
    4388:	78 85       	ldd	r23, Y+8	; 0x08
    438a:	89 85       	ldd	r24, Y+9	; 0x09
    438c:	9a 85       	ldd	r25, Y+10	; 0x0a
    438e:	20 e0       	ldi	r18, 0x00	; 0
    4390:	3f ef       	ldi	r19, 0xFF	; 255
    4392:	4f e7       	ldi	r20, 0x7F	; 127
    4394:	57 e4       	ldi	r21, 0x47	; 71
    4396:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    439a:	18 16       	cp	r1, r24
    439c:	4c f5       	brge	.+82     	; 0x43f0 <HBUZZ_Once+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    439e:	6b 85       	ldd	r22, Y+11	; 0x0b
    43a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    43a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    43a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    43a6:	20 e0       	ldi	r18, 0x00	; 0
    43a8:	30 e0       	ldi	r19, 0x00	; 0
    43aa:	40 e2       	ldi	r20, 0x20	; 32
    43ac:	51 e4       	ldi	r21, 0x41	; 65
    43ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43b2:	dc 01       	movw	r26, r24
    43b4:	cb 01       	movw	r24, r22
    43b6:	bc 01       	movw	r22, r24
    43b8:	cd 01       	movw	r24, r26
    43ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43be:	dc 01       	movw	r26, r24
    43c0:	cb 01       	movw	r24, r22
    43c2:	9e 83       	std	Y+6, r25	; 0x06
    43c4:	8d 83       	std	Y+5, r24	; 0x05
    43c6:	0f c0       	rjmp	.+30     	; 0x43e6 <HBUZZ_Once+0xd2>
    43c8:	80 e9       	ldi	r24, 0x90	; 144
    43ca:	91 e0       	ldi	r25, 0x01	; 1
    43cc:	9c 83       	std	Y+4, r25	; 0x04
    43ce:	8b 83       	std	Y+3, r24	; 0x03
    43d0:	8b 81       	ldd	r24, Y+3	; 0x03
    43d2:	9c 81       	ldd	r25, Y+4	; 0x04
    43d4:	01 97       	sbiw	r24, 0x01	; 1
    43d6:	f1 f7       	brne	.-4      	; 0x43d4 <HBUZZ_Once+0xc0>
    43d8:	9c 83       	std	Y+4, r25	; 0x04
    43da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43dc:	8d 81       	ldd	r24, Y+5	; 0x05
    43de:	9e 81       	ldd	r25, Y+6	; 0x06
    43e0:	01 97       	sbiw	r24, 0x01	; 1
    43e2:	9e 83       	std	Y+6, r25	; 0x06
    43e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43e6:	8d 81       	ldd	r24, Y+5	; 0x05
    43e8:	9e 81       	ldd	r25, Y+6	; 0x06
    43ea:	00 97       	sbiw	r24, 0x00	; 0
    43ec:	69 f7       	brne	.-38     	; 0x43c8 <HBUZZ_Once+0xb4>
    43ee:	14 c0       	rjmp	.+40     	; 0x4418 <HBUZZ_Once+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43f0:	6f 81       	ldd	r22, Y+7	; 0x07
    43f2:	78 85       	ldd	r23, Y+8	; 0x08
    43f4:	89 85       	ldd	r24, Y+9	; 0x09
    43f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    43f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43fc:	dc 01       	movw	r26, r24
    43fe:	cb 01       	movw	r24, r22
    4400:	9e 83       	std	Y+6, r25	; 0x06
    4402:	8d 83       	std	Y+5, r24	; 0x05
    4404:	8d 81       	ldd	r24, Y+5	; 0x05
    4406:	9e 81       	ldd	r25, Y+6	; 0x06
    4408:	9a 83       	std	Y+2, r25	; 0x02
    440a:	89 83       	std	Y+1, r24	; 0x01
    440c:	89 81       	ldd	r24, Y+1	; 0x01
    440e:	9a 81       	ldd	r25, Y+2	; 0x02
    4410:	01 97       	sbiw	r24, 0x01	; 1
    4412:	f1 f7       	brne	.-4      	; 0x4410 <HBUZZ_Once+0xfc>
    4414:	9a 83       	std	Y+2, r25	; 0x02
    4416:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(HBUZZ_PERIOD);
	MDIO_voidsetPinValue(HBUZZ_PIN, LOW);
    4418:	83 e2       	ldi	r24, 0x23	; 35
    441a:	60 e0       	ldi	r22, 0x00	; 0
    441c:	0e 94 4b 0a 	call	0x1496	; 0x1496 <MDIO_voidsetPinValue>
	return Local_State;
    4420:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    4422:	2f 96       	adiw	r28, 0x0f	; 15
    4424:	0f b6       	in	r0, 0x3f	; 63
    4426:	f8 94       	cli
    4428:	de bf       	out	0x3e, r29	; 62
    442a:	0f be       	out	0x3f, r0	; 63
    442c:	cd bf       	out	0x3d, r28	; 61
    442e:	cf 91       	pop	r28
    4430:	df 91       	pop	r29
    4432:	08 95       	ret

00004434 <LED>:
}
#endif

/*Timer 0 Normal Mode Applications*/
void LED(void)
{
    4434:	df 93       	push	r29
    4436:	cf 93       	push	r28
    4438:	cd b7       	in	r28, 0x3d	; 61
    443a:	de b7       	in	r29, 0x3e	; 62

		static u8 Local_u8Counter =0;
		Local_u8Counter++;
    443c:	80 91 aa 00 	lds	r24, 0x00AA
    4440:	8f 5f       	subi	r24, 0xFF	; 255
    4442:	80 93 aa 00 	sts	0x00AA, r24
		if(Local_u8Counter==62)
    4446:	80 91 aa 00 	lds	r24, 0x00AA
    444a:	8e 33       	cpi	r24, 0x3E	; 62
    444c:	49 f4       	brne	.+18     	; 0x4460 <LED+0x2c>
		{
			HLED_enToggle(HLED_BLUE_ID);
    444e:	82 e0       	ldi	r24, 0x02	; 2
    4450:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <HLED_enToggle>
			Local_u8Counter=0;
    4454:	10 92 aa 00 	sts	0x00AA, r1
			TCNT0_REG=247;
    4458:	e2 e5       	ldi	r30, 0x52	; 82
    445a:	f0 e0       	ldi	r31, 0x00	; 0
    445c:	87 ef       	ldi	r24, 0xF7	; 247
    445e:	80 83       	st	Z, r24
		}

}
    4460:	cf 91       	pop	r28
    4462:	df 91       	pop	r29
    4464:	08 95       	ret

00004466 <main>:


int main()
{
    4466:	df 93       	push	r29
    4468:	cf 93       	push	r28
    446a:	cd b7       	in	r28, 0x3d	; 61
    446c:	de b7       	in	r29, 0x3e	; 62
	HLED_enInit(HLED_BLUE_ID);
    446e:	82 e0       	ldi	r24, 0x02	; 2
    4470:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <HLED_enInit>
	TIMER0_voidInit();
    4474:	0e 94 a3 05 	call	0xb46	; 0xb46 <TIMER0_voidInit>
	TIMER0_u8SetCallBack(LED);
    4478:	8a e1       	ldi	r24, 0x1A	; 26
    447a:	92 e2       	ldi	r25, 0x22	; 34
    447c:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <TIMER0_u8SetCallBack>
	GIE_voidEnable();
    4480:	0e 94 42 06 	call	0xc84	; 0xc84 <GIE_voidEnable>
    4484:	ff cf       	rjmp	.-2      	; 0x4484 <main+0x1e>

00004486 <__mulsi3>:
    4486:	62 9f       	mul	r22, r18
    4488:	d0 01       	movw	r26, r0
    448a:	73 9f       	mul	r23, r19
    448c:	f0 01       	movw	r30, r0
    448e:	82 9f       	mul	r24, r18
    4490:	e0 0d       	add	r30, r0
    4492:	f1 1d       	adc	r31, r1
    4494:	64 9f       	mul	r22, r20
    4496:	e0 0d       	add	r30, r0
    4498:	f1 1d       	adc	r31, r1
    449a:	92 9f       	mul	r25, r18
    449c:	f0 0d       	add	r31, r0
    449e:	83 9f       	mul	r24, r19
    44a0:	f0 0d       	add	r31, r0
    44a2:	74 9f       	mul	r23, r20
    44a4:	f0 0d       	add	r31, r0
    44a6:	65 9f       	mul	r22, r21
    44a8:	f0 0d       	add	r31, r0
    44aa:	99 27       	eor	r25, r25
    44ac:	72 9f       	mul	r23, r18
    44ae:	b0 0d       	add	r27, r0
    44b0:	e1 1d       	adc	r30, r1
    44b2:	f9 1f       	adc	r31, r25
    44b4:	63 9f       	mul	r22, r19
    44b6:	b0 0d       	add	r27, r0
    44b8:	e1 1d       	adc	r30, r1
    44ba:	f9 1f       	adc	r31, r25
    44bc:	bd 01       	movw	r22, r26
    44be:	cf 01       	movw	r24, r30
    44c0:	11 24       	eor	r1, r1
    44c2:	08 95       	ret

000044c4 <__udivmodqi4>:
    44c4:	99 1b       	sub	r25, r25
    44c6:	79 e0       	ldi	r23, 0x09	; 9
    44c8:	04 c0       	rjmp	.+8      	; 0x44d2 <__udivmodqi4_ep>

000044ca <__udivmodqi4_loop>:
    44ca:	99 1f       	adc	r25, r25
    44cc:	96 17       	cp	r25, r22
    44ce:	08 f0       	brcs	.+2      	; 0x44d2 <__udivmodqi4_ep>
    44d0:	96 1b       	sub	r25, r22

000044d2 <__udivmodqi4_ep>:
    44d2:	88 1f       	adc	r24, r24
    44d4:	7a 95       	dec	r23
    44d6:	c9 f7       	brne	.-14     	; 0x44ca <__udivmodqi4_loop>
    44d8:	80 95       	com	r24
    44da:	08 95       	ret

000044dc <__udivmodsi4>:
    44dc:	a1 e2       	ldi	r26, 0x21	; 33
    44de:	1a 2e       	mov	r1, r26
    44e0:	aa 1b       	sub	r26, r26
    44e2:	bb 1b       	sub	r27, r27
    44e4:	fd 01       	movw	r30, r26
    44e6:	0d c0       	rjmp	.+26     	; 0x4502 <__udivmodsi4_ep>

000044e8 <__udivmodsi4_loop>:
    44e8:	aa 1f       	adc	r26, r26
    44ea:	bb 1f       	adc	r27, r27
    44ec:	ee 1f       	adc	r30, r30
    44ee:	ff 1f       	adc	r31, r31
    44f0:	a2 17       	cp	r26, r18
    44f2:	b3 07       	cpc	r27, r19
    44f4:	e4 07       	cpc	r30, r20
    44f6:	f5 07       	cpc	r31, r21
    44f8:	20 f0       	brcs	.+8      	; 0x4502 <__udivmodsi4_ep>
    44fa:	a2 1b       	sub	r26, r18
    44fc:	b3 0b       	sbc	r27, r19
    44fe:	e4 0b       	sbc	r30, r20
    4500:	f5 0b       	sbc	r31, r21

00004502 <__udivmodsi4_ep>:
    4502:	66 1f       	adc	r22, r22
    4504:	77 1f       	adc	r23, r23
    4506:	88 1f       	adc	r24, r24
    4508:	99 1f       	adc	r25, r25
    450a:	1a 94       	dec	r1
    450c:	69 f7       	brne	.-38     	; 0x44e8 <__udivmodsi4_loop>
    450e:	60 95       	com	r22
    4510:	70 95       	com	r23
    4512:	80 95       	com	r24
    4514:	90 95       	com	r25
    4516:	9b 01       	movw	r18, r22
    4518:	ac 01       	movw	r20, r24
    451a:	bd 01       	movw	r22, r26
    451c:	cf 01       	movw	r24, r30
    451e:	08 95       	ret

00004520 <__prologue_saves__>:
    4520:	2f 92       	push	r2
    4522:	3f 92       	push	r3
    4524:	4f 92       	push	r4
    4526:	5f 92       	push	r5
    4528:	6f 92       	push	r6
    452a:	7f 92       	push	r7
    452c:	8f 92       	push	r8
    452e:	9f 92       	push	r9
    4530:	af 92       	push	r10
    4532:	bf 92       	push	r11
    4534:	cf 92       	push	r12
    4536:	df 92       	push	r13
    4538:	ef 92       	push	r14
    453a:	ff 92       	push	r15
    453c:	0f 93       	push	r16
    453e:	1f 93       	push	r17
    4540:	cf 93       	push	r28
    4542:	df 93       	push	r29
    4544:	cd b7       	in	r28, 0x3d	; 61
    4546:	de b7       	in	r29, 0x3e	; 62
    4548:	ca 1b       	sub	r28, r26
    454a:	db 0b       	sbc	r29, r27
    454c:	0f b6       	in	r0, 0x3f	; 63
    454e:	f8 94       	cli
    4550:	de bf       	out	0x3e, r29	; 62
    4552:	0f be       	out	0x3f, r0	; 63
    4554:	cd bf       	out	0x3d, r28	; 61
    4556:	09 94       	ijmp

00004558 <__epilogue_restores__>:
    4558:	2a 88       	ldd	r2, Y+18	; 0x12
    455a:	39 88       	ldd	r3, Y+17	; 0x11
    455c:	48 88       	ldd	r4, Y+16	; 0x10
    455e:	5f 84       	ldd	r5, Y+15	; 0x0f
    4560:	6e 84       	ldd	r6, Y+14	; 0x0e
    4562:	7d 84       	ldd	r7, Y+13	; 0x0d
    4564:	8c 84       	ldd	r8, Y+12	; 0x0c
    4566:	9b 84       	ldd	r9, Y+11	; 0x0b
    4568:	aa 84       	ldd	r10, Y+10	; 0x0a
    456a:	b9 84       	ldd	r11, Y+9	; 0x09
    456c:	c8 84       	ldd	r12, Y+8	; 0x08
    456e:	df 80       	ldd	r13, Y+7	; 0x07
    4570:	ee 80       	ldd	r14, Y+6	; 0x06
    4572:	fd 80       	ldd	r15, Y+5	; 0x05
    4574:	0c 81       	ldd	r16, Y+4	; 0x04
    4576:	1b 81       	ldd	r17, Y+3	; 0x03
    4578:	aa 81       	ldd	r26, Y+2	; 0x02
    457a:	b9 81       	ldd	r27, Y+1	; 0x01
    457c:	ce 0f       	add	r28, r30
    457e:	d1 1d       	adc	r29, r1
    4580:	0f b6       	in	r0, 0x3f	; 63
    4582:	f8 94       	cli
    4584:	de bf       	out	0x3e, r29	; 62
    4586:	0f be       	out	0x3f, r0	; 63
    4588:	cd bf       	out	0x3d, r28	; 61
    458a:	ed 01       	movw	r28, r26
    458c:	08 95       	ret

0000458e <_exit>:
    458e:	f8 94       	cli

00004590 <__stop_program>:
    4590:	ff cf       	rjmp	.-2      	; 0x4590 <__stop_program>
